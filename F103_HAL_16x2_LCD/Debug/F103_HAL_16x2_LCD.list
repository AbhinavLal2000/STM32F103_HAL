
F103_HAL_16x2_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002340  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  0800244c  0800244c  0001244c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080024f4  080024f4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080024f4  080024f4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080024f4  080024f4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080024f4  080024f4  000124f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080024f8  080024f8  000124f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080024fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000003c  20000070  0800256c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  0800256c  000200ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004637  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001157  00000000  00000000  000246d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000440  00000000  00000000  00025828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000003a8  00000000  00000000  00025c68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001698f  00000000  00000000  00026010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004ec3  00000000  00000000  0003c99f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008033b  00000000  00000000  00041862  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c1b9d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000012e0  00000000  00000000  000c1bf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002434 	.word	0x08002434

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002434 	.word	0x08002434

0800014c <LCD_send>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void LCD_send(char data, uint8_t rs)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	460a      	mov	r2, r1
 8000156:	71fb      	strb	r3, [r7, #7]
 8000158:	4613      	mov	r3, r2
 800015a:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rs);
 800015c:	79bb      	ldrb	r3, [r7, #6]
 800015e:	461a      	mov	r2, r3
 8000160:	2110      	movs	r1, #16
 8000162:	4820      	ldr	r0, [pc, #128]	; (80001e4 <LCD_send+0x98>)
 8000164:	f001 f8f9 	bl	800135a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, ((data >> 3) & 0x01));
 8000168:	79fb      	ldrb	r3, [r7, #7]
 800016a:	08db      	lsrs	r3, r3, #3
 800016c:	b2db      	uxtb	r3, r3
 800016e:	f003 0301 	and.w	r3, r3, #1
 8000172:	b2db      	uxtb	r3, r3
 8000174:	461a      	mov	r2, r3
 8000176:	2108      	movs	r1, #8
 8000178:	481a      	ldr	r0, [pc, #104]	; (80001e4 <LCD_send+0x98>)
 800017a:	f001 f8ee 	bl	800135a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, ((data >> 2) & 0x01));
 800017e:	79fb      	ldrb	r3, [r7, #7]
 8000180:	089b      	lsrs	r3, r3, #2
 8000182:	b2db      	uxtb	r3, r3
 8000184:	f003 0301 	and.w	r3, r3, #1
 8000188:	b2db      	uxtb	r3, r3
 800018a:	461a      	mov	r2, r3
 800018c:	2104      	movs	r1, #4
 800018e:	4815      	ldr	r0, [pc, #84]	; (80001e4 <LCD_send+0x98>)
 8000190:	f001 f8e3 	bl	800135a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, ((data >> 1) & 0x01));
 8000194:	79fb      	ldrb	r3, [r7, #7]
 8000196:	085b      	lsrs	r3, r3, #1
 8000198:	b2db      	uxtb	r3, r3
 800019a:	f003 0301 	and.w	r3, r3, #1
 800019e:	b2db      	uxtb	r3, r3
 80001a0:	461a      	mov	r2, r3
 80001a2:	2102      	movs	r1, #2
 80001a4:	480f      	ldr	r0, [pc, #60]	; (80001e4 <LCD_send+0x98>)
 80001a6:	f001 f8d8 	bl	800135a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, ((data >> 0) & 0x01));
 80001aa:	79fb      	ldrb	r3, [r7, #7]
 80001ac:	f003 0301 	and.w	r3, r3, #1
 80001b0:	b2db      	uxtb	r3, r3
 80001b2:	461a      	mov	r2, r3
 80001b4:	2101      	movs	r1, #1
 80001b6:	480b      	ldr	r0, [pc, #44]	; (80001e4 <LCD_send+0x98>)
 80001b8:	f001 f8cf 	bl	800135a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 1);
 80001bc:	2201      	movs	r2, #1
 80001be:	2140      	movs	r1, #64	; 0x40
 80001c0:	4808      	ldr	r0, [pc, #32]	; (80001e4 <LCD_send+0x98>)
 80001c2:	f001 f8ca 	bl	800135a <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80001c6:	2001      	movs	r0, #1
 80001c8:	f000 fe24 	bl	8000e14 <HAL_Delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 0);
 80001cc:	2200      	movs	r2, #0
 80001ce:	2140      	movs	r1, #64	; 0x40
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <LCD_send+0x98>)
 80001d2:	f001 f8c2 	bl	800135a <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80001d6:	2001      	movs	r0, #1
 80001d8:	f000 fe1c 	bl	8000e14 <HAL_Delay>
}
 80001dc:	bf00      	nop
 80001de:	3708      	adds	r7, #8
 80001e0:	46bd      	mov	sp, r7
 80001e2:	bd80      	pop	{r7, pc}
 80001e4:	40010800 	.word	0x40010800

080001e8 <LCD_cmd>:

void LCD_cmd(char cmd)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b084      	sub	sp, #16
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	4603      	mov	r3, r0
 80001f0:	71fb      	strb	r3, [r7, #7]
	char data;
	data = ((cmd >> 4) & 0x0F);
 80001f2:	79fb      	ldrb	r3, [r7, #7]
 80001f4:	091b      	lsrs	r3, r3, #4
 80001f6:	73fb      	strb	r3, [r7, #15]
	LCD_send(data, 0);
 80001f8:	7bfb      	ldrb	r3, [r7, #15]
 80001fa:	2100      	movs	r1, #0
 80001fc:	4618      	mov	r0, r3
 80001fe:	f7ff ffa5 	bl	800014c <LCD_send>
	data = (cmd & 0x0F);
 8000202:	79fb      	ldrb	r3, [r7, #7]
 8000204:	f003 030f 	and.w	r3, r3, #15
 8000208:	73fb      	strb	r3, [r7, #15]
	LCD_send(data, 0);
 800020a:	7bfb      	ldrb	r3, [r7, #15]
 800020c:	2100      	movs	r1, #0
 800020e:	4618      	mov	r0, r3
 8000210:	f7ff ff9c 	bl	800014c <LCD_send>
}
 8000214:	bf00      	nop
 8000216:	3710      	adds	r7, #16
 8000218:	46bd      	mov	sp, r7
 800021a:	bd80      	pop	{r7, pc}

0800021c <LCD_data>:

void LCD_data(char cmd)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b084      	sub	sp, #16
 8000220:	af00      	add	r7, sp, #0
 8000222:	4603      	mov	r3, r0
 8000224:	71fb      	strb	r3, [r7, #7]
	char bits;
	bits = ((cmd >> 4) & 0x0F);
 8000226:	79fb      	ldrb	r3, [r7, #7]
 8000228:	091b      	lsrs	r3, r3, #4
 800022a:	73fb      	strb	r3, [r7, #15]
	LCD_send(bits, 1);
 800022c:	7bfb      	ldrb	r3, [r7, #15]
 800022e:	2101      	movs	r1, #1
 8000230:	4618      	mov	r0, r3
 8000232:	f7ff ff8b 	bl	800014c <LCD_send>
	bits = (cmd & 0x0F);
 8000236:	79fb      	ldrb	r3, [r7, #7]
 8000238:	f003 030f 	and.w	r3, r3, #15
 800023c:	73fb      	strb	r3, [r7, #15]
	LCD_send(bits, 1);
 800023e:	7bfb      	ldrb	r3, [r7, #15]
 8000240:	2101      	movs	r1, #1
 8000242:	4618      	mov	r0, r3
 8000244:	f7ff ff82 	bl	800014c <LCD_send>
}
 8000248:	bf00      	nop
 800024a:	3710      	adds	r7, #16
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}

08000250 <LCD_string>:

void LCD_string(char* str)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b084      	sub	sp, #16
 8000254:	af00      	add	r7, sp, #0
 8000256:	6078      	str	r0, [r7, #4]
	int i = 0;
 8000258:	2300      	movs	r3, #0
 800025a:	60fb      	str	r3, [r7, #12]
	while(str[i] != 0)
 800025c:	e009      	b.n	8000272 <LCD_string+0x22>
	{
		LCD_data(str[i]);
 800025e:	68fb      	ldr	r3, [r7, #12]
 8000260:	687a      	ldr	r2, [r7, #4]
 8000262:	4413      	add	r3, r2
 8000264:	781b      	ldrb	r3, [r3, #0]
 8000266:	4618      	mov	r0, r3
 8000268:	f7ff ffd8 	bl	800021c <LCD_data>
		i++;
 800026c:	68fb      	ldr	r3, [r7, #12]
 800026e:	3301      	adds	r3, #1
 8000270:	60fb      	str	r3, [r7, #12]
	while(str[i] != 0)
 8000272:	68fb      	ldr	r3, [r7, #12]
 8000274:	687a      	ldr	r2, [r7, #4]
 8000276:	4413      	add	r3, r2
 8000278:	781b      	ldrb	r3, [r3, #0]
 800027a:	2b00      	cmp	r3, #0
 800027c:	d1ef      	bne.n	800025e <LCD_string+0xe>
	}
}
 800027e:	bf00      	nop
 8000280:	bf00      	nop
 8000282:	3710      	adds	r7, #16
 8000284:	46bd      	mov	sp, r7
 8000286:	bd80      	pop	{r7, pc}

08000288 <LCD_string_pos>:

void LCD_string_pos(int row, int col, char* str)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b084      	sub	sp, #16
 800028c:	af00      	add	r7, sp, #0
 800028e:	60f8      	str	r0, [r7, #12]
 8000290:	60b9      	str	r1, [r7, #8]
 8000292:	607a      	str	r2, [r7, #4]
	switch (row)
 8000294:	68fb      	ldr	r3, [r7, #12]
 8000296:	2b00      	cmp	r3, #0
 8000298:	d003      	beq.n	80002a2 <LCD_string_pos+0x1a>
 800029a:	68fb      	ldr	r3, [r7, #12]
 800029c:	2b01      	cmp	r3, #1
 800029e:	d005      	beq.n	80002ac <LCD_string_pos+0x24>
 80002a0:	e009      	b.n	80002b6 <LCD_string_pos+0x2e>
	{
		case 0:
			col |= 0x80;
 80002a2:	68bb      	ldr	r3, [r7, #8]
 80002a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002a8:	60bb      	str	r3, [r7, #8]
			break;
 80002aa:	e004      	b.n	80002b6 <LCD_string_pos+0x2e>

		case 1:
			col |= 0xC0;
 80002ac:	68bb      	ldr	r3, [r7, #8]
 80002ae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80002b2:	60bb      	str	r3, [r7, #8]
			break;
 80002b4:	bf00      	nop
	}
	LCD_cmd(col);
 80002b6:	68bb      	ldr	r3, [r7, #8]
 80002b8:	b2db      	uxtb	r3, r3
 80002ba:	4618      	mov	r0, r3
 80002bc:	f7ff ff94 	bl	80001e8 <LCD_cmd>
	LCD_string(str);
 80002c0:	6878      	ldr	r0, [r7, #4]
 80002c2:	f7ff ffc5 	bl	8000250 <LCD_string>
}
 80002c6:	bf00      	nop
 80002c8:	3710      	adds	r7, #16
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bd80      	pop	{r7, pc}

080002ce <LCD_clear>:

void LCD_clear(void)
{
 80002ce:	b580      	push	{r7, lr}
 80002d0:	af00      	add	r7, sp, #0
	LCD_cmd(0x01);
 80002d2:	2001      	movs	r0, #1
 80002d4:	f7ff ff88 	bl	80001e8 <LCD_cmd>
	LCD_cmd(0x80);
 80002d8:	2080      	movs	r0, #128	; 0x80
 80002da:	f7ff ff85 	bl	80001e8 <LCD_cmd>
}
 80002de:	bf00      	nop
 80002e0:	bd80      	pop	{r7, pc}
	...

080002e4 <LCD_init>:
		}
	}
}

void LCD_init(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b084      	sub	sp, #16
 80002e8:	af00      	add	r7, sp, #0
	char command[6] = {0x02, 0x28, 0x0C, 0x06, 0x01, 0x80};
 80002ea:	4a0e      	ldr	r2, [pc, #56]	; (8000324 <LCD_init+0x40>)
 80002ec:	1d3b      	adds	r3, r7, #4
 80002ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80002f2:	6018      	str	r0, [r3, #0]
 80002f4:	3304      	adds	r3, #4
 80002f6:	8019      	strh	r1, [r3, #0]
	for(int i = 0; i < 6; i++)
 80002f8:	2300      	movs	r3, #0
 80002fa:	60fb      	str	r3, [r7, #12]
 80002fc:	e009      	b.n	8000312 <LCD_init+0x2e>
	{
		LCD_cmd(command[i]);
 80002fe:	1d3a      	adds	r2, r7, #4
 8000300:	68fb      	ldr	r3, [r7, #12]
 8000302:	4413      	add	r3, r2
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	4618      	mov	r0, r3
 8000308:	f7ff ff6e 	bl	80001e8 <LCD_cmd>
	for(int i = 0; i < 6; i++)
 800030c:	68fb      	ldr	r3, [r7, #12]
 800030e:	3301      	adds	r3, #1
 8000310:	60fb      	str	r3, [r7, #12]
 8000312:	68fb      	ldr	r3, [r7, #12]
 8000314:	2b05      	cmp	r3, #5
 8000316:	ddf2      	ble.n	80002fe <LCD_init+0x1a>
	}
}
 8000318:	bf00      	nop
 800031a:	bf00      	nop
 800031c:	3710      	adds	r7, #16
 800031e:	46bd      	mov	sp, r7
 8000320:	bd80      	pop	{r7, pc}
 8000322:	bf00      	nop
 8000324:	08002468 	.word	0x08002468

08000328 <LCD_timer>:

void LCD_timer(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b086      	sub	sp, #24
 800032c:	af00      	add	r7, sp, #0
	LCD_clear();
 800032e:	f7ff ffce 	bl	80002ce <LCD_clear>
	LCD_string_pos(0, 5, "Timer");
 8000332:	4ac2      	ldr	r2, [pc, #776]	; (800063c <LCD_timer+0x314>)
 8000334:	2105      	movs	r1, #5
 8000336:	2000      	movs	r0, #0
 8000338:	f7ff ffa6 	bl	8000288 <LCD_string_pos>
	LCD_string_pos(1, 4, "00:00:00");
 800033c:	4ac0      	ldr	r2, [pc, #768]	; (8000640 <LCD_timer+0x318>)
 800033e:	2104      	movs	r1, #4
 8000340:	2001      	movs	r0, #1
 8000342:	f7ff ffa1 	bl	8000288 <LCD_string_pos>
	LCD_cmd(0x0F);
 8000346:	200f      	movs	r0, #15
 8000348:	f7ff ff4e 	bl	80001e8 <LCD_cmd>
	LCD_string_pos(1, 10, "");
 800034c:	4abd      	ldr	r2, [pc, #756]	; (8000644 <LCD_timer+0x31c>)
 800034e:	210a      	movs	r1, #10
 8000350:	2001      	movs	r0, #1
 8000352:	f7ff ff99 	bl	8000288 <LCD_string_pos>
	uint8_t s = 0, m = 0, h = 0, run = 0;
 8000356:	2300      	movs	r3, #0
 8000358:	75fb      	strb	r3, [r7, #23]
 800035a:	2300      	movs	r3, #0
 800035c:	75bb      	strb	r3, [r7, #22]
 800035e:	2300      	movs	r3, #0
 8000360:	757b      	strb	r3, [r7, #21]
 8000362:	2300      	movs	r3, #0
 8000364:	753b      	strb	r3, [r7, #20]
	int cursor_pos = 0;
 8000366:	2300      	movs	r3, #0
 8000368:	613b      	str	r3, [r7, #16]
	char buffer[3] = {0,0,0};
 800036a:	4ab7      	ldr	r2, [pc, #732]	; (8000648 <LCD_timer+0x320>)
 800036c:	f107 030c 	add.w	r3, r7, #12
 8000370:	6812      	ldr	r2, [r2, #0]
 8000372:	4611      	mov	r1, r2
 8000374:	8019      	strh	r1, [r3, #0]
 8000376:	3302      	adds	r3, #2
 8000378:	0c12      	lsrs	r2, r2, #16
 800037a:	701a      	strb	r2, [r3, #0]
	char hb[3] = {0}; char mb[3] = {0}; char sb[3] = {0};
 800037c:	4bb3      	ldr	r3, [pc, #716]	; (800064c <LCD_timer+0x324>)
 800037e:	881b      	ldrh	r3, [r3, #0]
 8000380:	813b      	strh	r3, [r7, #8]
 8000382:	2300      	movs	r3, #0
 8000384:	72bb      	strb	r3, [r7, #10]
 8000386:	4bb1      	ldr	r3, [pc, #708]	; (800064c <LCD_timer+0x324>)
 8000388:	881b      	ldrh	r3, [r3, #0]
 800038a:	80bb      	strh	r3, [r7, #4]
 800038c:	2300      	movs	r3, #0
 800038e:	71bb      	strb	r3, [r7, #6]
 8000390:	4bae      	ldr	r3, [pc, #696]	; (800064c <LCD_timer+0x324>)
 8000392:	881b      	ldrh	r3, [r3, #0]
 8000394:	803b      	strh	r3, [r7, #0]
 8000396:	2300      	movs	r3, #0
 8000398:	70bb      	strb	r3, [r7, #2]
	while(1)
	{
		if(HAL_GPIO_ReadPin(BTN_SLCT_GPIO_Port, BTN_SLCT_Pin))
 800039a:	2180      	movs	r1, #128	; 0x80
 800039c:	48ac      	ldr	r0, [pc, #688]	; (8000650 <LCD_timer+0x328>)
 800039e:	f000 ffc5 	bl	800132c <HAL_GPIO_ReadPin>
 80003a2:	4603      	mov	r3, r0
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d012      	beq.n	80003ce <LCD_timer+0xa6>
		{
			cursor_pos += 3;
 80003a8:	693b      	ldr	r3, [r7, #16]
 80003aa:	3303      	adds	r3, #3
 80003ac:	613b      	str	r3, [r7, #16]
			if(cursor_pos > 6)
 80003ae:	693b      	ldr	r3, [r7, #16]
 80003b0:	2b06      	cmp	r3, #6
 80003b2:	dd01      	ble.n	80003b8 <LCD_timer+0x90>
			{
				cursor_pos = 0;
 80003b4:	2300      	movs	r3, #0
 80003b6:	613b      	str	r3, [r7, #16]
			}
			BTN_DELAY
 80003b8:	2064      	movs	r0, #100	; 0x64
 80003ba:	f000 fd2b 	bl	8000e14 <HAL_Delay>
			LCD_string_pos(1, 10-cursor_pos, "");
 80003be:	693b      	ldr	r3, [r7, #16]
 80003c0:	f1c3 030a 	rsb	r3, r3, #10
 80003c4:	4a9f      	ldr	r2, [pc, #636]	; (8000644 <LCD_timer+0x31c>)
 80003c6:	4619      	mov	r1, r3
 80003c8:	2001      	movs	r0, #1
 80003ca:	f7ff ff5d 	bl	8000288 <LCD_string_pos>
		}
		if(HAL_GPIO_ReadPin(BTN_UP_GPIO_Port, BTN_UP_Pin))
 80003ce:	2102      	movs	r1, #2
 80003d0:	48a0      	ldr	r0, [pc, #640]	; (8000654 <LCD_timer+0x32c>)
 80003d2:	f000 ffab 	bl	800132c <HAL_GPIO_ReadPin>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2b00      	cmp	r3, #0
 80003da:	f000 809b 	beq.w	8000514 <LCD_timer+0x1ec>
		{
			buffer[0] = 0; buffer[1] = 0; buffer[2] = 0;
 80003de:	2300      	movs	r3, #0
 80003e0:	733b      	strb	r3, [r7, #12]
 80003e2:	2300      	movs	r3, #0
 80003e4:	737b      	strb	r3, [r7, #13]
 80003e6:	2300      	movs	r3, #0
 80003e8:	73bb      	strb	r3, [r7, #14]
			switch(cursor_pos)
 80003ea:	693b      	ldr	r3, [r7, #16]
 80003ec:	2b06      	cmp	r3, #6
 80003ee:	d062      	beq.n	80004b6 <LCD_timer+0x18e>
 80003f0:	693b      	ldr	r3, [r7, #16]
 80003f2:	2b06      	cmp	r3, #6
 80003f4:	f300 808b 	bgt.w	800050e <LCD_timer+0x1e6>
 80003f8:	693b      	ldr	r3, [r7, #16]
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d003      	beq.n	8000406 <LCD_timer+0xde>
 80003fe:	693b      	ldr	r3, [r7, #16]
 8000400:	2b03      	cmp	r3, #3
 8000402:	d02c      	beq.n	800045e <LCD_timer+0x136>
 8000404:	e083      	b.n	800050e <LCD_timer+0x1e6>
			{
				case 0:
					s++;
 8000406:	7dfb      	ldrb	r3, [r7, #23]
 8000408:	3301      	adds	r3, #1
 800040a:	75fb      	strb	r3, [r7, #23]
					sprintf(buffer, "%d", s);
 800040c:	7dfa      	ldrb	r2, [r7, #23]
 800040e:	f107 030c 	add.w	r3, r7, #12
 8000412:	4991      	ldr	r1, [pc, #580]	; (8000658 <LCD_timer+0x330>)
 8000414:	4618      	mov	r0, r3
 8000416:	f001 fbd3 	bl	8001bc0 <siprintf>
					if(s < 10)
 800041a:	7dfb      	ldrb	r3, [r7, #23]
 800041c:	2b09      	cmp	r3, #9
 800041e:	d811      	bhi.n	8000444 <LCD_timer+0x11c>
					{
						LCD_string_pos(1, 11, buffer);
 8000420:	f107 030c 	add.w	r3, r7, #12
 8000424:	461a      	mov	r2, r3
 8000426:	210b      	movs	r1, #11
 8000428:	2001      	movs	r0, #1
 800042a:	f7ff ff2d 	bl	8000288 <LCD_string_pos>
						LCD_string_pos(1, 10, "0");
 800042e:	4a8b      	ldr	r2, [pc, #556]	; (800065c <LCD_timer+0x334>)
 8000430:	210a      	movs	r1, #10
 8000432:	2001      	movs	r0, #1
 8000434:	f7ff ff28 	bl	8000288 <LCD_string_pos>
						LCD_string_pos(1, 10, "");
 8000438:	4a82      	ldr	r2, [pc, #520]	; (8000644 <LCD_timer+0x31c>)
 800043a:	210a      	movs	r1, #10
 800043c:	2001      	movs	r0, #1
 800043e:	f7ff ff23 	bl	8000288 <LCD_string_pos>
					else
					{
						LCD_string_pos(1, 10, buffer);
						LCD_string_pos(1, 10, "");
					}
					break;
 8000442:	e064      	b.n	800050e <LCD_timer+0x1e6>
						LCD_string_pos(1, 10, buffer);
 8000444:	f107 030c 	add.w	r3, r7, #12
 8000448:	461a      	mov	r2, r3
 800044a:	210a      	movs	r1, #10
 800044c:	2001      	movs	r0, #1
 800044e:	f7ff ff1b 	bl	8000288 <LCD_string_pos>
						LCD_string_pos(1, 10, "");
 8000452:	4a7c      	ldr	r2, [pc, #496]	; (8000644 <LCD_timer+0x31c>)
 8000454:	210a      	movs	r1, #10
 8000456:	2001      	movs	r0, #1
 8000458:	f7ff ff16 	bl	8000288 <LCD_string_pos>
					break;
 800045c:	e057      	b.n	800050e <LCD_timer+0x1e6>
				case 3:
					m++;
 800045e:	7dbb      	ldrb	r3, [r7, #22]
 8000460:	3301      	adds	r3, #1
 8000462:	75bb      	strb	r3, [r7, #22]
					sprintf(buffer, "%d", m);
 8000464:	7dba      	ldrb	r2, [r7, #22]
 8000466:	f107 030c 	add.w	r3, r7, #12
 800046a:	497b      	ldr	r1, [pc, #492]	; (8000658 <LCD_timer+0x330>)
 800046c:	4618      	mov	r0, r3
 800046e:	f001 fba7 	bl	8001bc0 <siprintf>
					if(m < 10)
 8000472:	7dbb      	ldrb	r3, [r7, #22]
 8000474:	2b09      	cmp	r3, #9
 8000476:	d811      	bhi.n	800049c <LCD_timer+0x174>
					{
						LCD_string_pos(1, 8, buffer);
 8000478:	f107 030c 	add.w	r3, r7, #12
 800047c:	461a      	mov	r2, r3
 800047e:	2108      	movs	r1, #8
 8000480:	2001      	movs	r0, #1
 8000482:	f7ff ff01 	bl	8000288 <LCD_string_pos>
						LCD_string_pos(1, 7, "0");
 8000486:	4a75      	ldr	r2, [pc, #468]	; (800065c <LCD_timer+0x334>)
 8000488:	2107      	movs	r1, #7
 800048a:	2001      	movs	r0, #1
 800048c:	f7ff fefc 	bl	8000288 <LCD_string_pos>
						LCD_string_pos(1, 7, "");
 8000490:	4a6c      	ldr	r2, [pc, #432]	; (8000644 <LCD_timer+0x31c>)
 8000492:	2107      	movs	r1, #7
 8000494:	2001      	movs	r0, #1
 8000496:	f7ff fef7 	bl	8000288 <LCD_string_pos>
					else
					{
						LCD_string_pos(1, 7, buffer);
						LCD_string_pos(1, 7, "");
					}
					break;
 800049a:	e038      	b.n	800050e <LCD_timer+0x1e6>
						LCD_string_pos(1, 7, buffer);
 800049c:	f107 030c 	add.w	r3, r7, #12
 80004a0:	461a      	mov	r2, r3
 80004a2:	2107      	movs	r1, #7
 80004a4:	2001      	movs	r0, #1
 80004a6:	f7ff feef 	bl	8000288 <LCD_string_pos>
						LCD_string_pos(1, 7, "");
 80004aa:	4a66      	ldr	r2, [pc, #408]	; (8000644 <LCD_timer+0x31c>)
 80004ac:	2107      	movs	r1, #7
 80004ae:	2001      	movs	r0, #1
 80004b0:	f7ff feea 	bl	8000288 <LCD_string_pos>
					break;
 80004b4:	e02b      	b.n	800050e <LCD_timer+0x1e6>
				case 6:
					h++;
 80004b6:	7d7b      	ldrb	r3, [r7, #21]
 80004b8:	3301      	adds	r3, #1
 80004ba:	757b      	strb	r3, [r7, #21]
					sprintf(buffer, "%d", h);
 80004bc:	7d7a      	ldrb	r2, [r7, #21]
 80004be:	f107 030c 	add.w	r3, r7, #12
 80004c2:	4965      	ldr	r1, [pc, #404]	; (8000658 <LCD_timer+0x330>)
 80004c4:	4618      	mov	r0, r3
 80004c6:	f001 fb7b 	bl	8001bc0 <siprintf>
					if(h < 10)
 80004ca:	7d7b      	ldrb	r3, [r7, #21]
 80004cc:	2b09      	cmp	r3, #9
 80004ce:	d811      	bhi.n	80004f4 <LCD_timer+0x1cc>
					{
						LCD_string_pos(1, 5, buffer);
 80004d0:	f107 030c 	add.w	r3, r7, #12
 80004d4:	461a      	mov	r2, r3
 80004d6:	2105      	movs	r1, #5
 80004d8:	2001      	movs	r0, #1
 80004da:	f7ff fed5 	bl	8000288 <LCD_string_pos>
						LCD_string_pos(1, 4, "0");
 80004de:	4a5f      	ldr	r2, [pc, #380]	; (800065c <LCD_timer+0x334>)
 80004e0:	2104      	movs	r1, #4
 80004e2:	2001      	movs	r0, #1
 80004e4:	f7ff fed0 	bl	8000288 <LCD_string_pos>
						LCD_string_pos(1, 4, "");
 80004e8:	4a56      	ldr	r2, [pc, #344]	; (8000644 <LCD_timer+0x31c>)
 80004ea:	2104      	movs	r1, #4
 80004ec:	2001      	movs	r0, #1
 80004ee:	f7ff fecb 	bl	8000288 <LCD_string_pos>
					else
					{
						LCD_string_pos(1, 4, buffer);
						LCD_string_pos(1, 4, "");
					}
					break;
 80004f2:	e00b      	b.n	800050c <LCD_timer+0x1e4>
						LCD_string_pos(1, 4, buffer);
 80004f4:	f107 030c 	add.w	r3, r7, #12
 80004f8:	461a      	mov	r2, r3
 80004fa:	2104      	movs	r1, #4
 80004fc:	2001      	movs	r0, #1
 80004fe:	f7ff fec3 	bl	8000288 <LCD_string_pos>
						LCD_string_pos(1, 4, "");
 8000502:	4a50      	ldr	r2, [pc, #320]	; (8000644 <LCD_timer+0x31c>)
 8000504:	2104      	movs	r1, #4
 8000506:	2001      	movs	r0, #1
 8000508:	f7ff febe 	bl	8000288 <LCD_string_pos>
					break;
 800050c:	bf00      	nop
			}
			BTN_DELAY
 800050e:	2064      	movs	r0, #100	; 0x64
 8000510:	f000 fc80 	bl	8000e14 <HAL_Delay>
		}
		if(HAL_GPIO_ReadPin(BTN_DN_GPIO_Port, BTN_DN_Pin))
 8000514:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000518:	484e      	ldr	r0, [pc, #312]	; (8000654 <LCD_timer+0x32c>)
 800051a:	f000 ff07 	bl	800132c <HAL_GPIO_ReadPin>
 800051e:	4603      	mov	r3, r0
 8000520:	2b00      	cmp	r3, #0
 8000522:	f000 80ad 	beq.w	8000680 <LCD_timer+0x358>
		{
			buffer[0] = 0; buffer[1] = 0; buffer[2] = 0;
 8000526:	2300      	movs	r3, #0
 8000528:	733b      	strb	r3, [r7, #12]
 800052a:	2300      	movs	r3, #0
 800052c:	737b      	strb	r3, [r7, #13]
 800052e:	2300      	movs	r3, #0
 8000530:	73bb      	strb	r3, [r7, #14]
			switch(cursor_pos)
 8000532:	693b      	ldr	r3, [r7, #16]
 8000534:	2b06      	cmp	r3, #6
 8000536:	d062      	beq.n	80005fe <LCD_timer+0x2d6>
 8000538:	693b      	ldr	r3, [r7, #16]
 800053a:	2b06      	cmp	r3, #6
 800053c:	f300 809d 	bgt.w	800067a <LCD_timer+0x352>
 8000540:	693b      	ldr	r3, [r7, #16]
 8000542:	2b00      	cmp	r3, #0
 8000544:	d003      	beq.n	800054e <LCD_timer+0x226>
 8000546:	693b      	ldr	r3, [r7, #16]
 8000548:	2b03      	cmp	r3, #3
 800054a:	d02c      	beq.n	80005a6 <LCD_timer+0x27e>
 800054c:	e095      	b.n	800067a <LCD_timer+0x352>
			{
				case 0:
					s--;
 800054e:	7dfb      	ldrb	r3, [r7, #23]
 8000550:	3b01      	subs	r3, #1
 8000552:	75fb      	strb	r3, [r7, #23]
					sprintf(buffer, "%d", s);
 8000554:	7dfa      	ldrb	r2, [r7, #23]
 8000556:	f107 030c 	add.w	r3, r7, #12
 800055a:	493f      	ldr	r1, [pc, #252]	; (8000658 <LCD_timer+0x330>)
 800055c:	4618      	mov	r0, r3
 800055e:	f001 fb2f 	bl	8001bc0 <siprintf>
					if(s < 10)
 8000562:	7dfb      	ldrb	r3, [r7, #23]
 8000564:	2b09      	cmp	r3, #9
 8000566:	d811      	bhi.n	800058c <LCD_timer+0x264>
					{
						LCD_string_pos(1, 11, buffer);
 8000568:	f107 030c 	add.w	r3, r7, #12
 800056c:	461a      	mov	r2, r3
 800056e:	210b      	movs	r1, #11
 8000570:	2001      	movs	r0, #1
 8000572:	f7ff fe89 	bl	8000288 <LCD_string_pos>
						LCD_string_pos(1, 10, "0");
 8000576:	4a39      	ldr	r2, [pc, #228]	; (800065c <LCD_timer+0x334>)
 8000578:	210a      	movs	r1, #10
 800057a:	2001      	movs	r0, #1
 800057c:	f7ff fe84 	bl	8000288 <LCD_string_pos>
						LCD_string_pos(1, 10, "");
 8000580:	4a30      	ldr	r2, [pc, #192]	; (8000644 <LCD_timer+0x31c>)
 8000582:	210a      	movs	r1, #10
 8000584:	2001      	movs	r0, #1
 8000586:	f7ff fe7f 	bl	8000288 <LCD_string_pos>
					else
					{
						LCD_string_pos(1, 10, buffer);
						LCD_string_pos(1, 10, "");
					}
					break;
 800058a:	e076      	b.n	800067a <LCD_timer+0x352>
						LCD_string_pos(1, 10, buffer);
 800058c:	f107 030c 	add.w	r3, r7, #12
 8000590:	461a      	mov	r2, r3
 8000592:	210a      	movs	r1, #10
 8000594:	2001      	movs	r0, #1
 8000596:	f7ff fe77 	bl	8000288 <LCD_string_pos>
						LCD_string_pos(1, 10, "");
 800059a:	4a2a      	ldr	r2, [pc, #168]	; (8000644 <LCD_timer+0x31c>)
 800059c:	210a      	movs	r1, #10
 800059e:	2001      	movs	r0, #1
 80005a0:	f7ff fe72 	bl	8000288 <LCD_string_pos>
					break;
 80005a4:	e069      	b.n	800067a <LCD_timer+0x352>
				case 3:
					m--;
 80005a6:	7dbb      	ldrb	r3, [r7, #22]
 80005a8:	3b01      	subs	r3, #1
 80005aa:	75bb      	strb	r3, [r7, #22]
					sprintf(buffer, "%d", m);
 80005ac:	7dba      	ldrb	r2, [r7, #22]
 80005ae:	f107 030c 	add.w	r3, r7, #12
 80005b2:	4929      	ldr	r1, [pc, #164]	; (8000658 <LCD_timer+0x330>)
 80005b4:	4618      	mov	r0, r3
 80005b6:	f001 fb03 	bl	8001bc0 <siprintf>
					if(m < 10)
 80005ba:	7dbb      	ldrb	r3, [r7, #22]
 80005bc:	2b09      	cmp	r3, #9
 80005be:	d811      	bhi.n	80005e4 <LCD_timer+0x2bc>
					{
						LCD_string_pos(1, 8, buffer);
 80005c0:	f107 030c 	add.w	r3, r7, #12
 80005c4:	461a      	mov	r2, r3
 80005c6:	2108      	movs	r1, #8
 80005c8:	2001      	movs	r0, #1
 80005ca:	f7ff fe5d 	bl	8000288 <LCD_string_pos>
						LCD_string_pos(1, 7, "0");
 80005ce:	4a23      	ldr	r2, [pc, #140]	; (800065c <LCD_timer+0x334>)
 80005d0:	2107      	movs	r1, #7
 80005d2:	2001      	movs	r0, #1
 80005d4:	f7ff fe58 	bl	8000288 <LCD_string_pos>
						LCD_string_pos(1, 7, "");
 80005d8:	4a1a      	ldr	r2, [pc, #104]	; (8000644 <LCD_timer+0x31c>)
 80005da:	2107      	movs	r1, #7
 80005dc:	2001      	movs	r0, #1
 80005de:	f7ff fe53 	bl	8000288 <LCD_string_pos>
					else
					{
						LCD_string_pos(1, 7, buffer);
						LCD_string_pos(1, 7, "");
					}
					break;
 80005e2:	e04a      	b.n	800067a <LCD_timer+0x352>
						LCD_string_pos(1, 7, buffer);
 80005e4:	f107 030c 	add.w	r3, r7, #12
 80005e8:	461a      	mov	r2, r3
 80005ea:	2107      	movs	r1, #7
 80005ec:	2001      	movs	r0, #1
 80005ee:	f7ff fe4b 	bl	8000288 <LCD_string_pos>
						LCD_string_pos(1, 7, "");
 80005f2:	4a14      	ldr	r2, [pc, #80]	; (8000644 <LCD_timer+0x31c>)
 80005f4:	2107      	movs	r1, #7
 80005f6:	2001      	movs	r0, #1
 80005f8:	f7ff fe46 	bl	8000288 <LCD_string_pos>
					break;
 80005fc:	e03d      	b.n	800067a <LCD_timer+0x352>
				case 6:
					h--;
 80005fe:	7d7b      	ldrb	r3, [r7, #21]
 8000600:	3b01      	subs	r3, #1
 8000602:	757b      	strb	r3, [r7, #21]
					sprintf(buffer, "%d", h);
 8000604:	7d7a      	ldrb	r2, [r7, #21]
 8000606:	f107 030c 	add.w	r3, r7, #12
 800060a:	4913      	ldr	r1, [pc, #76]	; (8000658 <LCD_timer+0x330>)
 800060c:	4618      	mov	r0, r3
 800060e:	f001 fad7 	bl	8001bc0 <siprintf>
					if(h < 10)
 8000612:	7d7b      	ldrb	r3, [r7, #21]
 8000614:	2b09      	cmp	r3, #9
 8000616:	d823      	bhi.n	8000660 <LCD_timer+0x338>
					{
						LCD_string_pos(1, 5, buffer);
 8000618:	f107 030c 	add.w	r3, r7, #12
 800061c:	461a      	mov	r2, r3
 800061e:	2105      	movs	r1, #5
 8000620:	2001      	movs	r0, #1
 8000622:	f7ff fe31 	bl	8000288 <LCD_string_pos>
						LCD_string_pos(1, 4, "0");
 8000626:	4a0d      	ldr	r2, [pc, #52]	; (800065c <LCD_timer+0x334>)
 8000628:	2104      	movs	r1, #4
 800062a:	2001      	movs	r0, #1
 800062c:	f7ff fe2c 	bl	8000288 <LCD_string_pos>
						LCD_string_pos(1, 4, "");
 8000630:	4a04      	ldr	r2, [pc, #16]	; (8000644 <LCD_timer+0x31c>)
 8000632:	2104      	movs	r1, #4
 8000634:	2001      	movs	r0, #1
 8000636:	f7ff fe27 	bl	8000288 <LCD_string_pos>
					else
					{
						LCD_string_pos(1, 4, buffer);
						LCD_string_pos(1, 4, "");
					}
					break;
 800063a:	e01d      	b.n	8000678 <LCD_timer+0x350>
 800063c:	08002450 	.word	0x08002450
 8000640:	08002470 	.word	0x08002470
 8000644:	0800247c 	.word	0x0800247c
 8000648:	08002488 	.word	0x08002488
 800064c:	0800248c 	.word	0x0800248c
 8000650:	40010800 	.word	0x40010800
 8000654:	40010c00 	.word	0x40010c00
 8000658:	08002480 	.word	0x08002480
 800065c:	08002484 	.word	0x08002484
						LCD_string_pos(1, 4, buffer);
 8000660:	f107 030c 	add.w	r3, r7, #12
 8000664:	461a      	mov	r2, r3
 8000666:	2104      	movs	r1, #4
 8000668:	2001      	movs	r0, #1
 800066a:	f7ff fe0d 	bl	8000288 <LCD_string_pos>
						LCD_string_pos(1, 4, "");
 800066e:	4a57      	ldr	r2, [pc, #348]	; (80007cc <LCD_timer+0x4a4>)
 8000670:	2104      	movs	r1, #4
 8000672:	2001      	movs	r0, #1
 8000674:	f7ff fe08 	bl	8000288 <LCD_string_pos>
					break;
 8000678:	bf00      	nop
			}
			BTN_DELAY
 800067a:	2064      	movs	r0, #100	; 0x64
 800067c:	f000 fbca 	bl	8000e14 <HAL_Delay>
		}
		if(HAL_GPIO_ReadPin(BTN_OK_GPIO_Port, BTN_OK_Pin))
 8000680:	2101      	movs	r1, #1
 8000682:	4853      	ldr	r0, [pc, #332]	; (80007d0 <LCD_timer+0x4a8>)
 8000684:	f000 fe52 	bl	800132c <HAL_GPIO_ReadPin>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d007      	beq.n	800069e <LCD_timer+0x376>
		{
			run = 1;
 800068e:	2301      	movs	r3, #1
 8000690:	753b      	strb	r3, [r7, #20]
			LCD_cmd(0x0C);
 8000692:	200c      	movs	r0, #12
 8000694:	f7ff fda8 	bl	80001e8 <LCD_cmd>
			BTN_DELAY
 8000698:	2064      	movs	r0, #100	; 0x64
 800069a:	f000 fbbb 	bl	8000e14 <HAL_Delay>
		}
		if(run == 1)
 800069e:	7d3b      	ldrb	r3, [r7, #20]
 80006a0:	2b01      	cmp	r3, #1
 80006a2:	f47f ae7a 	bne.w	800039a <LCD_timer+0x72>
		{
			if (s != 0)
 80006a6:	7dfb      	ldrb	r3, [r7, #23]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d006      	beq.n	80006ba <LCD_timer+0x392>
			{
				s--;
 80006ac:	7dfb      	ldrb	r3, [r7, #23]
 80006ae:	3b01      	subs	r3, #1
 80006b0:	75fb      	strb	r3, [r7, #23]
				HAL_Delay(1000-2);
 80006b2:	f240 30e6 	movw	r0, #998	; 0x3e6
 80006b6:	f000 fbad 	bl	8000e14 <HAL_Delay>
			}
			if(s == 0)
 80006ba:	7dfb      	ldrb	r3, [r7, #23]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d112      	bne.n	80006e6 <LCD_timer+0x3be>
			{
				if (m != 0)
 80006c0:	7dbb      	ldrb	r3, [r7, #22]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d004      	beq.n	80006d0 <LCD_timer+0x3a8>
				{
					m--;
 80006c6:	7dbb      	ldrb	r3, [r7, #22]
 80006c8:	3b01      	subs	r3, #1
 80006ca:	75bb      	strb	r3, [r7, #22]
					s = 59;
 80006cc:	233b      	movs	r3, #59	; 0x3b
 80006ce:	75fb      	strb	r3, [r7, #23]
				}
				if(m == 0)
 80006d0:	7dbb      	ldrb	r3, [r7, #22]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d107      	bne.n	80006e6 <LCD_timer+0x3be>
				{
					if (h != 0)
 80006d6:	7d7b      	ldrb	r3, [r7, #21]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d004      	beq.n	80006e6 <LCD_timer+0x3be>
					{
						h--;
 80006dc:	7d7b      	ldrb	r3, [r7, #21]
 80006de:	3b01      	subs	r3, #1
 80006e0:	757b      	strb	r3, [r7, #21]
						m = 60;
 80006e2:	233c      	movs	r3, #60	; 0x3c
 80006e4:	75bb      	strb	r3, [r7, #22]
					}
				}
			}
			sprintf(hb, "%d", h);
 80006e6:	7d7a      	ldrb	r2, [r7, #21]
 80006e8:	f107 0308 	add.w	r3, r7, #8
 80006ec:	4939      	ldr	r1, [pc, #228]	; (80007d4 <LCD_timer+0x4ac>)
 80006ee:	4618      	mov	r0, r3
 80006f0:	f001 fa66 	bl	8001bc0 <siprintf>
			sprintf(mb, "%d", m);
 80006f4:	7dba      	ldrb	r2, [r7, #22]
 80006f6:	1d3b      	adds	r3, r7, #4
 80006f8:	4936      	ldr	r1, [pc, #216]	; (80007d4 <LCD_timer+0x4ac>)
 80006fa:	4618      	mov	r0, r3
 80006fc:	f001 fa60 	bl	8001bc0 <siprintf>
			sprintf(sb, "%d", s);
 8000700:	7dfa      	ldrb	r2, [r7, #23]
 8000702:	463b      	mov	r3, r7
 8000704:	4933      	ldr	r1, [pc, #204]	; (80007d4 <LCD_timer+0x4ac>)
 8000706:	4618      	mov	r0, r3
 8000708:	f001 fa5a 	bl	8001bc0 <siprintf>
			if(s < 10)
 800070c:	7dfb      	ldrb	r3, [r7, #23]
 800070e:	2b09      	cmp	r3, #9
 8000710:	d810      	bhi.n	8000734 <LCD_timer+0x40c>
			{
				LCD_string_pos(1, 11, sb);
 8000712:	463b      	mov	r3, r7
 8000714:	461a      	mov	r2, r3
 8000716:	210b      	movs	r1, #11
 8000718:	2001      	movs	r0, #1
 800071a:	f7ff fdb5 	bl	8000288 <LCD_string_pos>
				LCD_string_pos(1, 10, "0");
 800071e:	4a2e      	ldr	r2, [pc, #184]	; (80007d8 <LCD_timer+0x4b0>)
 8000720:	210a      	movs	r1, #10
 8000722:	2001      	movs	r0, #1
 8000724:	f7ff fdb0 	bl	8000288 <LCD_string_pos>
				LCD_string_pos(1, 10, "");
 8000728:	4a28      	ldr	r2, [pc, #160]	; (80007cc <LCD_timer+0x4a4>)
 800072a:	210a      	movs	r1, #10
 800072c:	2001      	movs	r0, #1
 800072e:	f7ff fdab 	bl	8000288 <LCD_string_pos>
 8000732:	e00a      	b.n	800074a <LCD_timer+0x422>
			}
			else
			{
				LCD_string_pos(1, 10, sb);
 8000734:	463b      	mov	r3, r7
 8000736:	461a      	mov	r2, r3
 8000738:	210a      	movs	r1, #10
 800073a:	2001      	movs	r0, #1
 800073c:	f7ff fda4 	bl	8000288 <LCD_string_pos>
				LCD_string_pos(1, 10, "");
 8000740:	4a22      	ldr	r2, [pc, #136]	; (80007cc <LCD_timer+0x4a4>)
 8000742:	210a      	movs	r1, #10
 8000744:	2001      	movs	r0, #1
 8000746:	f7ff fd9f 	bl	8000288 <LCD_string_pos>
			}
			if(m < 10)
 800074a:	7dbb      	ldrb	r3, [r7, #22]
 800074c:	2b09      	cmp	r3, #9
 800074e:	d810      	bhi.n	8000772 <LCD_timer+0x44a>
			{
				LCD_string_pos(1, 8, mb);
 8000750:	1d3b      	adds	r3, r7, #4
 8000752:	461a      	mov	r2, r3
 8000754:	2108      	movs	r1, #8
 8000756:	2001      	movs	r0, #1
 8000758:	f7ff fd96 	bl	8000288 <LCD_string_pos>
				LCD_string_pos(1, 7, "0");
 800075c:	4a1e      	ldr	r2, [pc, #120]	; (80007d8 <LCD_timer+0x4b0>)
 800075e:	2107      	movs	r1, #7
 8000760:	2001      	movs	r0, #1
 8000762:	f7ff fd91 	bl	8000288 <LCD_string_pos>
				LCD_string_pos(1, 7, "");
 8000766:	4a19      	ldr	r2, [pc, #100]	; (80007cc <LCD_timer+0x4a4>)
 8000768:	2107      	movs	r1, #7
 800076a:	2001      	movs	r0, #1
 800076c:	f7ff fd8c 	bl	8000288 <LCD_string_pos>
 8000770:	e00a      	b.n	8000788 <LCD_timer+0x460>
			}
			else
			{
				LCD_string_pos(1, 7, mb);
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	461a      	mov	r2, r3
 8000776:	2107      	movs	r1, #7
 8000778:	2001      	movs	r0, #1
 800077a:	f7ff fd85 	bl	8000288 <LCD_string_pos>
				LCD_string_pos(1, 7, "");
 800077e:	4a13      	ldr	r2, [pc, #76]	; (80007cc <LCD_timer+0x4a4>)
 8000780:	2107      	movs	r1, #7
 8000782:	2001      	movs	r0, #1
 8000784:	f7ff fd80 	bl	8000288 <LCD_string_pos>
			}
			if(h < 10)
 8000788:	7d7b      	ldrb	r3, [r7, #21]
 800078a:	2b09      	cmp	r3, #9
 800078c:	d811      	bhi.n	80007b2 <LCD_timer+0x48a>
			{
				LCD_string_pos(1, 5, hb);
 800078e:	f107 0308 	add.w	r3, r7, #8
 8000792:	461a      	mov	r2, r3
 8000794:	2105      	movs	r1, #5
 8000796:	2001      	movs	r0, #1
 8000798:	f7ff fd76 	bl	8000288 <LCD_string_pos>
				LCD_string_pos(1, 4, "0");
 800079c:	4a0e      	ldr	r2, [pc, #56]	; (80007d8 <LCD_timer+0x4b0>)
 800079e:	2104      	movs	r1, #4
 80007a0:	2001      	movs	r0, #1
 80007a2:	f7ff fd71 	bl	8000288 <LCD_string_pos>
				LCD_string_pos(1, 4, "");
 80007a6:	4a09      	ldr	r2, [pc, #36]	; (80007cc <LCD_timer+0x4a4>)
 80007a8:	2104      	movs	r1, #4
 80007aa:	2001      	movs	r0, #1
 80007ac:	f7ff fd6c 	bl	8000288 <LCD_string_pos>
 80007b0:	e5f3      	b.n	800039a <LCD_timer+0x72>
			}
			else
			{
				LCD_string_pos(1, 4, hb);
 80007b2:	f107 0308 	add.w	r3, r7, #8
 80007b6:	461a      	mov	r2, r3
 80007b8:	2104      	movs	r1, #4
 80007ba:	2001      	movs	r0, #1
 80007bc:	f7ff fd64 	bl	8000288 <LCD_string_pos>
				LCD_string_pos(1, 4, "");
 80007c0:	4a02      	ldr	r2, [pc, #8]	; (80007cc <LCD_timer+0x4a4>)
 80007c2:	2104      	movs	r1, #4
 80007c4:	2001      	movs	r0, #1
 80007c6:	f7ff fd5f 	bl	8000288 <LCD_string_pos>
		if(HAL_GPIO_ReadPin(BTN_SLCT_GPIO_Port, BTN_SLCT_Pin))
 80007ca:	e5e6      	b.n	800039a <LCD_timer+0x72>
 80007cc:	0800247c 	.word	0x0800247c
 80007d0:	40010c00 	.word	0x40010c00
 80007d4:	08002480 	.word	0x08002480
 80007d8:	08002484 	.word	0x08002484

080007dc <LCD_stopwatch>:
		}
	}
}

void LCD_stopwatch(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0
	LCD_clear();
 80007e2:	f7ff fd74 	bl	80002ce <LCD_clear>
	LCD_string_pos(0, 3, "Stopwatch");
 80007e6:	4a60      	ldr	r2, [pc, #384]	; (8000968 <LCD_stopwatch+0x18c>)
 80007e8:	2103      	movs	r1, #3
 80007ea:	2000      	movs	r0, #0
 80007ec:	f7ff fd4c 	bl	8000288 <LCD_string_pos>
	LCD_string_pos(1, 4, "00:00:00");
 80007f0:	4a5e      	ldr	r2, [pc, #376]	; (800096c <LCD_stopwatch+0x190>)
 80007f2:	2104      	movs	r1, #4
 80007f4:	2001      	movs	r0, #1
 80007f6:	f7ff fd47 	bl	8000288 <LCD_string_pos>
	uint8_t h = 0, m = 0, s = 0, run = 0;
 80007fa:	2300      	movs	r3, #0
 80007fc:	73fb      	strb	r3, [r7, #15]
 80007fe:	2300      	movs	r3, #0
 8000800:	73bb      	strb	r3, [r7, #14]
 8000802:	2300      	movs	r3, #0
 8000804:	737b      	strb	r3, [r7, #13]
 8000806:	2300      	movs	r3, #0
 8000808:	733b      	strb	r3, [r7, #12]
	char hb[3] = {0}; char mb[3] = {0}; char sb[3] = {0};
 800080a:	4b59      	ldr	r3, [pc, #356]	; (8000970 <LCD_stopwatch+0x194>)
 800080c:	881b      	ldrh	r3, [r3, #0]
 800080e:	813b      	strh	r3, [r7, #8]
 8000810:	2300      	movs	r3, #0
 8000812:	72bb      	strb	r3, [r7, #10]
 8000814:	4b56      	ldr	r3, [pc, #344]	; (8000970 <LCD_stopwatch+0x194>)
 8000816:	881b      	ldrh	r3, [r3, #0]
 8000818:	80bb      	strh	r3, [r7, #4]
 800081a:	2300      	movs	r3, #0
 800081c:	71bb      	strb	r3, [r7, #6]
 800081e:	4b54      	ldr	r3, [pc, #336]	; (8000970 <LCD_stopwatch+0x194>)
 8000820:	881b      	ldrh	r3, [r3, #0]
 8000822:	803b      	strh	r3, [r7, #0]
 8000824:	2300      	movs	r3, #0
 8000826:	70bb      	strb	r3, [r7, #2]
	while(1)
	{
		if(HAL_GPIO_ReadPin(BTN_OK_GPIO_Port, BTN_OK_Pin))
 8000828:	2101      	movs	r1, #1
 800082a:	4852      	ldr	r0, [pc, #328]	; (8000974 <LCD_stopwatch+0x198>)
 800082c:	f000 fd7e 	bl	800132c <HAL_GPIO_ReadPin>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	f000 8092 	beq.w	800095c <LCD_stopwatch+0x180>
		{
			run = 1;
 8000838:	2301      	movs	r3, #1
 800083a:	733b      	strb	r3, [r7, #12]
			LCD_cmd(0x0C);
 800083c:	200c      	movs	r0, #12
 800083e:	f7ff fcd3 	bl	80001e8 <LCD_cmd>
			BTN_DELAY
 8000842:	2064      	movs	r0, #100	; 0x64
 8000844:	f000 fae6 	bl	8000e14 <HAL_Delay>
		}
		while(run)
 8000848:	e088      	b.n	800095c <LCD_stopwatch+0x180>
		{
			s++;
 800084a:	7b7b      	ldrb	r3, [r7, #13]
 800084c:	3301      	adds	r3, #1
 800084e:	737b      	strb	r3, [r7, #13]
			HAL_Delay(1000-2);
 8000850:	f240 30e6 	movw	r0, #998	; 0x3e6
 8000854:	f000 fade 	bl	8000e14 <HAL_Delay>
			if(s > 59)
 8000858:	7b7b      	ldrb	r3, [r7, #13]
 800085a:	2b3b      	cmp	r3, #59	; 0x3b
 800085c:	d90c      	bls.n	8000878 <LCD_stopwatch+0x9c>
			{
				s = 0;
 800085e:	2300      	movs	r3, #0
 8000860:	737b      	strb	r3, [r7, #13]
				m++;
 8000862:	7bbb      	ldrb	r3, [r7, #14]
 8000864:	3301      	adds	r3, #1
 8000866:	73bb      	strb	r3, [r7, #14]
				if(m > 59)
 8000868:	7bbb      	ldrb	r3, [r7, #14]
 800086a:	2b3b      	cmp	r3, #59	; 0x3b
 800086c:	d904      	bls.n	8000878 <LCD_stopwatch+0x9c>
				{
					m = 0;
 800086e:	2300      	movs	r3, #0
 8000870:	73bb      	strb	r3, [r7, #14]
					h++;
 8000872:	7bfb      	ldrb	r3, [r7, #15]
 8000874:	3301      	adds	r3, #1
 8000876:	73fb      	strb	r3, [r7, #15]
				}
			}

			sprintf(sb, "%d", s);
 8000878:	7b7a      	ldrb	r2, [r7, #13]
 800087a:	463b      	mov	r3, r7
 800087c:	493e      	ldr	r1, [pc, #248]	; (8000978 <LCD_stopwatch+0x19c>)
 800087e:	4618      	mov	r0, r3
 8000880:	f001 f99e 	bl	8001bc0 <siprintf>
			sprintf(mb, "%d", m);
 8000884:	7bba      	ldrb	r2, [r7, #14]
 8000886:	1d3b      	adds	r3, r7, #4
 8000888:	493b      	ldr	r1, [pc, #236]	; (8000978 <LCD_stopwatch+0x19c>)
 800088a:	4618      	mov	r0, r3
 800088c:	f001 f998 	bl	8001bc0 <siprintf>
			sprintf(hb, "%d", h);
 8000890:	7bfa      	ldrb	r2, [r7, #15]
 8000892:	f107 0308 	add.w	r3, r7, #8
 8000896:	4938      	ldr	r1, [pc, #224]	; (8000978 <LCD_stopwatch+0x19c>)
 8000898:	4618      	mov	r0, r3
 800089a:	f001 f991 	bl	8001bc0 <siprintf>
			if(s < 10)
 800089e:	7b7b      	ldrb	r3, [r7, #13]
 80008a0:	2b09      	cmp	r3, #9
 80008a2:	d810      	bhi.n	80008c6 <LCD_stopwatch+0xea>
			{
				LCD_string_pos(1, 11, sb);
 80008a4:	463b      	mov	r3, r7
 80008a6:	461a      	mov	r2, r3
 80008a8:	210b      	movs	r1, #11
 80008aa:	2001      	movs	r0, #1
 80008ac:	f7ff fcec 	bl	8000288 <LCD_string_pos>
				LCD_string_pos(1, 10, "0");
 80008b0:	4a32      	ldr	r2, [pc, #200]	; (800097c <LCD_stopwatch+0x1a0>)
 80008b2:	210a      	movs	r1, #10
 80008b4:	2001      	movs	r0, #1
 80008b6:	f7ff fce7 	bl	8000288 <LCD_string_pos>
				LCD_string_pos(1, 10, "");
 80008ba:	4a31      	ldr	r2, [pc, #196]	; (8000980 <LCD_stopwatch+0x1a4>)
 80008bc:	210a      	movs	r1, #10
 80008be:	2001      	movs	r0, #1
 80008c0:	f7ff fce2 	bl	8000288 <LCD_string_pos>
 80008c4:	e00a      	b.n	80008dc <LCD_stopwatch+0x100>
			}
			else
			{
				LCD_string_pos(1, 10, sb);
 80008c6:	463b      	mov	r3, r7
 80008c8:	461a      	mov	r2, r3
 80008ca:	210a      	movs	r1, #10
 80008cc:	2001      	movs	r0, #1
 80008ce:	f7ff fcdb 	bl	8000288 <LCD_string_pos>
				LCD_string_pos(1, 10, "");
 80008d2:	4a2b      	ldr	r2, [pc, #172]	; (8000980 <LCD_stopwatch+0x1a4>)
 80008d4:	210a      	movs	r1, #10
 80008d6:	2001      	movs	r0, #1
 80008d8:	f7ff fcd6 	bl	8000288 <LCD_string_pos>
			}
			if(m < 10)
 80008dc:	7bbb      	ldrb	r3, [r7, #14]
 80008de:	2b09      	cmp	r3, #9
 80008e0:	d810      	bhi.n	8000904 <LCD_stopwatch+0x128>
			{
				LCD_string_pos(1, 8, mb);
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	461a      	mov	r2, r3
 80008e6:	2108      	movs	r1, #8
 80008e8:	2001      	movs	r0, #1
 80008ea:	f7ff fccd 	bl	8000288 <LCD_string_pos>
				LCD_string_pos(1, 7, "0");
 80008ee:	4a23      	ldr	r2, [pc, #140]	; (800097c <LCD_stopwatch+0x1a0>)
 80008f0:	2107      	movs	r1, #7
 80008f2:	2001      	movs	r0, #1
 80008f4:	f7ff fcc8 	bl	8000288 <LCD_string_pos>
				LCD_string_pos(1, 7, "");
 80008f8:	4a21      	ldr	r2, [pc, #132]	; (8000980 <LCD_stopwatch+0x1a4>)
 80008fa:	2107      	movs	r1, #7
 80008fc:	2001      	movs	r0, #1
 80008fe:	f7ff fcc3 	bl	8000288 <LCD_string_pos>
 8000902:	e00a      	b.n	800091a <LCD_stopwatch+0x13e>
			}
			else
			{
				LCD_string_pos(1, 7, mb);
 8000904:	1d3b      	adds	r3, r7, #4
 8000906:	461a      	mov	r2, r3
 8000908:	2107      	movs	r1, #7
 800090a:	2001      	movs	r0, #1
 800090c:	f7ff fcbc 	bl	8000288 <LCD_string_pos>
				LCD_string_pos(1, 7, "");
 8000910:	4a1b      	ldr	r2, [pc, #108]	; (8000980 <LCD_stopwatch+0x1a4>)
 8000912:	2107      	movs	r1, #7
 8000914:	2001      	movs	r0, #1
 8000916:	f7ff fcb7 	bl	8000288 <LCD_string_pos>
			}
			if(h < 10)
 800091a:	7bfb      	ldrb	r3, [r7, #15]
 800091c:	2b09      	cmp	r3, #9
 800091e:	d811      	bhi.n	8000944 <LCD_stopwatch+0x168>
			{
				LCD_string_pos(1, 5, hb);
 8000920:	f107 0308 	add.w	r3, r7, #8
 8000924:	461a      	mov	r2, r3
 8000926:	2105      	movs	r1, #5
 8000928:	2001      	movs	r0, #1
 800092a:	f7ff fcad 	bl	8000288 <LCD_string_pos>
				LCD_string_pos(1, 4, "0");
 800092e:	4a13      	ldr	r2, [pc, #76]	; (800097c <LCD_stopwatch+0x1a0>)
 8000930:	2104      	movs	r1, #4
 8000932:	2001      	movs	r0, #1
 8000934:	f7ff fca8 	bl	8000288 <LCD_string_pos>
				LCD_string_pos(1, 4, "");
 8000938:	4a11      	ldr	r2, [pc, #68]	; (8000980 <LCD_stopwatch+0x1a4>)
 800093a:	2104      	movs	r1, #4
 800093c:	2001      	movs	r0, #1
 800093e:	f7ff fca3 	bl	8000288 <LCD_string_pos>
 8000942:	e00b      	b.n	800095c <LCD_stopwatch+0x180>
			}
			else
			{
				LCD_string_pos(1, 4, hb);
 8000944:	f107 0308 	add.w	r3, r7, #8
 8000948:	461a      	mov	r2, r3
 800094a:	2104      	movs	r1, #4
 800094c:	2001      	movs	r0, #1
 800094e:	f7ff fc9b 	bl	8000288 <LCD_string_pos>
				LCD_string_pos(1, 4, "");
 8000952:	4a0b      	ldr	r2, [pc, #44]	; (8000980 <LCD_stopwatch+0x1a4>)
 8000954:	2104      	movs	r1, #4
 8000956:	2001      	movs	r0, #1
 8000958:	f7ff fc96 	bl	8000288 <LCD_string_pos>
		while(run)
 800095c:	7b3b      	ldrb	r3, [r7, #12]
 800095e:	2b00      	cmp	r3, #0
 8000960:	f47f af73 	bne.w	800084a <LCD_stopwatch+0x6e>
		if(HAL_GPIO_ReadPin(BTN_OK_GPIO_Port, BTN_OK_Pin))
 8000964:	e760      	b.n	8000828 <LCD_stopwatch+0x4c>
 8000966:	bf00      	nop
 8000968:	08002458 	.word	0x08002458
 800096c:	08002470 	.word	0x08002470
 8000970:	0800248c 	.word	0x0800248c
 8000974:	40010c00 	.word	0x40010c00
 8000978:	08002480 	.word	0x08002480
 800097c:	08002484 	.word	0x08002484
 8000980:	0800247c 	.word	0x0800247c

08000984 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000984:	b590      	push	{r4, r7, lr}
 8000986:	b087      	sub	sp, #28
 8000988:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800098a:	f000 f9e1 	bl	8000d50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800098e:	f000 f867 	bl	8000a60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000992:	f000 f8ab 	bl	8000aec <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  char *funcs[4] = {"> ", "Timer", "Stopwatch", "  "};
 8000996:	4b2f      	ldr	r3, [pc, #188]	; (8000a54 <main+0xd0>)
 8000998:	1d3c      	adds	r4, r7, #4
 800099a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800099c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  int selector_pos = 0;
 80009a0:	2300      	movs	r3, #0
 80009a2:	617b      	str	r3, [r7, #20]

  LCD_init();
 80009a4:	f7ff fc9e 	bl	80002e4 <LCD_init>
  LCD_string_pos(selector_pos, 0, funcs[0]);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	461a      	mov	r2, r3
 80009ac:	2100      	movs	r1, #0
 80009ae:	6978      	ldr	r0, [r7, #20]
 80009b0:	f7ff fc6a 	bl	8000288 <LCD_string_pos>
  LCD_string_pos(0, 2, funcs[1]);
 80009b4:	68bb      	ldr	r3, [r7, #8]
 80009b6:	461a      	mov	r2, r3
 80009b8:	2102      	movs	r1, #2
 80009ba:	2000      	movs	r0, #0
 80009bc:	f7ff fc64 	bl	8000288 <LCD_string_pos>
  LCD_string_pos(1, 2, funcs[2]);
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	461a      	mov	r2, r3
 80009c4:	2102      	movs	r1, #2
 80009c6:	2001      	movs	r0, #1
 80009c8:	f7ff fc5e 	bl	8000288 <LCD_string_pos>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(HAL_GPIO_ReadPin(BTN_SLCT_GPIO_Port, BTN_SLCT_Pin))
 80009cc:	2180      	movs	r1, #128	; 0x80
 80009ce:	4822      	ldr	r0, [pc, #136]	; (8000a58 <main+0xd4>)
 80009d0:	f000 fcac 	bl	800132c <HAL_GPIO_ReadPin>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d025      	beq.n	8000a26 <main+0xa2>
	  {
		  if(selector_pos == 0)
 80009da:	697b      	ldr	r3, [r7, #20]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d10e      	bne.n	80009fe <main+0x7a>
		  {
			  LCD_string_pos(selector_pos, 0, funcs[3]);
 80009e0:	693b      	ldr	r3, [r7, #16]
 80009e2:	461a      	mov	r2, r3
 80009e4:	2100      	movs	r1, #0
 80009e6:	6978      	ldr	r0, [r7, #20]
 80009e8:	f7ff fc4e 	bl	8000288 <LCD_string_pos>
			  selector_pos = 1;
 80009ec:	2301      	movs	r3, #1
 80009ee:	617b      	str	r3, [r7, #20]
			  LCD_string_pos(selector_pos, 0, funcs[0]);
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	461a      	mov	r2, r3
 80009f4:	2100      	movs	r1, #0
 80009f6:	6978      	ldr	r0, [r7, #20]
 80009f8:	f7ff fc46 	bl	8000288 <LCD_string_pos>
 80009fc:	e010      	b.n	8000a20 <main+0x9c>
		  }
		  else if(selector_pos == 1)
 80009fe:	697b      	ldr	r3, [r7, #20]
 8000a00:	2b01      	cmp	r3, #1
 8000a02:	d10d      	bne.n	8000a20 <main+0x9c>
		  {
			  LCD_string_pos(selector_pos, 0, funcs[3]);
 8000a04:	693b      	ldr	r3, [r7, #16]
 8000a06:	461a      	mov	r2, r3
 8000a08:	2100      	movs	r1, #0
 8000a0a:	6978      	ldr	r0, [r7, #20]
 8000a0c:	f7ff fc3c 	bl	8000288 <LCD_string_pos>
			  selector_pos = 0;
 8000a10:	2300      	movs	r3, #0
 8000a12:	617b      	str	r3, [r7, #20]
			  LCD_string_pos(selector_pos, 0, funcs[0]);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	461a      	mov	r2, r3
 8000a18:	2100      	movs	r1, #0
 8000a1a:	6978      	ldr	r0, [r7, #20]
 8000a1c:	f7ff fc34 	bl	8000288 <LCD_string_pos>
		  }
		  BTN_DELAY
 8000a20:	2064      	movs	r0, #100	; 0x64
 8000a22:	f000 f9f7 	bl	8000e14 <HAL_Delay>
	  }

	  if(HAL_GPIO_ReadPin(BTN_OK_GPIO_Port, BTN_OK_Pin))
 8000a26:	2101      	movs	r1, #1
 8000a28:	480c      	ldr	r0, [pc, #48]	; (8000a5c <main+0xd8>)
 8000a2a:	f000 fc7f 	bl	800132c <HAL_GPIO_ReadPin>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d0cb      	beq.n	80009cc <main+0x48>
	  {
		  if(selector_pos == 0)
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d102      	bne.n	8000a40 <main+0xbc>
		  {
			  LCD_timer();
 8000a3a:	f7ff fc75 	bl	8000328 <LCD_timer>
 8000a3e:	e004      	b.n	8000a4a <main+0xc6>
		  }
		  else if(selector_pos == 1)
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	2b01      	cmp	r3, #1
 8000a44:	d101      	bne.n	8000a4a <main+0xc6>
		  {
			  LCD_stopwatch();
 8000a46:	f7ff fec9 	bl	80007dc <LCD_stopwatch>
		  }
		  BTN_DELAY
 8000a4a:	2064      	movs	r0, #100	; 0x64
 8000a4c:	f000 f9e2 	bl	8000e14 <HAL_Delay>
	  if(HAL_GPIO_ReadPin(BTN_SLCT_GPIO_Port, BTN_SLCT_Pin))
 8000a50:	e7bc      	b.n	80009cc <main+0x48>
 8000a52:	bf00      	nop
 8000a54:	08002490 	.word	0x08002490
 8000a58:	40010800 	.word	0x40010800
 8000a5c:	40010c00 	.word	0x40010c00

08000a60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b090      	sub	sp, #64	; 0x40
 8000a64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a66:	f107 0318 	add.w	r3, r7, #24
 8000a6a:	2228      	movs	r2, #40	; 0x28
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f001 f89e 	bl	8001bb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a74:	1d3b      	adds	r3, r7, #4
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	605a      	str	r2, [r3, #4]
 8000a7c:	609a      	str	r2, [r3, #8]
 8000a7e:	60da      	str	r2, [r3, #12]
 8000a80:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a82:	2301      	movs	r3, #1
 8000a84:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a8a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a90:	2301      	movs	r3, #1
 8000a92:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a94:	2302      	movs	r3, #2
 8000a96:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a9c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000a9e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aa4:	f107 0318 	add.w	r3, r7, #24
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f000 fc6f 	bl	800138c <HAL_RCC_OscConfig>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000ab4:	f000 f88a 	bl	8000bcc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ab8:	230f      	movs	r3, #15
 8000aba:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000abc:	2302      	movs	r3, #2
 8000abe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ac4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ac8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aca:	2300      	movs	r3, #0
 8000acc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ace:	1d3b      	adds	r3, r7, #4
 8000ad0:	2102      	movs	r1, #2
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f000 feda 	bl	800188c <HAL_RCC_ClockConfig>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000ade:	f000 f875 	bl	8000bcc <Error_Handler>
  }
}
 8000ae2:	bf00      	nop
 8000ae4:	3740      	adds	r7, #64	; 0x40
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
	...

08000aec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b088      	sub	sp, #32
 8000af0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af2:	f107 0310 	add.w	r3, r7, #16
 8000af6:	2200      	movs	r2, #0
 8000af8:	601a      	str	r2, [r3, #0]
 8000afa:	605a      	str	r2, [r3, #4]
 8000afc:	609a      	str	r2, [r3, #8]
 8000afe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b00:	4b2f      	ldr	r3, [pc, #188]	; (8000bc0 <MX_GPIO_Init+0xd4>)
 8000b02:	699b      	ldr	r3, [r3, #24]
 8000b04:	4a2e      	ldr	r2, [pc, #184]	; (8000bc0 <MX_GPIO_Init+0xd4>)
 8000b06:	f043 0310 	orr.w	r3, r3, #16
 8000b0a:	6193      	str	r3, [r2, #24]
 8000b0c:	4b2c      	ldr	r3, [pc, #176]	; (8000bc0 <MX_GPIO_Init+0xd4>)
 8000b0e:	699b      	ldr	r3, [r3, #24]
 8000b10:	f003 0310 	and.w	r3, r3, #16
 8000b14:	60fb      	str	r3, [r7, #12]
 8000b16:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b18:	4b29      	ldr	r3, [pc, #164]	; (8000bc0 <MX_GPIO_Init+0xd4>)
 8000b1a:	699b      	ldr	r3, [r3, #24]
 8000b1c:	4a28      	ldr	r2, [pc, #160]	; (8000bc0 <MX_GPIO_Init+0xd4>)
 8000b1e:	f043 0320 	orr.w	r3, r3, #32
 8000b22:	6193      	str	r3, [r2, #24]
 8000b24:	4b26      	ldr	r3, [pc, #152]	; (8000bc0 <MX_GPIO_Init+0xd4>)
 8000b26:	699b      	ldr	r3, [r3, #24]
 8000b28:	f003 0320 	and.w	r3, r3, #32
 8000b2c:	60bb      	str	r3, [r7, #8]
 8000b2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b30:	4b23      	ldr	r3, [pc, #140]	; (8000bc0 <MX_GPIO_Init+0xd4>)
 8000b32:	699b      	ldr	r3, [r3, #24]
 8000b34:	4a22      	ldr	r2, [pc, #136]	; (8000bc0 <MX_GPIO_Init+0xd4>)
 8000b36:	f043 0304 	orr.w	r3, r3, #4
 8000b3a:	6193      	str	r3, [r2, #24]
 8000b3c:	4b20      	ldr	r3, [pc, #128]	; (8000bc0 <MX_GPIO_Init+0xd4>)
 8000b3e:	699b      	ldr	r3, [r3, #24]
 8000b40:	f003 0304 	and.w	r3, r3, #4
 8000b44:	607b      	str	r3, [r7, #4]
 8000b46:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b48:	4b1d      	ldr	r3, [pc, #116]	; (8000bc0 <MX_GPIO_Init+0xd4>)
 8000b4a:	699b      	ldr	r3, [r3, #24]
 8000b4c:	4a1c      	ldr	r2, [pc, #112]	; (8000bc0 <MX_GPIO_Init+0xd4>)
 8000b4e:	f043 0308 	orr.w	r3, r3, #8
 8000b52:	6193      	str	r3, [r2, #24]
 8000b54:	4b1a      	ldr	r3, [pc, #104]	; (8000bc0 <MX_GPIO_Init+0xd4>)
 8000b56:	699b      	ldr	r3, [r3, #24]
 8000b58:	f003 0308 	and.w	r3, r3, #8
 8000b5c:	603b      	str	r3, [r7, #0]
 8000b5e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8000b60:	2200      	movs	r2, #0
 8000b62:	217f      	movs	r1, #127	; 0x7f
 8000b64:	4817      	ldr	r0, [pc, #92]	; (8000bc4 <MX_GPIO_Init+0xd8>)
 8000b66:	f000 fbf8 	bl	800135a <HAL_GPIO_WritePin>
                          |RS_Pin|RW_Pin|EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           RS_Pin RW_Pin EN_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8000b6a:	237f      	movs	r3, #127	; 0x7f
 8000b6c:	613b      	str	r3, [r7, #16]
                          |RS_Pin|RW_Pin|EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b72:	2300      	movs	r3, #0
 8000b74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b76:	2302      	movs	r3, #2
 8000b78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7a:	f107 0310 	add.w	r3, r7, #16
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4810      	ldr	r0, [pc, #64]	; (8000bc4 <MX_GPIO_Init+0xd8>)
 8000b82:	f000 fa4f 	bl	8001024 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_SLCT_Pin */
  GPIO_InitStruct.Pin = BTN_SLCT_Pin;
 8000b86:	2380      	movs	r3, #128	; 0x80
 8000b88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BTN_SLCT_GPIO_Port, &GPIO_InitStruct);
 8000b92:	f107 0310 	add.w	r3, r7, #16
 8000b96:	4619      	mov	r1, r3
 8000b98:	480a      	ldr	r0, [pc, #40]	; (8000bc4 <MX_GPIO_Init+0xd8>)
 8000b9a:	f000 fa43 	bl	8001024 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_OK_Pin BTN_UP_Pin BTN_DN_Pin */
  GPIO_InitStruct.Pin = BTN_OK_Pin|BTN_UP_Pin|BTN_DN_Pin;
 8000b9e:	f240 4303 	movw	r3, #1027	; 0x403
 8000ba2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bac:	f107 0310 	add.w	r3, r7, #16
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4805      	ldr	r0, [pc, #20]	; (8000bc8 <MX_GPIO_Init+0xdc>)
 8000bb4:	f000 fa36 	bl	8001024 <HAL_GPIO_Init>

}
 8000bb8:	bf00      	nop
 8000bba:	3720      	adds	r7, #32
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	40021000 	.word	0x40021000
 8000bc4:	40010800 	.word	0x40010800
 8000bc8:	40010c00 	.word	0x40010c00

08000bcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd0:	b672      	cpsid	i
}
 8000bd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bd4:	e7fe      	b.n	8000bd4 <Error_Handler+0x8>
	...

08000bd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b085      	sub	sp, #20
 8000bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000bde:	4b15      	ldr	r3, [pc, #84]	; (8000c34 <HAL_MspInit+0x5c>)
 8000be0:	699b      	ldr	r3, [r3, #24]
 8000be2:	4a14      	ldr	r2, [pc, #80]	; (8000c34 <HAL_MspInit+0x5c>)
 8000be4:	f043 0301 	orr.w	r3, r3, #1
 8000be8:	6193      	str	r3, [r2, #24]
 8000bea:	4b12      	ldr	r3, [pc, #72]	; (8000c34 <HAL_MspInit+0x5c>)
 8000bec:	699b      	ldr	r3, [r3, #24]
 8000bee:	f003 0301 	and.w	r3, r3, #1
 8000bf2:	60bb      	str	r3, [r7, #8]
 8000bf4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bf6:	4b0f      	ldr	r3, [pc, #60]	; (8000c34 <HAL_MspInit+0x5c>)
 8000bf8:	69db      	ldr	r3, [r3, #28]
 8000bfa:	4a0e      	ldr	r2, [pc, #56]	; (8000c34 <HAL_MspInit+0x5c>)
 8000bfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c00:	61d3      	str	r3, [r2, #28]
 8000c02:	4b0c      	ldr	r3, [pc, #48]	; (8000c34 <HAL_MspInit+0x5c>)
 8000c04:	69db      	ldr	r3, [r3, #28]
 8000c06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c0a:	607b      	str	r3, [r7, #4]
 8000c0c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c0e:	4b0a      	ldr	r3, [pc, #40]	; (8000c38 <HAL_MspInit+0x60>)
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	60fb      	str	r3, [r7, #12]
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	4a04      	ldr	r2, [pc, #16]	; (8000c38 <HAL_MspInit+0x60>)
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	3714      	adds	r7, #20
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bc80      	pop	{r7}
 8000c32:	4770      	bx	lr
 8000c34:	40021000 	.word	0x40021000
 8000c38:	40010000 	.word	0x40010000

08000c3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c40:	e7fe      	b.n	8000c40 <NMI_Handler+0x4>

08000c42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c42:	b480      	push	{r7}
 8000c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c46:	e7fe      	b.n	8000c46 <HardFault_Handler+0x4>

08000c48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c4c:	e7fe      	b.n	8000c4c <MemManage_Handler+0x4>

08000c4e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c52:	e7fe      	b.n	8000c52 <BusFault_Handler+0x4>

08000c54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c58:	e7fe      	b.n	8000c58 <UsageFault_Handler+0x4>

08000c5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bc80      	pop	{r7}
 8000c64:	4770      	bx	lr

08000c66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bc80      	pop	{r7}
 8000c70:	4770      	bx	lr

08000c72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c72:	b480      	push	{r7}
 8000c74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c76:	bf00      	nop
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bc80      	pop	{r7}
 8000c7c:	4770      	bx	lr

08000c7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c82:	f000 f8ab 	bl	8000ddc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
	...

08000c8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b086      	sub	sp, #24
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c94:	4a14      	ldr	r2, [pc, #80]	; (8000ce8 <_sbrk+0x5c>)
 8000c96:	4b15      	ldr	r3, [pc, #84]	; (8000cec <_sbrk+0x60>)
 8000c98:	1ad3      	subs	r3, r2, r3
 8000c9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ca0:	4b13      	ldr	r3, [pc, #76]	; (8000cf0 <_sbrk+0x64>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d102      	bne.n	8000cae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ca8:	4b11      	ldr	r3, [pc, #68]	; (8000cf0 <_sbrk+0x64>)
 8000caa:	4a12      	ldr	r2, [pc, #72]	; (8000cf4 <_sbrk+0x68>)
 8000cac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cae:	4b10      	ldr	r3, [pc, #64]	; (8000cf0 <_sbrk+0x64>)
 8000cb0:	681a      	ldr	r2, [r3, #0]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4413      	add	r3, r2
 8000cb6:	693a      	ldr	r2, [r7, #16]
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	d207      	bcs.n	8000ccc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cbc:	f000 ff4e 	bl	8001b5c <__errno>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	220c      	movs	r2, #12
 8000cc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000cca:	e009      	b.n	8000ce0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ccc:	4b08      	ldr	r3, [pc, #32]	; (8000cf0 <_sbrk+0x64>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cd2:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <_sbrk+0x64>)
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4413      	add	r3, r2
 8000cda:	4a05      	ldr	r2, [pc, #20]	; (8000cf0 <_sbrk+0x64>)
 8000cdc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cde:	68fb      	ldr	r3, [r7, #12]
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	3718      	adds	r7, #24
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	20005000 	.word	0x20005000
 8000cec:	00000400 	.word	0x00000400
 8000cf0:	2000008c 	.word	0x2000008c
 8000cf4:	200000b0 	.word	0x200000b0

08000cf8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bc80      	pop	{r7}
 8000d02:	4770      	bx	lr

08000d04 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d04:	480c      	ldr	r0, [pc, #48]	; (8000d38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d06:	490d      	ldr	r1, [pc, #52]	; (8000d3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d08:	4a0d      	ldr	r2, [pc, #52]	; (8000d40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d0c:	e002      	b.n	8000d14 <LoopCopyDataInit>

08000d0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d12:	3304      	adds	r3, #4

08000d14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d18:	d3f9      	bcc.n	8000d0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d1a:	4a0a      	ldr	r2, [pc, #40]	; (8000d44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d1c:	4c0a      	ldr	r4, [pc, #40]	; (8000d48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d20:	e001      	b.n	8000d26 <LoopFillZerobss>

08000d22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d24:	3204      	adds	r2, #4

08000d26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d28:	d3fb      	bcc.n	8000d22 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d2a:	f7ff ffe5 	bl	8000cf8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d2e:	f000 ff1b 	bl	8001b68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d32:	f7ff fe27 	bl	8000984 <main>
  bx lr
 8000d36:	4770      	bx	lr
  ldr r0, =_sdata
 8000d38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d3c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d40:	080024fc 	.word	0x080024fc
  ldr r2, =_sbss
 8000d44:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d48:	200000ac 	.word	0x200000ac

08000d4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d4c:	e7fe      	b.n	8000d4c <ADC1_2_IRQHandler>
	...

08000d50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d54:	4b08      	ldr	r3, [pc, #32]	; (8000d78 <HAL_Init+0x28>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a07      	ldr	r2, [pc, #28]	; (8000d78 <HAL_Init+0x28>)
 8000d5a:	f043 0310 	orr.w	r3, r3, #16
 8000d5e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d60:	2003      	movs	r0, #3
 8000d62:	f000 f92b 	bl	8000fbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d66:	200f      	movs	r0, #15
 8000d68:	f000 f808 	bl	8000d7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d6c:	f7ff ff34 	bl	8000bd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d70:	2300      	movs	r3, #0
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40022000 	.word	0x40022000

08000d7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d84:	4b12      	ldr	r3, [pc, #72]	; (8000dd0 <HAL_InitTick+0x54>)
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	4b12      	ldr	r3, [pc, #72]	; (8000dd4 <HAL_InitTick+0x58>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f000 f935 	bl	800100a <HAL_SYSTICK_Config>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000da6:	2301      	movs	r3, #1
 8000da8:	e00e      	b.n	8000dc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2b0f      	cmp	r3, #15
 8000dae:	d80a      	bhi.n	8000dc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000db0:	2200      	movs	r2, #0
 8000db2:	6879      	ldr	r1, [r7, #4]
 8000db4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000db8:	f000 f90b 	bl	8000fd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dbc:	4a06      	ldr	r2, [pc, #24]	; (8000dd8 <HAL_InitTick+0x5c>)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e000      	b.n	8000dc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dc6:	2301      	movs	r3, #1
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3708      	adds	r7, #8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	20000000 	.word	0x20000000
 8000dd4:	20000008 	.word	0x20000008
 8000dd8:	20000004 	.word	0x20000004

08000ddc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000de0:	4b05      	ldr	r3, [pc, #20]	; (8000df8 <HAL_IncTick+0x1c>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	461a      	mov	r2, r3
 8000de6:	4b05      	ldr	r3, [pc, #20]	; (8000dfc <HAL_IncTick+0x20>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4413      	add	r3, r2
 8000dec:	4a03      	ldr	r2, [pc, #12]	; (8000dfc <HAL_IncTick+0x20>)
 8000dee:	6013      	str	r3, [r2, #0]
}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bc80      	pop	{r7}
 8000df6:	4770      	bx	lr
 8000df8:	20000008 	.word	0x20000008
 8000dfc:	20000098 	.word	0x20000098

08000e00 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  return uwTick;
 8000e04:	4b02      	ldr	r3, [pc, #8]	; (8000e10 <HAL_GetTick+0x10>)
 8000e06:	681b      	ldr	r3, [r3, #0]
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bc80      	pop	{r7}
 8000e0e:	4770      	bx	lr
 8000e10:	20000098 	.word	0x20000098

08000e14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e1c:	f7ff fff0 	bl	8000e00 <HAL_GetTick>
 8000e20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e2c:	d005      	beq.n	8000e3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e2e:	4b0a      	ldr	r3, [pc, #40]	; (8000e58 <HAL_Delay+0x44>)
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	461a      	mov	r2, r3
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	4413      	add	r3, r2
 8000e38:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e3a:	bf00      	nop
 8000e3c:	f7ff ffe0 	bl	8000e00 <HAL_GetTick>
 8000e40:	4602      	mov	r2, r0
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	1ad3      	subs	r3, r2, r3
 8000e46:	68fa      	ldr	r2, [r7, #12]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d8f7      	bhi.n	8000e3c <HAL_Delay+0x28>
  {
  }
}
 8000e4c:	bf00      	nop
 8000e4e:	bf00      	nop
 8000e50:	3710      	adds	r7, #16
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	20000008 	.word	0x20000008

08000e5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b085      	sub	sp, #20
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	f003 0307 	and.w	r3, r3, #7
 8000e6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ea0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e72:	68ba      	ldr	r2, [r7, #8]
 8000e74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e78:	4013      	ands	r3, r2
 8000e7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e8e:	4a04      	ldr	r2, [pc, #16]	; (8000ea0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	60d3      	str	r3, [r2, #12]
}
 8000e94:	bf00      	nop
 8000e96:	3714      	adds	r7, #20
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bc80      	pop	{r7}
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	e000ed00 	.word	0xe000ed00

08000ea4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ea8:	4b04      	ldr	r3, [pc, #16]	; (8000ebc <__NVIC_GetPriorityGrouping+0x18>)
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	0a1b      	lsrs	r3, r3, #8
 8000eae:	f003 0307 	and.w	r3, r3, #7
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bc80      	pop	{r7}
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	e000ed00 	.word	0xe000ed00

08000ec0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	6039      	str	r1, [r7, #0]
 8000eca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	db0a      	blt.n	8000eea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	b2da      	uxtb	r2, r3
 8000ed8:	490c      	ldr	r1, [pc, #48]	; (8000f0c <__NVIC_SetPriority+0x4c>)
 8000eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ede:	0112      	lsls	r2, r2, #4
 8000ee0:	b2d2      	uxtb	r2, r2
 8000ee2:	440b      	add	r3, r1
 8000ee4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ee8:	e00a      	b.n	8000f00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	b2da      	uxtb	r2, r3
 8000eee:	4908      	ldr	r1, [pc, #32]	; (8000f10 <__NVIC_SetPriority+0x50>)
 8000ef0:	79fb      	ldrb	r3, [r7, #7]
 8000ef2:	f003 030f 	and.w	r3, r3, #15
 8000ef6:	3b04      	subs	r3, #4
 8000ef8:	0112      	lsls	r2, r2, #4
 8000efa:	b2d2      	uxtb	r2, r2
 8000efc:	440b      	add	r3, r1
 8000efe:	761a      	strb	r2, [r3, #24]
}
 8000f00:	bf00      	nop
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bc80      	pop	{r7}
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	e000e100 	.word	0xe000e100
 8000f10:	e000ed00 	.word	0xe000ed00

08000f14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b089      	sub	sp, #36	; 0x24
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	60f8      	str	r0, [r7, #12]
 8000f1c:	60b9      	str	r1, [r7, #8]
 8000f1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	f003 0307 	and.w	r3, r3, #7
 8000f26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	f1c3 0307 	rsb	r3, r3, #7
 8000f2e:	2b04      	cmp	r3, #4
 8000f30:	bf28      	it	cs
 8000f32:	2304      	movcs	r3, #4
 8000f34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	3304      	adds	r3, #4
 8000f3a:	2b06      	cmp	r3, #6
 8000f3c:	d902      	bls.n	8000f44 <NVIC_EncodePriority+0x30>
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	3b03      	subs	r3, #3
 8000f42:	e000      	b.n	8000f46 <NVIC_EncodePriority+0x32>
 8000f44:	2300      	movs	r3, #0
 8000f46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f4c:	69bb      	ldr	r3, [r7, #24]
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	43da      	mvns	r2, r3
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	401a      	ands	r2, r3
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f5c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	fa01 f303 	lsl.w	r3, r1, r3
 8000f66:	43d9      	mvns	r1, r3
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f6c:	4313      	orrs	r3, r2
         );
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3724      	adds	r7, #36	; 0x24
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bc80      	pop	{r7}
 8000f76:	4770      	bx	lr

08000f78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	3b01      	subs	r3, #1
 8000f84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f88:	d301      	bcc.n	8000f8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e00f      	b.n	8000fae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f8e:	4a0a      	ldr	r2, [pc, #40]	; (8000fb8 <SysTick_Config+0x40>)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	3b01      	subs	r3, #1
 8000f94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f96:	210f      	movs	r1, #15
 8000f98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f9c:	f7ff ff90 	bl	8000ec0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fa0:	4b05      	ldr	r3, [pc, #20]	; (8000fb8 <SysTick_Config+0x40>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fa6:	4b04      	ldr	r3, [pc, #16]	; (8000fb8 <SysTick_Config+0x40>)
 8000fa8:	2207      	movs	r2, #7
 8000faa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fac:	2300      	movs	r3, #0
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	e000e010 	.word	0xe000e010

08000fbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	f7ff ff49 	bl	8000e5c <__NVIC_SetPriorityGrouping>
}
 8000fca:	bf00      	nop
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b086      	sub	sp, #24
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	4603      	mov	r3, r0
 8000fda:	60b9      	str	r1, [r7, #8]
 8000fdc:	607a      	str	r2, [r7, #4]
 8000fde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fe4:	f7ff ff5e 	bl	8000ea4 <__NVIC_GetPriorityGrouping>
 8000fe8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fea:	687a      	ldr	r2, [r7, #4]
 8000fec:	68b9      	ldr	r1, [r7, #8]
 8000fee:	6978      	ldr	r0, [r7, #20]
 8000ff0:	f7ff ff90 	bl	8000f14 <NVIC_EncodePriority>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ffa:	4611      	mov	r1, r2
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff ff5f 	bl	8000ec0 <__NVIC_SetPriority>
}
 8001002:	bf00      	nop
 8001004:	3718      	adds	r7, #24
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800100a:	b580      	push	{r7, lr}
 800100c:	b082      	sub	sp, #8
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f7ff ffb0 	bl	8000f78 <SysTick_Config>
 8001018:	4603      	mov	r3, r0
}
 800101a:	4618      	mov	r0, r3
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
	...

08001024 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001024:	b480      	push	{r7}
 8001026:	b08b      	sub	sp, #44	; 0x2c
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800102e:	2300      	movs	r3, #0
 8001030:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001032:	2300      	movs	r3, #0
 8001034:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001036:	e169      	b.n	800130c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001038:	2201      	movs	r2, #1
 800103a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	69fa      	ldr	r2, [r7, #28]
 8001048:	4013      	ands	r3, r2
 800104a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	429a      	cmp	r2, r3
 8001052:	f040 8158 	bne.w	8001306 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	4a9a      	ldr	r2, [pc, #616]	; (80012c4 <HAL_GPIO_Init+0x2a0>)
 800105c:	4293      	cmp	r3, r2
 800105e:	d05e      	beq.n	800111e <HAL_GPIO_Init+0xfa>
 8001060:	4a98      	ldr	r2, [pc, #608]	; (80012c4 <HAL_GPIO_Init+0x2a0>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d875      	bhi.n	8001152 <HAL_GPIO_Init+0x12e>
 8001066:	4a98      	ldr	r2, [pc, #608]	; (80012c8 <HAL_GPIO_Init+0x2a4>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d058      	beq.n	800111e <HAL_GPIO_Init+0xfa>
 800106c:	4a96      	ldr	r2, [pc, #600]	; (80012c8 <HAL_GPIO_Init+0x2a4>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d86f      	bhi.n	8001152 <HAL_GPIO_Init+0x12e>
 8001072:	4a96      	ldr	r2, [pc, #600]	; (80012cc <HAL_GPIO_Init+0x2a8>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d052      	beq.n	800111e <HAL_GPIO_Init+0xfa>
 8001078:	4a94      	ldr	r2, [pc, #592]	; (80012cc <HAL_GPIO_Init+0x2a8>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d869      	bhi.n	8001152 <HAL_GPIO_Init+0x12e>
 800107e:	4a94      	ldr	r2, [pc, #592]	; (80012d0 <HAL_GPIO_Init+0x2ac>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d04c      	beq.n	800111e <HAL_GPIO_Init+0xfa>
 8001084:	4a92      	ldr	r2, [pc, #584]	; (80012d0 <HAL_GPIO_Init+0x2ac>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d863      	bhi.n	8001152 <HAL_GPIO_Init+0x12e>
 800108a:	4a92      	ldr	r2, [pc, #584]	; (80012d4 <HAL_GPIO_Init+0x2b0>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d046      	beq.n	800111e <HAL_GPIO_Init+0xfa>
 8001090:	4a90      	ldr	r2, [pc, #576]	; (80012d4 <HAL_GPIO_Init+0x2b0>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d85d      	bhi.n	8001152 <HAL_GPIO_Init+0x12e>
 8001096:	2b12      	cmp	r3, #18
 8001098:	d82a      	bhi.n	80010f0 <HAL_GPIO_Init+0xcc>
 800109a:	2b12      	cmp	r3, #18
 800109c:	d859      	bhi.n	8001152 <HAL_GPIO_Init+0x12e>
 800109e:	a201      	add	r2, pc, #4	; (adr r2, 80010a4 <HAL_GPIO_Init+0x80>)
 80010a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010a4:	0800111f 	.word	0x0800111f
 80010a8:	080010f9 	.word	0x080010f9
 80010ac:	0800110b 	.word	0x0800110b
 80010b0:	0800114d 	.word	0x0800114d
 80010b4:	08001153 	.word	0x08001153
 80010b8:	08001153 	.word	0x08001153
 80010bc:	08001153 	.word	0x08001153
 80010c0:	08001153 	.word	0x08001153
 80010c4:	08001153 	.word	0x08001153
 80010c8:	08001153 	.word	0x08001153
 80010cc:	08001153 	.word	0x08001153
 80010d0:	08001153 	.word	0x08001153
 80010d4:	08001153 	.word	0x08001153
 80010d8:	08001153 	.word	0x08001153
 80010dc:	08001153 	.word	0x08001153
 80010e0:	08001153 	.word	0x08001153
 80010e4:	08001153 	.word	0x08001153
 80010e8:	08001101 	.word	0x08001101
 80010ec:	08001115 	.word	0x08001115
 80010f0:	4a79      	ldr	r2, [pc, #484]	; (80012d8 <HAL_GPIO_Init+0x2b4>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d013      	beq.n	800111e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80010f6:	e02c      	b.n	8001152 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	623b      	str	r3, [r7, #32]
          break;
 80010fe:	e029      	b.n	8001154 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	3304      	adds	r3, #4
 8001106:	623b      	str	r3, [r7, #32]
          break;
 8001108:	e024      	b.n	8001154 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	68db      	ldr	r3, [r3, #12]
 800110e:	3308      	adds	r3, #8
 8001110:	623b      	str	r3, [r7, #32]
          break;
 8001112:	e01f      	b.n	8001154 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	330c      	adds	r3, #12
 800111a:	623b      	str	r3, [r7, #32]
          break;
 800111c:	e01a      	b.n	8001154 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	689b      	ldr	r3, [r3, #8]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d102      	bne.n	800112c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001126:	2304      	movs	r3, #4
 8001128:	623b      	str	r3, [r7, #32]
          break;
 800112a:	e013      	b.n	8001154 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	2b01      	cmp	r3, #1
 8001132:	d105      	bne.n	8001140 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001134:	2308      	movs	r3, #8
 8001136:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	69fa      	ldr	r2, [r7, #28]
 800113c:	611a      	str	r2, [r3, #16]
          break;
 800113e:	e009      	b.n	8001154 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001140:	2308      	movs	r3, #8
 8001142:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	69fa      	ldr	r2, [r7, #28]
 8001148:	615a      	str	r2, [r3, #20]
          break;
 800114a:	e003      	b.n	8001154 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800114c:	2300      	movs	r3, #0
 800114e:	623b      	str	r3, [r7, #32]
          break;
 8001150:	e000      	b.n	8001154 <HAL_GPIO_Init+0x130>
          break;
 8001152:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001154:	69bb      	ldr	r3, [r7, #24]
 8001156:	2bff      	cmp	r3, #255	; 0xff
 8001158:	d801      	bhi.n	800115e <HAL_GPIO_Init+0x13a>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	e001      	b.n	8001162 <HAL_GPIO_Init+0x13e>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	3304      	adds	r3, #4
 8001162:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001164:	69bb      	ldr	r3, [r7, #24]
 8001166:	2bff      	cmp	r3, #255	; 0xff
 8001168:	d802      	bhi.n	8001170 <HAL_GPIO_Init+0x14c>
 800116a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	e002      	b.n	8001176 <HAL_GPIO_Init+0x152>
 8001170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001172:	3b08      	subs	r3, #8
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	210f      	movs	r1, #15
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	fa01 f303 	lsl.w	r3, r1, r3
 8001184:	43db      	mvns	r3, r3
 8001186:	401a      	ands	r2, r3
 8001188:	6a39      	ldr	r1, [r7, #32]
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	fa01 f303 	lsl.w	r3, r1, r3
 8001190:	431a      	orrs	r2, r3
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	f000 80b1 	beq.w	8001306 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80011a4:	4b4d      	ldr	r3, [pc, #308]	; (80012dc <HAL_GPIO_Init+0x2b8>)
 80011a6:	699b      	ldr	r3, [r3, #24]
 80011a8:	4a4c      	ldr	r2, [pc, #304]	; (80012dc <HAL_GPIO_Init+0x2b8>)
 80011aa:	f043 0301 	orr.w	r3, r3, #1
 80011ae:	6193      	str	r3, [r2, #24]
 80011b0:	4b4a      	ldr	r3, [pc, #296]	; (80012dc <HAL_GPIO_Init+0x2b8>)
 80011b2:	699b      	ldr	r3, [r3, #24]
 80011b4:	f003 0301 	and.w	r3, r3, #1
 80011b8:	60bb      	str	r3, [r7, #8]
 80011ba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80011bc:	4a48      	ldr	r2, [pc, #288]	; (80012e0 <HAL_GPIO_Init+0x2bc>)
 80011be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c0:	089b      	lsrs	r3, r3, #2
 80011c2:	3302      	adds	r3, #2
 80011c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011c8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80011ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011cc:	f003 0303 	and.w	r3, r3, #3
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	220f      	movs	r2, #15
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	43db      	mvns	r3, r3
 80011da:	68fa      	ldr	r2, [r7, #12]
 80011dc:	4013      	ands	r3, r2
 80011de:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	4a40      	ldr	r2, [pc, #256]	; (80012e4 <HAL_GPIO_Init+0x2c0>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d013      	beq.n	8001210 <HAL_GPIO_Init+0x1ec>
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	4a3f      	ldr	r2, [pc, #252]	; (80012e8 <HAL_GPIO_Init+0x2c4>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d00d      	beq.n	800120c <HAL_GPIO_Init+0x1e8>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	4a3e      	ldr	r2, [pc, #248]	; (80012ec <HAL_GPIO_Init+0x2c8>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d007      	beq.n	8001208 <HAL_GPIO_Init+0x1e4>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	4a3d      	ldr	r2, [pc, #244]	; (80012f0 <HAL_GPIO_Init+0x2cc>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d101      	bne.n	8001204 <HAL_GPIO_Init+0x1e0>
 8001200:	2303      	movs	r3, #3
 8001202:	e006      	b.n	8001212 <HAL_GPIO_Init+0x1ee>
 8001204:	2304      	movs	r3, #4
 8001206:	e004      	b.n	8001212 <HAL_GPIO_Init+0x1ee>
 8001208:	2302      	movs	r3, #2
 800120a:	e002      	b.n	8001212 <HAL_GPIO_Init+0x1ee>
 800120c:	2301      	movs	r3, #1
 800120e:	e000      	b.n	8001212 <HAL_GPIO_Init+0x1ee>
 8001210:	2300      	movs	r3, #0
 8001212:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001214:	f002 0203 	and.w	r2, r2, #3
 8001218:	0092      	lsls	r2, r2, #2
 800121a:	4093      	lsls	r3, r2
 800121c:	68fa      	ldr	r2, [r7, #12]
 800121e:	4313      	orrs	r3, r2
 8001220:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001222:	492f      	ldr	r1, [pc, #188]	; (80012e0 <HAL_GPIO_Init+0x2bc>)
 8001224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001226:	089b      	lsrs	r3, r3, #2
 8001228:	3302      	adds	r3, #2
 800122a:	68fa      	ldr	r2, [r7, #12]
 800122c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001238:	2b00      	cmp	r3, #0
 800123a:	d006      	beq.n	800124a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800123c:	4b2d      	ldr	r3, [pc, #180]	; (80012f4 <HAL_GPIO_Init+0x2d0>)
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	492c      	ldr	r1, [pc, #176]	; (80012f4 <HAL_GPIO_Init+0x2d0>)
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	4313      	orrs	r3, r2
 8001246:	600b      	str	r3, [r1, #0]
 8001248:	e006      	b.n	8001258 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800124a:	4b2a      	ldr	r3, [pc, #168]	; (80012f4 <HAL_GPIO_Init+0x2d0>)
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	43db      	mvns	r3, r3
 8001252:	4928      	ldr	r1, [pc, #160]	; (80012f4 <HAL_GPIO_Init+0x2d0>)
 8001254:	4013      	ands	r3, r2
 8001256:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001260:	2b00      	cmp	r3, #0
 8001262:	d006      	beq.n	8001272 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001264:	4b23      	ldr	r3, [pc, #140]	; (80012f4 <HAL_GPIO_Init+0x2d0>)
 8001266:	685a      	ldr	r2, [r3, #4]
 8001268:	4922      	ldr	r1, [pc, #136]	; (80012f4 <HAL_GPIO_Init+0x2d0>)
 800126a:	69bb      	ldr	r3, [r7, #24]
 800126c:	4313      	orrs	r3, r2
 800126e:	604b      	str	r3, [r1, #4]
 8001270:	e006      	b.n	8001280 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001272:	4b20      	ldr	r3, [pc, #128]	; (80012f4 <HAL_GPIO_Init+0x2d0>)
 8001274:	685a      	ldr	r2, [r3, #4]
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	43db      	mvns	r3, r3
 800127a:	491e      	ldr	r1, [pc, #120]	; (80012f4 <HAL_GPIO_Init+0x2d0>)
 800127c:	4013      	ands	r3, r2
 800127e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001288:	2b00      	cmp	r3, #0
 800128a:	d006      	beq.n	800129a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800128c:	4b19      	ldr	r3, [pc, #100]	; (80012f4 <HAL_GPIO_Init+0x2d0>)
 800128e:	689a      	ldr	r2, [r3, #8]
 8001290:	4918      	ldr	r1, [pc, #96]	; (80012f4 <HAL_GPIO_Init+0x2d0>)
 8001292:	69bb      	ldr	r3, [r7, #24]
 8001294:	4313      	orrs	r3, r2
 8001296:	608b      	str	r3, [r1, #8]
 8001298:	e006      	b.n	80012a8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800129a:	4b16      	ldr	r3, [pc, #88]	; (80012f4 <HAL_GPIO_Init+0x2d0>)
 800129c:	689a      	ldr	r2, [r3, #8]
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	43db      	mvns	r3, r3
 80012a2:	4914      	ldr	r1, [pc, #80]	; (80012f4 <HAL_GPIO_Init+0x2d0>)
 80012a4:	4013      	ands	r3, r2
 80012a6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d021      	beq.n	80012f8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80012b4:	4b0f      	ldr	r3, [pc, #60]	; (80012f4 <HAL_GPIO_Init+0x2d0>)
 80012b6:	68da      	ldr	r2, [r3, #12]
 80012b8:	490e      	ldr	r1, [pc, #56]	; (80012f4 <HAL_GPIO_Init+0x2d0>)
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	4313      	orrs	r3, r2
 80012be:	60cb      	str	r3, [r1, #12]
 80012c0:	e021      	b.n	8001306 <HAL_GPIO_Init+0x2e2>
 80012c2:	bf00      	nop
 80012c4:	10320000 	.word	0x10320000
 80012c8:	10310000 	.word	0x10310000
 80012cc:	10220000 	.word	0x10220000
 80012d0:	10210000 	.word	0x10210000
 80012d4:	10120000 	.word	0x10120000
 80012d8:	10110000 	.word	0x10110000
 80012dc:	40021000 	.word	0x40021000
 80012e0:	40010000 	.word	0x40010000
 80012e4:	40010800 	.word	0x40010800
 80012e8:	40010c00 	.word	0x40010c00
 80012ec:	40011000 	.word	0x40011000
 80012f0:	40011400 	.word	0x40011400
 80012f4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80012f8:	4b0b      	ldr	r3, [pc, #44]	; (8001328 <HAL_GPIO_Init+0x304>)
 80012fa:	68da      	ldr	r2, [r3, #12]
 80012fc:	69bb      	ldr	r3, [r7, #24]
 80012fe:	43db      	mvns	r3, r3
 8001300:	4909      	ldr	r1, [pc, #36]	; (8001328 <HAL_GPIO_Init+0x304>)
 8001302:	4013      	ands	r3, r2
 8001304:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001308:	3301      	adds	r3, #1
 800130a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001312:	fa22 f303 	lsr.w	r3, r2, r3
 8001316:	2b00      	cmp	r3, #0
 8001318:	f47f ae8e 	bne.w	8001038 <HAL_GPIO_Init+0x14>
  }
}
 800131c:	bf00      	nop
 800131e:	bf00      	nop
 8001320:	372c      	adds	r7, #44	; 0x2c
 8001322:	46bd      	mov	sp, r7
 8001324:	bc80      	pop	{r7}
 8001326:	4770      	bx	lr
 8001328:	40010400 	.word	0x40010400

0800132c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800132c:	b480      	push	{r7}
 800132e:	b085      	sub	sp, #20
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	460b      	mov	r3, r1
 8001336:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	689a      	ldr	r2, [r3, #8]
 800133c:	887b      	ldrh	r3, [r7, #2]
 800133e:	4013      	ands	r3, r2
 8001340:	2b00      	cmp	r3, #0
 8001342:	d002      	beq.n	800134a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001344:	2301      	movs	r3, #1
 8001346:	73fb      	strb	r3, [r7, #15]
 8001348:	e001      	b.n	800134e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800134a:	2300      	movs	r3, #0
 800134c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800134e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001350:	4618      	mov	r0, r3
 8001352:	3714      	adds	r7, #20
 8001354:	46bd      	mov	sp, r7
 8001356:	bc80      	pop	{r7}
 8001358:	4770      	bx	lr

0800135a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800135a:	b480      	push	{r7}
 800135c:	b083      	sub	sp, #12
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
 8001362:	460b      	mov	r3, r1
 8001364:	807b      	strh	r3, [r7, #2]
 8001366:	4613      	mov	r3, r2
 8001368:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800136a:	787b      	ldrb	r3, [r7, #1]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d003      	beq.n	8001378 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001370:	887a      	ldrh	r2, [r7, #2]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001376:	e003      	b.n	8001380 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001378:	887b      	ldrh	r3, [r7, #2]
 800137a:	041a      	lsls	r2, r3, #16
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	611a      	str	r2, [r3, #16]
}
 8001380:	bf00      	nop
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	bc80      	pop	{r7}
 8001388:	4770      	bx	lr
	...

0800138c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b086      	sub	sp, #24
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d101      	bne.n	800139e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e26c      	b.n	8001878 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f003 0301 	and.w	r3, r3, #1
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	f000 8087 	beq.w	80014ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80013ac:	4b92      	ldr	r3, [pc, #584]	; (80015f8 <HAL_RCC_OscConfig+0x26c>)
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f003 030c 	and.w	r3, r3, #12
 80013b4:	2b04      	cmp	r3, #4
 80013b6:	d00c      	beq.n	80013d2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013b8:	4b8f      	ldr	r3, [pc, #572]	; (80015f8 <HAL_RCC_OscConfig+0x26c>)
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f003 030c 	and.w	r3, r3, #12
 80013c0:	2b08      	cmp	r3, #8
 80013c2:	d112      	bne.n	80013ea <HAL_RCC_OscConfig+0x5e>
 80013c4:	4b8c      	ldr	r3, [pc, #560]	; (80015f8 <HAL_RCC_OscConfig+0x26c>)
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013d0:	d10b      	bne.n	80013ea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013d2:	4b89      	ldr	r3, [pc, #548]	; (80015f8 <HAL_RCC_OscConfig+0x26c>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d06c      	beq.n	80014b8 <HAL_RCC_OscConfig+0x12c>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d168      	bne.n	80014b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e246      	b.n	8001878 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013f2:	d106      	bne.n	8001402 <HAL_RCC_OscConfig+0x76>
 80013f4:	4b80      	ldr	r3, [pc, #512]	; (80015f8 <HAL_RCC_OscConfig+0x26c>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a7f      	ldr	r2, [pc, #508]	; (80015f8 <HAL_RCC_OscConfig+0x26c>)
 80013fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013fe:	6013      	str	r3, [r2, #0]
 8001400:	e02e      	b.n	8001460 <HAL_RCC_OscConfig+0xd4>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d10c      	bne.n	8001424 <HAL_RCC_OscConfig+0x98>
 800140a:	4b7b      	ldr	r3, [pc, #492]	; (80015f8 <HAL_RCC_OscConfig+0x26c>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a7a      	ldr	r2, [pc, #488]	; (80015f8 <HAL_RCC_OscConfig+0x26c>)
 8001410:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001414:	6013      	str	r3, [r2, #0]
 8001416:	4b78      	ldr	r3, [pc, #480]	; (80015f8 <HAL_RCC_OscConfig+0x26c>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a77      	ldr	r2, [pc, #476]	; (80015f8 <HAL_RCC_OscConfig+0x26c>)
 800141c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001420:	6013      	str	r3, [r2, #0]
 8001422:	e01d      	b.n	8001460 <HAL_RCC_OscConfig+0xd4>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800142c:	d10c      	bne.n	8001448 <HAL_RCC_OscConfig+0xbc>
 800142e:	4b72      	ldr	r3, [pc, #456]	; (80015f8 <HAL_RCC_OscConfig+0x26c>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a71      	ldr	r2, [pc, #452]	; (80015f8 <HAL_RCC_OscConfig+0x26c>)
 8001434:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001438:	6013      	str	r3, [r2, #0]
 800143a:	4b6f      	ldr	r3, [pc, #444]	; (80015f8 <HAL_RCC_OscConfig+0x26c>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a6e      	ldr	r2, [pc, #440]	; (80015f8 <HAL_RCC_OscConfig+0x26c>)
 8001440:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001444:	6013      	str	r3, [r2, #0]
 8001446:	e00b      	b.n	8001460 <HAL_RCC_OscConfig+0xd4>
 8001448:	4b6b      	ldr	r3, [pc, #428]	; (80015f8 <HAL_RCC_OscConfig+0x26c>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a6a      	ldr	r2, [pc, #424]	; (80015f8 <HAL_RCC_OscConfig+0x26c>)
 800144e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001452:	6013      	str	r3, [r2, #0]
 8001454:	4b68      	ldr	r3, [pc, #416]	; (80015f8 <HAL_RCC_OscConfig+0x26c>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a67      	ldr	r2, [pc, #412]	; (80015f8 <HAL_RCC_OscConfig+0x26c>)
 800145a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800145e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d013      	beq.n	8001490 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001468:	f7ff fcca 	bl	8000e00 <HAL_GetTick>
 800146c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800146e:	e008      	b.n	8001482 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001470:	f7ff fcc6 	bl	8000e00 <HAL_GetTick>
 8001474:	4602      	mov	r2, r0
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	2b64      	cmp	r3, #100	; 0x64
 800147c:	d901      	bls.n	8001482 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800147e:	2303      	movs	r3, #3
 8001480:	e1fa      	b.n	8001878 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001482:	4b5d      	ldr	r3, [pc, #372]	; (80015f8 <HAL_RCC_OscConfig+0x26c>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d0f0      	beq.n	8001470 <HAL_RCC_OscConfig+0xe4>
 800148e:	e014      	b.n	80014ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001490:	f7ff fcb6 	bl	8000e00 <HAL_GetTick>
 8001494:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001496:	e008      	b.n	80014aa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001498:	f7ff fcb2 	bl	8000e00 <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	2b64      	cmp	r3, #100	; 0x64
 80014a4:	d901      	bls.n	80014aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80014a6:	2303      	movs	r3, #3
 80014a8:	e1e6      	b.n	8001878 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014aa:	4b53      	ldr	r3, [pc, #332]	; (80015f8 <HAL_RCC_OscConfig+0x26c>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d1f0      	bne.n	8001498 <HAL_RCC_OscConfig+0x10c>
 80014b6:	e000      	b.n	80014ba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0302 	and.w	r3, r3, #2
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d063      	beq.n	800158e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014c6:	4b4c      	ldr	r3, [pc, #304]	; (80015f8 <HAL_RCC_OscConfig+0x26c>)
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f003 030c 	and.w	r3, r3, #12
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d00b      	beq.n	80014ea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80014d2:	4b49      	ldr	r3, [pc, #292]	; (80015f8 <HAL_RCC_OscConfig+0x26c>)
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f003 030c 	and.w	r3, r3, #12
 80014da:	2b08      	cmp	r3, #8
 80014dc:	d11c      	bne.n	8001518 <HAL_RCC_OscConfig+0x18c>
 80014de:	4b46      	ldr	r3, [pc, #280]	; (80015f8 <HAL_RCC_OscConfig+0x26c>)
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d116      	bne.n	8001518 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ea:	4b43      	ldr	r3, [pc, #268]	; (80015f8 <HAL_RCC_OscConfig+0x26c>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d005      	beq.n	8001502 <HAL_RCC_OscConfig+0x176>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	691b      	ldr	r3, [r3, #16]
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d001      	beq.n	8001502 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e1ba      	b.n	8001878 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001502:	4b3d      	ldr	r3, [pc, #244]	; (80015f8 <HAL_RCC_OscConfig+0x26c>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	695b      	ldr	r3, [r3, #20]
 800150e:	00db      	lsls	r3, r3, #3
 8001510:	4939      	ldr	r1, [pc, #228]	; (80015f8 <HAL_RCC_OscConfig+0x26c>)
 8001512:	4313      	orrs	r3, r2
 8001514:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001516:	e03a      	b.n	800158e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	691b      	ldr	r3, [r3, #16]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d020      	beq.n	8001562 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001520:	4b36      	ldr	r3, [pc, #216]	; (80015fc <HAL_RCC_OscConfig+0x270>)
 8001522:	2201      	movs	r2, #1
 8001524:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001526:	f7ff fc6b 	bl	8000e00 <HAL_GetTick>
 800152a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800152c:	e008      	b.n	8001540 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800152e:	f7ff fc67 	bl	8000e00 <HAL_GetTick>
 8001532:	4602      	mov	r2, r0
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	2b02      	cmp	r3, #2
 800153a:	d901      	bls.n	8001540 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800153c:	2303      	movs	r3, #3
 800153e:	e19b      	b.n	8001878 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001540:	4b2d      	ldr	r3, [pc, #180]	; (80015f8 <HAL_RCC_OscConfig+0x26c>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 0302 	and.w	r3, r3, #2
 8001548:	2b00      	cmp	r3, #0
 800154a:	d0f0      	beq.n	800152e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800154c:	4b2a      	ldr	r3, [pc, #168]	; (80015f8 <HAL_RCC_OscConfig+0x26c>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	695b      	ldr	r3, [r3, #20]
 8001558:	00db      	lsls	r3, r3, #3
 800155a:	4927      	ldr	r1, [pc, #156]	; (80015f8 <HAL_RCC_OscConfig+0x26c>)
 800155c:	4313      	orrs	r3, r2
 800155e:	600b      	str	r3, [r1, #0]
 8001560:	e015      	b.n	800158e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001562:	4b26      	ldr	r3, [pc, #152]	; (80015fc <HAL_RCC_OscConfig+0x270>)
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001568:	f7ff fc4a 	bl	8000e00 <HAL_GetTick>
 800156c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800156e:	e008      	b.n	8001582 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001570:	f7ff fc46 	bl	8000e00 <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	2b02      	cmp	r3, #2
 800157c:	d901      	bls.n	8001582 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e17a      	b.n	8001878 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001582:	4b1d      	ldr	r3, [pc, #116]	; (80015f8 <HAL_RCC_OscConfig+0x26c>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0302 	and.w	r3, r3, #2
 800158a:	2b00      	cmp	r3, #0
 800158c:	d1f0      	bne.n	8001570 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 0308 	and.w	r3, r3, #8
 8001596:	2b00      	cmp	r3, #0
 8001598:	d03a      	beq.n	8001610 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	699b      	ldr	r3, [r3, #24]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d019      	beq.n	80015d6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015a2:	4b17      	ldr	r3, [pc, #92]	; (8001600 <HAL_RCC_OscConfig+0x274>)
 80015a4:	2201      	movs	r2, #1
 80015a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015a8:	f7ff fc2a 	bl	8000e00 <HAL_GetTick>
 80015ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015ae:	e008      	b.n	80015c2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015b0:	f7ff fc26 	bl	8000e00 <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d901      	bls.n	80015c2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e15a      	b.n	8001878 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015c2:	4b0d      	ldr	r3, [pc, #52]	; (80015f8 <HAL_RCC_OscConfig+0x26c>)
 80015c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d0f0      	beq.n	80015b0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80015ce:	2001      	movs	r0, #1
 80015d0:	f000 faa6 	bl	8001b20 <RCC_Delay>
 80015d4:	e01c      	b.n	8001610 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015d6:	4b0a      	ldr	r3, [pc, #40]	; (8001600 <HAL_RCC_OscConfig+0x274>)
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015dc:	f7ff fc10 	bl	8000e00 <HAL_GetTick>
 80015e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015e2:	e00f      	b.n	8001604 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015e4:	f7ff fc0c 	bl	8000e00 <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d908      	bls.n	8001604 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e140      	b.n	8001878 <HAL_RCC_OscConfig+0x4ec>
 80015f6:	bf00      	nop
 80015f8:	40021000 	.word	0x40021000
 80015fc:	42420000 	.word	0x42420000
 8001600:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001604:	4b9e      	ldr	r3, [pc, #632]	; (8001880 <HAL_RCC_OscConfig+0x4f4>)
 8001606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001608:	f003 0302 	and.w	r3, r3, #2
 800160c:	2b00      	cmp	r3, #0
 800160e:	d1e9      	bne.n	80015e4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 0304 	and.w	r3, r3, #4
 8001618:	2b00      	cmp	r3, #0
 800161a:	f000 80a6 	beq.w	800176a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800161e:	2300      	movs	r3, #0
 8001620:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001622:	4b97      	ldr	r3, [pc, #604]	; (8001880 <HAL_RCC_OscConfig+0x4f4>)
 8001624:	69db      	ldr	r3, [r3, #28]
 8001626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d10d      	bne.n	800164a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800162e:	4b94      	ldr	r3, [pc, #592]	; (8001880 <HAL_RCC_OscConfig+0x4f4>)
 8001630:	69db      	ldr	r3, [r3, #28]
 8001632:	4a93      	ldr	r2, [pc, #588]	; (8001880 <HAL_RCC_OscConfig+0x4f4>)
 8001634:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001638:	61d3      	str	r3, [r2, #28]
 800163a:	4b91      	ldr	r3, [pc, #580]	; (8001880 <HAL_RCC_OscConfig+0x4f4>)
 800163c:	69db      	ldr	r3, [r3, #28]
 800163e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001642:	60bb      	str	r3, [r7, #8]
 8001644:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001646:	2301      	movs	r3, #1
 8001648:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800164a:	4b8e      	ldr	r3, [pc, #568]	; (8001884 <HAL_RCC_OscConfig+0x4f8>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001652:	2b00      	cmp	r3, #0
 8001654:	d118      	bne.n	8001688 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001656:	4b8b      	ldr	r3, [pc, #556]	; (8001884 <HAL_RCC_OscConfig+0x4f8>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a8a      	ldr	r2, [pc, #552]	; (8001884 <HAL_RCC_OscConfig+0x4f8>)
 800165c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001660:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001662:	f7ff fbcd 	bl	8000e00 <HAL_GetTick>
 8001666:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001668:	e008      	b.n	800167c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800166a:	f7ff fbc9 	bl	8000e00 <HAL_GetTick>
 800166e:	4602      	mov	r2, r0
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	2b64      	cmp	r3, #100	; 0x64
 8001676:	d901      	bls.n	800167c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001678:	2303      	movs	r3, #3
 800167a:	e0fd      	b.n	8001878 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800167c:	4b81      	ldr	r3, [pc, #516]	; (8001884 <HAL_RCC_OscConfig+0x4f8>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001684:	2b00      	cmp	r3, #0
 8001686:	d0f0      	beq.n	800166a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	2b01      	cmp	r3, #1
 800168e:	d106      	bne.n	800169e <HAL_RCC_OscConfig+0x312>
 8001690:	4b7b      	ldr	r3, [pc, #492]	; (8001880 <HAL_RCC_OscConfig+0x4f4>)
 8001692:	6a1b      	ldr	r3, [r3, #32]
 8001694:	4a7a      	ldr	r2, [pc, #488]	; (8001880 <HAL_RCC_OscConfig+0x4f4>)
 8001696:	f043 0301 	orr.w	r3, r3, #1
 800169a:	6213      	str	r3, [r2, #32]
 800169c:	e02d      	b.n	80016fa <HAL_RCC_OscConfig+0x36e>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	68db      	ldr	r3, [r3, #12]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d10c      	bne.n	80016c0 <HAL_RCC_OscConfig+0x334>
 80016a6:	4b76      	ldr	r3, [pc, #472]	; (8001880 <HAL_RCC_OscConfig+0x4f4>)
 80016a8:	6a1b      	ldr	r3, [r3, #32]
 80016aa:	4a75      	ldr	r2, [pc, #468]	; (8001880 <HAL_RCC_OscConfig+0x4f4>)
 80016ac:	f023 0301 	bic.w	r3, r3, #1
 80016b0:	6213      	str	r3, [r2, #32]
 80016b2:	4b73      	ldr	r3, [pc, #460]	; (8001880 <HAL_RCC_OscConfig+0x4f4>)
 80016b4:	6a1b      	ldr	r3, [r3, #32]
 80016b6:	4a72      	ldr	r2, [pc, #456]	; (8001880 <HAL_RCC_OscConfig+0x4f4>)
 80016b8:	f023 0304 	bic.w	r3, r3, #4
 80016bc:	6213      	str	r3, [r2, #32]
 80016be:	e01c      	b.n	80016fa <HAL_RCC_OscConfig+0x36e>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	2b05      	cmp	r3, #5
 80016c6:	d10c      	bne.n	80016e2 <HAL_RCC_OscConfig+0x356>
 80016c8:	4b6d      	ldr	r3, [pc, #436]	; (8001880 <HAL_RCC_OscConfig+0x4f4>)
 80016ca:	6a1b      	ldr	r3, [r3, #32]
 80016cc:	4a6c      	ldr	r2, [pc, #432]	; (8001880 <HAL_RCC_OscConfig+0x4f4>)
 80016ce:	f043 0304 	orr.w	r3, r3, #4
 80016d2:	6213      	str	r3, [r2, #32]
 80016d4:	4b6a      	ldr	r3, [pc, #424]	; (8001880 <HAL_RCC_OscConfig+0x4f4>)
 80016d6:	6a1b      	ldr	r3, [r3, #32]
 80016d8:	4a69      	ldr	r2, [pc, #420]	; (8001880 <HAL_RCC_OscConfig+0x4f4>)
 80016da:	f043 0301 	orr.w	r3, r3, #1
 80016de:	6213      	str	r3, [r2, #32]
 80016e0:	e00b      	b.n	80016fa <HAL_RCC_OscConfig+0x36e>
 80016e2:	4b67      	ldr	r3, [pc, #412]	; (8001880 <HAL_RCC_OscConfig+0x4f4>)
 80016e4:	6a1b      	ldr	r3, [r3, #32]
 80016e6:	4a66      	ldr	r2, [pc, #408]	; (8001880 <HAL_RCC_OscConfig+0x4f4>)
 80016e8:	f023 0301 	bic.w	r3, r3, #1
 80016ec:	6213      	str	r3, [r2, #32]
 80016ee:	4b64      	ldr	r3, [pc, #400]	; (8001880 <HAL_RCC_OscConfig+0x4f4>)
 80016f0:	6a1b      	ldr	r3, [r3, #32]
 80016f2:	4a63      	ldr	r2, [pc, #396]	; (8001880 <HAL_RCC_OscConfig+0x4f4>)
 80016f4:	f023 0304 	bic.w	r3, r3, #4
 80016f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	68db      	ldr	r3, [r3, #12]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d015      	beq.n	800172e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001702:	f7ff fb7d 	bl	8000e00 <HAL_GetTick>
 8001706:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001708:	e00a      	b.n	8001720 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800170a:	f7ff fb79 	bl	8000e00 <HAL_GetTick>
 800170e:	4602      	mov	r2, r0
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	f241 3288 	movw	r2, #5000	; 0x1388
 8001718:	4293      	cmp	r3, r2
 800171a:	d901      	bls.n	8001720 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800171c:	2303      	movs	r3, #3
 800171e:	e0ab      	b.n	8001878 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001720:	4b57      	ldr	r3, [pc, #348]	; (8001880 <HAL_RCC_OscConfig+0x4f4>)
 8001722:	6a1b      	ldr	r3, [r3, #32]
 8001724:	f003 0302 	and.w	r3, r3, #2
 8001728:	2b00      	cmp	r3, #0
 800172a:	d0ee      	beq.n	800170a <HAL_RCC_OscConfig+0x37e>
 800172c:	e014      	b.n	8001758 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800172e:	f7ff fb67 	bl	8000e00 <HAL_GetTick>
 8001732:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001734:	e00a      	b.n	800174c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001736:	f7ff fb63 	bl	8000e00 <HAL_GetTick>
 800173a:	4602      	mov	r2, r0
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	f241 3288 	movw	r2, #5000	; 0x1388
 8001744:	4293      	cmp	r3, r2
 8001746:	d901      	bls.n	800174c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001748:	2303      	movs	r3, #3
 800174a:	e095      	b.n	8001878 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800174c:	4b4c      	ldr	r3, [pc, #304]	; (8001880 <HAL_RCC_OscConfig+0x4f4>)
 800174e:	6a1b      	ldr	r3, [r3, #32]
 8001750:	f003 0302 	and.w	r3, r3, #2
 8001754:	2b00      	cmp	r3, #0
 8001756:	d1ee      	bne.n	8001736 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001758:	7dfb      	ldrb	r3, [r7, #23]
 800175a:	2b01      	cmp	r3, #1
 800175c:	d105      	bne.n	800176a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800175e:	4b48      	ldr	r3, [pc, #288]	; (8001880 <HAL_RCC_OscConfig+0x4f4>)
 8001760:	69db      	ldr	r3, [r3, #28]
 8001762:	4a47      	ldr	r2, [pc, #284]	; (8001880 <HAL_RCC_OscConfig+0x4f4>)
 8001764:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001768:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	69db      	ldr	r3, [r3, #28]
 800176e:	2b00      	cmp	r3, #0
 8001770:	f000 8081 	beq.w	8001876 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001774:	4b42      	ldr	r3, [pc, #264]	; (8001880 <HAL_RCC_OscConfig+0x4f4>)
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f003 030c 	and.w	r3, r3, #12
 800177c:	2b08      	cmp	r3, #8
 800177e:	d061      	beq.n	8001844 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	69db      	ldr	r3, [r3, #28]
 8001784:	2b02      	cmp	r3, #2
 8001786:	d146      	bne.n	8001816 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001788:	4b3f      	ldr	r3, [pc, #252]	; (8001888 <HAL_RCC_OscConfig+0x4fc>)
 800178a:	2200      	movs	r2, #0
 800178c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800178e:	f7ff fb37 	bl	8000e00 <HAL_GetTick>
 8001792:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001794:	e008      	b.n	80017a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001796:	f7ff fb33 	bl	8000e00 <HAL_GetTick>
 800179a:	4602      	mov	r2, r0
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d901      	bls.n	80017a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80017a4:	2303      	movs	r3, #3
 80017a6:	e067      	b.n	8001878 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017a8:	4b35      	ldr	r3, [pc, #212]	; (8001880 <HAL_RCC_OscConfig+0x4f4>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d1f0      	bne.n	8001796 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6a1b      	ldr	r3, [r3, #32]
 80017b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017bc:	d108      	bne.n	80017d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80017be:	4b30      	ldr	r3, [pc, #192]	; (8001880 <HAL_RCC_OscConfig+0x4f4>)
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	492d      	ldr	r1, [pc, #180]	; (8001880 <HAL_RCC_OscConfig+0x4f4>)
 80017cc:	4313      	orrs	r3, r2
 80017ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017d0:	4b2b      	ldr	r3, [pc, #172]	; (8001880 <HAL_RCC_OscConfig+0x4f4>)
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6a19      	ldr	r1, [r3, #32]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e0:	430b      	orrs	r3, r1
 80017e2:	4927      	ldr	r1, [pc, #156]	; (8001880 <HAL_RCC_OscConfig+0x4f4>)
 80017e4:	4313      	orrs	r3, r2
 80017e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017e8:	4b27      	ldr	r3, [pc, #156]	; (8001888 <HAL_RCC_OscConfig+0x4fc>)
 80017ea:	2201      	movs	r2, #1
 80017ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ee:	f7ff fb07 	bl	8000e00 <HAL_GetTick>
 80017f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017f4:	e008      	b.n	8001808 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017f6:	f7ff fb03 	bl	8000e00 <HAL_GetTick>
 80017fa:	4602      	mov	r2, r0
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	2b02      	cmp	r3, #2
 8001802:	d901      	bls.n	8001808 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001804:	2303      	movs	r3, #3
 8001806:	e037      	b.n	8001878 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001808:	4b1d      	ldr	r3, [pc, #116]	; (8001880 <HAL_RCC_OscConfig+0x4f4>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001810:	2b00      	cmp	r3, #0
 8001812:	d0f0      	beq.n	80017f6 <HAL_RCC_OscConfig+0x46a>
 8001814:	e02f      	b.n	8001876 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001816:	4b1c      	ldr	r3, [pc, #112]	; (8001888 <HAL_RCC_OscConfig+0x4fc>)
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800181c:	f7ff faf0 	bl	8000e00 <HAL_GetTick>
 8001820:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001822:	e008      	b.n	8001836 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001824:	f7ff faec 	bl	8000e00 <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	2b02      	cmp	r3, #2
 8001830:	d901      	bls.n	8001836 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e020      	b.n	8001878 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001836:	4b12      	ldr	r3, [pc, #72]	; (8001880 <HAL_RCC_OscConfig+0x4f4>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d1f0      	bne.n	8001824 <HAL_RCC_OscConfig+0x498>
 8001842:	e018      	b.n	8001876 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	69db      	ldr	r3, [r3, #28]
 8001848:	2b01      	cmp	r3, #1
 800184a:	d101      	bne.n	8001850 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e013      	b.n	8001878 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001850:	4b0b      	ldr	r3, [pc, #44]	; (8001880 <HAL_RCC_OscConfig+0x4f4>)
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6a1b      	ldr	r3, [r3, #32]
 8001860:	429a      	cmp	r2, r3
 8001862:	d106      	bne.n	8001872 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800186e:	429a      	cmp	r2, r3
 8001870:	d001      	beq.n	8001876 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e000      	b.n	8001878 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001876:	2300      	movs	r3, #0
}
 8001878:	4618      	mov	r0, r3
 800187a:	3718      	adds	r7, #24
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	40021000 	.word	0x40021000
 8001884:	40007000 	.word	0x40007000
 8001888:	42420060 	.word	0x42420060

0800188c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d101      	bne.n	80018a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e0d0      	b.n	8001a42 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018a0:	4b6a      	ldr	r3, [pc, #424]	; (8001a4c <HAL_RCC_ClockConfig+0x1c0>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0307 	and.w	r3, r3, #7
 80018a8:	683a      	ldr	r2, [r7, #0]
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d910      	bls.n	80018d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ae:	4b67      	ldr	r3, [pc, #412]	; (8001a4c <HAL_RCC_ClockConfig+0x1c0>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f023 0207 	bic.w	r2, r3, #7
 80018b6:	4965      	ldr	r1, [pc, #404]	; (8001a4c <HAL_RCC_ClockConfig+0x1c0>)
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018be:	4b63      	ldr	r3, [pc, #396]	; (8001a4c <HAL_RCC_ClockConfig+0x1c0>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0307 	and.w	r3, r3, #7
 80018c6:	683a      	ldr	r2, [r7, #0]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d001      	beq.n	80018d0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e0b8      	b.n	8001a42 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0302 	and.w	r3, r3, #2
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d020      	beq.n	800191e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0304 	and.w	r3, r3, #4
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d005      	beq.n	80018f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018e8:	4b59      	ldr	r3, [pc, #356]	; (8001a50 <HAL_RCC_ClockConfig+0x1c4>)
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	4a58      	ldr	r2, [pc, #352]	; (8001a50 <HAL_RCC_ClockConfig+0x1c4>)
 80018ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80018f2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 0308 	and.w	r3, r3, #8
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d005      	beq.n	800190c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001900:	4b53      	ldr	r3, [pc, #332]	; (8001a50 <HAL_RCC_ClockConfig+0x1c4>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	4a52      	ldr	r2, [pc, #328]	; (8001a50 <HAL_RCC_ClockConfig+0x1c4>)
 8001906:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800190a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800190c:	4b50      	ldr	r3, [pc, #320]	; (8001a50 <HAL_RCC_ClockConfig+0x1c4>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	494d      	ldr	r1, [pc, #308]	; (8001a50 <HAL_RCC_ClockConfig+0x1c4>)
 800191a:	4313      	orrs	r3, r2
 800191c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0301 	and.w	r3, r3, #1
 8001926:	2b00      	cmp	r3, #0
 8001928:	d040      	beq.n	80019ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	2b01      	cmp	r3, #1
 8001930:	d107      	bne.n	8001942 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001932:	4b47      	ldr	r3, [pc, #284]	; (8001a50 <HAL_RCC_ClockConfig+0x1c4>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d115      	bne.n	800196a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e07f      	b.n	8001a42 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	2b02      	cmp	r3, #2
 8001948:	d107      	bne.n	800195a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800194a:	4b41      	ldr	r3, [pc, #260]	; (8001a50 <HAL_RCC_ClockConfig+0x1c4>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d109      	bne.n	800196a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e073      	b.n	8001a42 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800195a:	4b3d      	ldr	r3, [pc, #244]	; (8001a50 <HAL_RCC_ClockConfig+0x1c4>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0302 	and.w	r3, r3, #2
 8001962:	2b00      	cmp	r3, #0
 8001964:	d101      	bne.n	800196a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e06b      	b.n	8001a42 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800196a:	4b39      	ldr	r3, [pc, #228]	; (8001a50 <HAL_RCC_ClockConfig+0x1c4>)
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f023 0203 	bic.w	r2, r3, #3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	4936      	ldr	r1, [pc, #216]	; (8001a50 <HAL_RCC_ClockConfig+0x1c4>)
 8001978:	4313      	orrs	r3, r2
 800197a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800197c:	f7ff fa40 	bl	8000e00 <HAL_GetTick>
 8001980:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001982:	e00a      	b.n	800199a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001984:	f7ff fa3c 	bl	8000e00 <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001992:	4293      	cmp	r3, r2
 8001994:	d901      	bls.n	800199a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e053      	b.n	8001a42 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800199a:	4b2d      	ldr	r3, [pc, #180]	; (8001a50 <HAL_RCC_ClockConfig+0x1c4>)
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f003 020c 	and.w	r2, r3, #12
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d1eb      	bne.n	8001984 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019ac:	4b27      	ldr	r3, [pc, #156]	; (8001a4c <HAL_RCC_ClockConfig+0x1c0>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0307 	and.w	r3, r3, #7
 80019b4:	683a      	ldr	r2, [r7, #0]
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d210      	bcs.n	80019dc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ba:	4b24      	ldr	r3, [pc, #144]	; (8001a4c <HAL_RCC_ClockConfig+0x1c0>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f023 0207 	bic.w	r2, r3, #7
 80019c2:	4922      	ldr	r1, [pc, #136]	; (8001a4c <HAL_RCC_ClockConfig+0x1c0>)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ca:	4b20      	ldr	r3, [pc, #128]	; (8001a4c <HAL_RCC_ClockConfig+0x1c0>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0307 	and.w	r3, r3, #7
 80019d2:	683a      	ldr	r2, [r7, #0]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d001      	beq.n	80019dc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e032      	b.n	8001a42 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0304 	and.w	r3, r3, #4
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d008      	beq.n	80019fa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019e8:	4b19      	ldr	r3, [pc, #100]	; (8001a50 <HAL_RCC_ClockConfig+0x1c4>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	4916      	ldr	r1, [pc, #88]	; (8001a50 <HAL_RCC_ClockConfig+0x1c4>)
 80019f6:	4313      	orrs	r3, r2
 80019f8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0308 	and.w	r3, r3, #8
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d009      	beq.n	8001a1a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a06:	4b12      	ldr	r3, [pc, #72]	; (8001a50 <HAL_RCC_ClockConfig+0x1c4>)
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	691b      	ldr	r3, [r3, #16]
 8001a12:	00db      	lsls	r3, r3, #3
 8001a14:	490e      	ldr	r1, [pc, #56]	; (8001a50 <HAL_RCC_ClockConfig+0x1c4>)
 8001a16:	4313      	orrs	r3, r2
 8001a18:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a1a:	f000 f821 	bl	8001a60 <HAL_RCC_GetSysClockFreq>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	4b0b      	ldr	r3, [pc, #44]	; (8001a50 <HAL_RCC_ClockConfig+0x1c4>)
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	091b      	lsrs	r3, r3, #4
 8001a26:	f003 030f 	and.w	r3, r3, #15
 8001a2a:	490a      	ldr	r1, [pc, #40]	; (8001a54 <HAL_RCC_ClockConfig+0x1c8>)
 8001a2c:	5ccb      	ldrb	r3, [r1, r3]
 8001a2e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a32:	4a09      	ldr	r2, [pc, #36]	; (8001a58 <HAL_RCC_ClockConfig+0x1cc>)
 8001a34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a36:	4b09      	ldr	r3, [pc, #36]	; (8001a5c <HAL_RCC_ClockConfig+0x1d0>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7ff f99e 	bl	8000d7c <HAL_InitTick>

  return HAL_OK;
 8001a40:	2300      	movs	r3, #0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	40022000 	.word	0x40022000
 8001a50:	40021000 	.word	0x40021000
 8001a54:	080024b0 	.word	0x080024b0
 8001a58:	20000000 	.word	0x20000000
 8001a5c:	20000004 	.word	0x20000004

08001a60 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a60:	b490      	push	{r4, r7}
 8001a62:	b08a      	sub	sp, #40	; 0x28
 8001a64:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001a66:	4b2a      	ldr	r3, [pc, #168]	; (8001b10 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001a68:	1d3c      	adds	r4, r7, #4
 8001a6a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a6c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001a70:	f240 2301 	movw	r3, #513	; 0x201
 8001a74:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a76:	2300      	movs	r3, #0
 8001a78:	61fb      	str	r3, [r7, #28]
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	61bb      	str	r3, [r7, #24]
 8001a7e:	2300      	movs	r3, #0
 8001a80:	627b      	str	r3, [r7, #36]	; 0x24
 8001a82:	2300      	movs	r3, #0
 8001a84:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001a86:	2300      	movs	r3, #0
 8001a88:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001a8a:	4b22      	ldr	r3, [pc, #136]	; (8001b14 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	f003 030c 	and.w	r3, r3, #12
 8001a96:	2b04      	cmp	r3, #4
 8001a98:	d002      	beq.n	8001aa0 <HAL_RCC_GetSysClockFreq+0x40>
 8001a9a:	2b08      	cmp	r3, #8
 8001a9c:	d003      	beq.n	8001aa6 <HAL_RCC_GetSysClockFreq+0x46>
 8001a9e:	e02d      	b.n	8001afc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001aa0:	4b1d      	ldr	r3, [pc, #116]	; (8001b18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001aa2:	623b      	str	r3, [r7, #32]
      break;
 8001aa4:	e02d      	b.n	8001b02 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	0c9b      	lsrs	r3, r3, #18
 8001aaa:	f003 030f 	and.w	r3, r3, #15
 8001aae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001ab2:	4413      	add	r3, r2
 8001ab4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001ab8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d013      	beq.n	8001aec <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ac4:	4b13      	ldr	r3, [pc, #76]	; (8001b14 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	0c5b      	lsrs	r3, r3, #17
 8001aca:	f003 0301 	and.w	r3, r3, #1
 8001ace:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001ad2:	4413      	add	r3, r2
 8001ad4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001ad8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	4a0e      	ldr	r2, [pc, #56]	; (8001b18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ade:	fb02 f203 	mul.w	r2, r2, r3
 8001ae2:	69bb      	ldr	r3, [r7, #24]
 8001ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ae8:	627b      	str	r3, [r7, #36]	; 0x24
 8001aea:	e004      	b.n	8001af6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	4a0b      	ldr	r2, [pc, #44]	; (8001b1c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001af0:	fb02 f303 	mul.w	r3, r2, r3
 8001af4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af8:	623b      	str	r3, [r7, #32]
      break;
 8001afa:	e002      	b.n	8001b02 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001afc:	4b06      	ldr	r3, [pc, #24]	; (8001b18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001afe:	623b      	str	r3, [r7, #32]
      break;
 8001b00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b02:	6a3b      	ldr	r3, [r7, #32]
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3728      	adds	r7, #40	; 0x28
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bc90      	pop	{r4, r7}
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	080024a0 	.word	0x080024a0
 8001b14:	40021000 	.word	0x40021000
 8001b18:	007a1200 	.word	0x007a1200
 8001b1c:	003d0900 	.word	0x003d0900

08001b20 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b085      	sub	sp, #20
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b28:	4b0a      	ldr	r3, [pc, #40]	; (8001b54 <RCC_Delay+0x34>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a0a      	ldr	r2, [pc, #40]	; (8001b58 <RCC_Delay+0x38>)
 8001b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b32:	0a5b      	lsrs	r3, r3, #9
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	fb02 f303 	mul.w	r3, r2, r3
 8001b3a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b3c:	bf00      	nop
  }
  while (Delay --);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	1e5a      	subs	r2, r3, #1
 8001b42:	60fa      	str	r2, [r7, #12]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d1f9      	bne.n	8001b3c <RCC_Delay+0x1c>
}
 8001b48:	bf00      	nop
 8001b4a:	bf00      	nop
 8001b4c:	3714      	adds	r7, #20
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bc80      	pop	{r7}
 8001b52:	4770      	bx	lr
 8001b54:	20000000 	.word	0x20000000
 8001b58:	10624dd3 	.word	0x10624dd3

08001b5c <__errno>:
 8001b5c:	4b01      	ldr	r3, [pc, #4]	; (8001b64 <__errno+0x8>)
 8001b5e:	6818      	ldr	r0, [r3, #0]
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	2000000c 	.word	0x2000000c

08001b68 <__libc_init_array>:
 8001b68:	b570      	push	{r4, r5, r6, lr}
 8001b6a:	2600      	movs	r6, #0
 8001b6c:	4d0c      	ldr	r5, [pc, #48]	; (8001ba0 <__libc_init_array+0x38>)
 8001b6e:	4c0d      	ldr	r4, [pc, #52]	; (8001ba4 <__libc_init_array+0x3c>)
 8001b70:	1b64      	subs	r4, r4, r5
 8001b72:	10a4      	asrs	r4, r4, #2
 8001b74:	42a6      	cmp	r6, r4
 8001b76:	d109      	bne.n	8001b8c <__libc_init_array+0x24>
 8001b78:	f000 fc5c 	bl	8002434 <_init>
 8001b7c:	2600      	movs	r6, #0
 8001b7e:	4d0a      	ldr	r5, [pc, #40]	; (8001ba8 <__libc_init_array+0x40>)
 8001b80:	4c0a      	ldr	r4, [pc, #40]	; (8001bac <__libc_init_array+0x44>)
 8001b82:	1b64      	subs	r4, r4, r5
 8001b84:	10a4      	asrs	r4, r4, #2
 8001b86:	42a6      	cmp	r6, r4
 8001b88:	d105      	bne.n	8001b96 <__libc_init_array+0x2e>
 8001b8a:	bd70      	pop	{r4, r5, r6, pc}
 8001b8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b90:	4798      	blx	r3
 8001b92:	3601      	adds	r6, #1
 8001b94:	e7ee      	b.n	8001b74 <__libc_init_array+0xc>
 8001b96:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b9a:	4798      	blx	r3
 8001b9c:	3601      	adds	r6, #1
 8001b9e:	e7f2      	b.n	8001b86 <__libc_init_array+0x1e>
 8001ba0:	080024f4 	.word	0x080024f4
 8001ba4:	080024f4 	.word	0x080024f4
 8001ba8:	080024f4 	.word	0x080024f4
 8001bac:	080024f8 	.word	0x080024f8

08001bb0 <memset>:
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	4402      	add	r2, r0
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d100      	bne.n	8001bba <memset+0xa>
 8001bb8:	4770      	bx	lr
 8001bba:	f803 1b01 	strb.w	r1, [r3], #1
 8001bbe:	e7f9      	b.n	8001bb4 <memset+0x4>

08001bc0 <siprintf>:
 8001bc0:	b40e      	push	{r1, r2, r3}
 8001bc2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001bc6:	b500      	push	{lr}
 8001bc8:	b09c      	sub	sp, #112	; 0x70
 8001bca:	ab1d      	add	r3, sp, #116	; 0x74
 8001bcc:	9002      	str	r0, [sp, #8]
 8001bce:	9006      	str	r0, [sp, #24]
 8001bd0:	9107      	str	r1, [sp, #28]
 8001bd2:	9104      	str	r1, [sp, #16]
 8001bd4:	4808      	ldr	r0, [pc, #32]	; (8001bf8 <siprintf+0x38>)
 8001bd6:	4909      	ldr	r1, [pc, #36]	; (8001bfc <siprintf+0x3c>)
 8001bd8:	f853 2b04 	ldr.w	r2, [r3], #4
 8001bdc:	9105      	str	r1, [sp, #20]
 8001bde:	6800      	ldr	r0, [r0, #0]
 8001be0:	a902      	add	r1, sp, #8
 8001be2:	9301      	str	r3, [sp, #4]
 8001be4:	f000 f868 	bl	8001cb8 <_svfiprintf_r>
 8001be8:	2200      	movs	r2, #0
 8001bea:	9b02      	ldr	r3, [sp, #8]
 8001bec:	701a      	strb	r2, [r3, #0]
 8001bee:	b01c      	add	sp, #112	; 0x70
 8001bf0:	f85d eb04 	ldr.w	lr, [sp], #4
 8001bf4:	b003      	add	sp, #12
 8001bf6:	4770      	bx	lr
 8001bf8:	2000000c 	.word	0x2000000c
 8001bfc:	ffff0208 	.word	0xffff0208

08001c00 <__ssputs_r>:
 8001c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001c04:	688e      	ldr	r6, [r1, #8]
 8001c06:	4682      	mov	sl, r0
 8001c08:	429e      	cmp	r6, r3
 8001c0a:	460c      	mov	r4, r1
 8001c0c:	4690      	mov	r8, r2
 8001c0e:	461f      	mov	r7, r3
 8001c10:	d838      	bhi.n	8001c84 <__ssputs_r+0x84>
 8001c12:	898a      	ldrh	r2, [r1, #12]
 8001c14:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001c18:	d032      	beq.n	8001c80 <__ssputs_r+0x80>
 8001c1a:	6825      	ldr	r5, [r4, #0]
 8001c1c:	6909      	ldr	r1, [r1, #16]
 8001c1e:	3301      	adds	r3, #1
 8001c20:	eba5 0901 	sub.w	r9, r5, r1
 8001c24:	6965      	ldr	r5, [r4, #20]
 8001c26:	444b      	add	r3, r9
 8001c28:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001c2c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001c30:	106d      	asrs	r5, r5, #1
 8001c32:	429d      	cmp	r5, r3
 8001c34:	bf38      	it	cc
 8001c36:	461d      	movcc	r5, r3
 8001c38:	0553      	lsls	r3, r2, #21
 8001c3a:	d531      	bpl.n	8001ca0 <__ssputs_r+0xa0>
 8001c3c:	4629      	mov	r1, r5
 8001c3e:	f000 fb53 	bl	80022e8 <_malloc_r>
 8001c42:	4606      	mov	r6, r0
 8001c44:	b950      	cbnz	r0, 8001c5c <__ssputs_r+0x5c>
 8001c46:	230c      	movs	r3, #12
 8001c48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c4c:	f8ca 3000 	str.w	r3, [sl]
 8001c50:	89a3      	ldrh	r3, [r4, #12]
 8001c52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c56:	81a3      	strh	r3, [r4, #12]
 8001c58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c5c:	464a      	mov	r2, r9
 8001c5e:	6921      	ldr	r1, [r4, #16]
 8001c60:	f000 face 	bl	8002200 <memcpy>
 8001c64:	89a3      	ldrh	r3, [r4, #12]
 8001c66:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001c6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c6e:	81a3      	strh	r3, [r4, #12]
 8001c70:	6126      	str	r6, [r4, #16]
 8001c72:	444e      	add	r6, r9
 8001c74:	6026      	str	r6, [r4, #0]
 8001c76:	463e      	mov	r6, r7
 8001c78:	6165      	str	r5, [r4, #20]
 8001c7a:	eba5 0509 	sub.w	r5, r5, r9
 8001c7e:	60a5      	str	r5, [r4, #8]
 8001c80:	42be      	cmp	r6, r7
 8001c82:	d900      	bls.n	8001c86 <__ssputs_r+0x86>
 8001c84:	463e      	mov	r6, r7
 8001c86:	4632      	mov	r2, r6
 8001c88:	4641      	mov	r1, r8
 8001c8a:	6820      	ldr	r0, [r4, #0]
 8001c8c:	f000 fac6 	bl	800221c <memmove>
 8001c90:	68a3      	ldr	r3, [r4, #8]
 8001c92:	6822      	ldr	r2, [r4, #0]
 8001c94:	1b9b      	subs	r3, r3, r6
 8001c96:	4432      	add	r2, r6
 8001c98:	2000      	movs	r0, #0
 8001c9a:	60a3      	str	r3, [r4, #8]
 8001c9c:	6022      	str	r2, [r4, #0]
 8001c9e:	e7db      	b.n	8001c58 <__ssputs_r+0x58>
 8001ca0:	462a      	mov	r2, r5
 8001ca2:	f000 fb7b 	bl	800239c <_realloc_r>
 8001ca6:	4606      	mov	r6, r0
 8001ca8:	2800      	cmp	r0, #0
 8001caa:	d1e1      	bne.n	8001c70 <__ssputs_r+0x70>
 8001cac:	4650      	mov	r0, sl
 8001cae:	6921      	ldr	r1, [r4, #16]
 8001cb0:	f000 face 	bl	8002250 <_free_r>
 8001cb4:	e7c7      	b.n	8001c46 <__ssputs_r+0x46>
	...

08001cb8 <_svfiprintf_r>:
 8001cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001cbc:	4698      	mov	r8, r3
 8001cbe:	898b      	ldrh	r3, [r1, #12]
 8001cc0:	4607      	mov	r7, r0
 8001cc2:	061b      	lsls	r3, r3, #24
 8001cc4:	460d      	mov	r5, r1
 8001cc6:	4614      	mov	r4, r2
 8001cc8:	b09d      	sub	sp, #116	; 0x74
 8001cca:	d50e      	bpl.n	8001cea <_svfiprintf_r+0x32>
 8001ccc:	690b      	ldr	r3, [r1, #16]
 8001cce:	b963      	cbnz	r3, 8001cea <_svfiprintf_r+0x32>
 8001cd0:	2140      	movs	r1, #64	; 0x40
 8001cd2:	f000 fb09 	bl	80022e8 <_malloc_r>
 8001cd6:	6028      	str	r0, [r5, #0]
 8001cd8:	6128      	str	r0, [r5, #16]
 8001cda:	b920      	cbnz	r0, 8001ce6 <_svfiprintf_r+0x2e>
 8001cdc:	230c      	movs	r3, #12
 8001cde:	603b      	str	r3, [r7, #0]
 8001ce0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ce4:	e0d1      	b.n	8001e8a <_svfiprintf_r+0x1d2>
 8001ce6:	2340      	movs	r3, #64	; 0x40
 8001ce8:	616b      	str	r3, [r5, #20]
 8001cea:	2300      	movs	r3, #0
 8001cec:	9309      	str	r3, [sp, #36]	; 0x24
 8001cee:	2320      	movs	r3, #32
 8001cf0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001cf4:	2330      	movs	r3, #48	; 0x30
 8001cf6:	f04f 0901 	mov.w	r9, #1
 8001cfa:	f8cd 800c 	str.w	r8, [sp, #12]
 8001cfe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8001ea4 <_svfiprintf_r+0x1ec>
 8001d02:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001d06:	4623      	mov	r3, r4
 8001d08:	469a      	mov	sl, r3
 8001d0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001d0e:	b10a      	cbz	r2, 8001d14 <_svfiprintf_r+0x5c>
 8001d10:	2a25      	cmp	r2, #37	; 0x25
 8001d12:	d1f9      	bne.n	8001d08 <_svfiprintf_r+0x50>
 8001d14:	ebba 0b04 	subs.w	fp, sl, r4
 8001d18:	d00b      	beq.n	8001d32 <_svfiprintf_r+0x7a>
 8001d1a:	465b      	mov	r3, fp
 8001d1c:	4622      	mov	r2, r4
 8001d1e:	4629      	mov	r1, r5
 8001d20:	4638      	mov	r0, r7
 8001d22:	f7ff ff6d 	bl	8001c00 <__ssputs_r>
 8001d26:	3001      	adds	r0, #1
 8001d28:	f000 80aa 	beq.w	8001e80 <_svfiprintf_r+0x1c8>
 8001d2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001d2e:	445a      	add	r2, fp
 8001d30:	9209      	str	r2, [sp, #36]	; 0x24
 8001d32:	f89a 3000 	ldrb.w	r3, [sl]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	f000 80a2 	beq.w	8001e80 <_svfiprintf_r+0x1c8>
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001d46:	f10a 0a01 	add.w	sl, sl, #1
 8001d4a:	9304      	str	r3, [sp, #16]
 8001d4c:	9307      	str	r3, [sp, #28]
 8001d4e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001d52:	931a      	str	r3, [sp, #104]	; 0x68
 8001d54:	4654      	mov	r4, sl
 8001d56:	2205      	movs	r2, #5
 8001d58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001d5c:	4851      	ldr	r0, [pc, #324]	; (8001ea4 <_svfiprintf_r+0x1ec>)
 8001d5e:	f000 fa41 	bl	80021e4 <memchr>
 8001d62:	9a04      	ldr	r2, [sp, #16]
 8001d64:	b9d8      	cbnz	r0, 8001d9e <_svfiprintf_r+0xe6>
 8001d66:	06d0      	lsls	r0, r2, #27
 8001d68:	bf44      	itt	mi
 8001d6a:	2320      	movmi	r3, #32
 8001d6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001d70:	0711      	lsls	r1, r2, #28
 8001d72:	bf44      	itt	mi
 8001d74:	232b      	movmi	r3, #43	; 0x2b
 8001d76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001d7a:	f89a 3000 	ldrb.w	r3, [sl]
 8001d7e:	2b2a      	cmp	r3, #42	; 0x2a
 8001d80:	d015      	beq.n	8001dae <_svfiprintf_r+0xf6>
 8001d82:	4654      	mov	r4, sl
 8001d84:	2000      	movs	r0, #0
 8001d86:	f04f 0c0a 	mov.w	ip, #10
 8001d8a:	9a07      	ldr	r2, [sp, #28]
 8001d8c:	4621      	mov	r1, r4
 8001d8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001d92:	3b30      	subs	r3, #48	; 0x30
 8001d94:	2b09      	cmp	r3, #9
 8001d96:	d94e      	bls.n	8001e36 <_svfiprintf_r+0x17e>
 8001d98:	b1b0      	cbz	r0, 8001dc8 <_svfiprintf_r+0x110>
 8001d9a:	9207      	str	r2, [sp, #28]
 8001d9c:	e014      	b.n	8001dc8 <_svfiprintf_r+0x110>
 8001d9e:	eba0 0308 	sub.w	r3, r0, r8
 8001da2:	fa09 f303 	lsl.w	r3, r9, r3
 8001da6:	4313      	orrs	r3, r2
 8001da8:	46a2      	mov	sl, r4
 8001daa:	9304      	str	r3, [sp, #16]
 8001dac:	e7d2      	b.n	8001d54 <_svfiprintf_r+0x9c>
 8001dae:	9b03      	ldr	r3, [sp, #12]
 8001db0:	1d19      	adds	r1, r3, #4
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	9103      	str	r1, [sp, #12]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	bfbb      	ittet	lt
 8001dba:	425b      	neglt	r3, r3
 8001dbc:	f042 0202 	orrlt.w	r2, r2, #2
 8001dc0:	9307      	strge	r3, [sp, #28]
 8001dc2:	9307      	strlt	r3, [sp, #28]
 8001dc4:	bfb8      	it	lt
 8001dc6:	9204      	strlt	r2, [sp, #16]
 8001dc8:	7823      	ldrb	r3, [r4, #0]
 8001dca:	2b2e      	cmp	r3, #46	; 0x2e
 8001dcc:	d10c      	bne.n	8001de8 <_svfiprintf_r+0x130>
 8001dce:	7863      	ldrb	r3, [r4, #1]
 8001dd0:	2b2a      	cmp	r3, #42	; 0x2a
 8001dd2:	d135      	bne.n	8001e40 <_svfiprintf_r+0x188>
 8001dd4:	9b03      	ldr	r3, [sp, #12]
 8001dd6:	3402      	adds	r4, #2
 8001dd8:	1d1a      	adds	r2, r3, #4
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	9203      	str	r2, [sp, #12]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	bfb8      	it	lt
 8001de2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8001de6:	9305      	str	r3, [sp, #20]
 8001de8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8001eb4 <_svfiprintf_r+0x1fc>
 8001dec:	2203      	movs	r2, #3
 8001dee:	4650      	mov	r0, sl
 8001df0:	7821      	ldrb	r1, [r4, #0]
 8001df2:	f000 f9f7 	bl	80021e4 <memchr>
 8001df6:	b140      	cbz	r0, 8001e0a <_svfiprintf_r+0x152>
 8001df8:	2340      	movs	r3, #64	; 0x40
 8001dfa:	eba0 000a 	sub.w	r0, r0, sl
 8001dfe:	fa03 f000 	lsl.w	r0, r3, r0
 8001e02:	9b04      	ldr	r3, [sp, #16]
 8001e04:	3401      	adds	r4, #1
 8001e06:	4303      	orrs	r3, r0
 8001e08:	9304      	str	r3, [sp, #16]
 8001e0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001e0e:	2206      	movs	r2, #6
 8001e10:	4825      	ldr	r0, [pc, #148]	; (8001ea8 <_svfiprintf_r+0x1f0>)
 8001e12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001e16:	f000 f9e5 	bl	80021e4 <memchr>
 8001e1a:	2800      	cmp	r0, #0
 8001e1c:	d038      	beq.n	8001e90 <_svfiprintf_r+0x1d8>
 8001e1e:	4b23      	ldr	r3, [pc, #140]	; (8001eac <_svfiprintf_r+0x1f4>)
 8001e20:	bb1b      	cbnz	r3, 8001e6a <_svfiprintf_r+0x1b2>
 8001e22:	9b03      	ldr	r3, [sp, #12]
 8001e24:	3307      	adds	r3, #7
 8001e26:	f023 0307 	bic.w	r3, r3, #7
 8001e2a:	3308      	adds	r3, #8
 8001e2c:	9303      	str	r3, [sp, #12]
 8001e2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001e30:	4433      	add	r3, r6
 8001e32:	9309      	str	r3, [sp, #36]	; 0x24
 8001e34:	e767      	b.n	8001d06 <_svfiprintf_r+0x4e>
 8001e36:	460c      	mov	r4, r1
 8001e38:	2001      	movs	r0, #1
 8001e3a:	fb0c 3202 	mla	r2, ip, r2, r3
 8001e3e:	e7a5      	b.n	8001d8c <_svfiprintf_r+0xd4>
 8001e40:	2300      	movs	r3, #0
 8001e42:	f04f 0c0a 	mov.w	ip, #10
 8001e46:	4619      	mov	r1, r3
 8001e48:	3401      	adds	r4, #1
 8001e4a:	9305      	str	r3, [sp, #20]
 8001e4c:	4620      	mov	r0, r4
 8001e4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001e52:	3a30      	subs	r2, #48	; 0x30
 8001e54:	2a09      	cmp	r2, #9
 8001e56:	d903      	bls.n	8001e60 <_svfiprintf_r+0x1a8>
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d0c5      	beq.n	8001de8 <_svfiprintf_r+0x130>
 8001e5c:	9105      	str	r1, [sp, #20]
 8001e5e:	e7c3      	b.n	8001de8 <_svfiprintf_r+0x130>
 8001e60:	4604      	mov	r4, r0
 8001e62:	2301      	movs	r3, #1
 8001e64:	fb0c 2101 	mla	r1, ip, r1, r2
 8001e68:	e7f0      	b.n	8001e4c <_svfiprintf_r+0x194>
 8001e6a:	ab03      	add	r3, sp, #12
 8001e6c:	9300      	str	r3, [sp, #0]
 8001e6e:	462a      	mov	r2, r5
 8001e70:	4638      	mov	r0, r7
 8001e72:	4b0f      	ldr	r3, [pc, #60]	; (8001eb0 <_svfiprintf_r+0x1f8>)
 8001e74:	a904      	add	r1, sp, #16
 8001e76:	f3af 8000 	nop.w
 8001e7a:	1c42      	adds	r2, r0, #1
 8001e7c:	4606      	mov	r6, r0
 8001e7e:	d1d6      	bne.n	8001e2e <_svfiprintf_r+0x176>
 8001e80:	89ab      	ldrh	r3, [r5, #12]
 8001e82:	065b      	lsls	r3, r3, #25
 8001e84:	f53f af2c 	bmi.w	8001ce0 <_svfiprintf_r+0x28>
 8001e88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001e8a:	b01d      	add	sp, #116	; 0x74
 8001e8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e90:	ab03      	add	r3, sp, #12
 8001e92:	9300      	str	r3, [sp, #0]
 8001e94:	462a      	mov	r2, r5
 8001e96:	4638      	mov	r0, r7
 8001e98:	4b05      	ldr	r3, [pc, #20]	; (8001eb0 <_svfiprintf_r+0x1f8>)
 8001e9a:	a904      	add	r1, sp, #16
 8001e9c:	f000 f87c 	bl	8001f98 <_printf_i>
 8001ea0:	e7eb      	b.n	8001e7a <_svfiprintf_r+0x1c2>
 8001ea2:	bf00      	nop
 8001ea4:	080024c0 	.word	0x080024c0
 8001ea8:	080024ca 	.word	0x080024ca
 8001eac:	00000000 	.word	0x00000000
 8001eb0:	08001c01 	.word	0x08001c01
 8001eb4:	080024c6 	.word	0x080024c6

08001eb8 <_printf_common>:
 8001eb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001ebc:	4616      	mov	r6, r2
 8001ebe:	4699      	mov	r9, r3
 8001ec0:	688a      	ldr	r2, [r1, #8]
 8001ec2:	690b      	ldr	r3, [r1, #16]
 8001ec4:	4607      	mov	r7, r0
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	bfb8      	it	lt
 8001eca:	4613      	movlt	r3, r2
 8001ecc:	6033      	str	r3, [r6, #0]
 8001ece:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001ed2:	460c      	mov	r4, r1
 8001ed4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001ed8:	b10a      	cbz	r2, 8001ede <_printf_common+0x26>
 8001eda:	3301      	adds	r3, #1
 8001edc:	6033      	str	r3, [r6, #0]
 8001ede:	6823      	ldr	r3, [r4, #0]
 8001ee0:	0699      	lsls	r1, r3, #26
 8001ee2:	bf42      	ittt	mi
 8001ee4:	6833      	ldrmi	r3, [r6, #0]
 8001ee6:	3302      	addmi	r3, #2
 8001ee8:	6033      	strmi	r3, [r6, #0]
 8001eea:	6825      	ldr	r5, [r4, #0]
 8001eec:	f015 0506 	ands.w	r5, r5, #6
 8001ef0:	d106      	bne.n	8001f00 <_printf_common+0x48>
 8001ef2:	f104 0a19 	add.w	sl, r4, #25
 8001ef6:	68e3      	ldr	r3, [r4, #12]
 8001ef8:	6832      	ldr	r2, [r6, #0]
 8001efa:	1a9b      	subs	r3, r3, r2
 8001efc:	42ab      	cmp	r3, r5
 8001efe:	dc28      	bgt.n	8001f52 <_printf_common+0x9a>
 8001f00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001f04:	1e13      	subs	r3, r2, #0
 8001f06:	6822      	ldr	r2, [r4, #0]
 8001f08:	bf18      	it	ne
 8001f0a:	2301      	movne	r3, #1
 8001f0c:	0692      	lsls	r2, r2, #26
 8001f0e:	d42d      	bmi.n	8001f6c <_printf_common+0xb4>
 8001f10:	4649      	mov	r1, r9
 8001f12:	4638      	mov	r0, r7
 8001f14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001f18:	47c0      	blx	r8
 8001f1a:	3001      	adds	r0, #1
 8001f1c:	d020      	beq.n	8001f60 <_printf_common+0xa8>
 8001f1e:	6823      	ldr	r3, [r4, #0]
 8001f20:	68e5      	ldr	r5, [r4, #12]
 8001f22:	f003 0306 	and.w	r3, r3, #6
 8001f26:	2b04      	cmp	r3, #4
 8001f28:	bf18      	it	ne
 8001f2a:	2500      	movne	r5, #0
 8001f2c:	6832      	ldr	r2, [r6, #0]
 8001f2e:	f04f 0600 	mov.w	r6, #0
 8001f32:	68a3      	ldr	r3, [r4, #8]
 8001f34:	bf08      	it	eq
 8001f36:	1aad      	subeq	r5, r5, r2
 8001f38:	6922      	ldr	r2, [r4, #16]
 8001f3a:	bf08      	it	eq
 8001f3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001f40:	4293      	cmp	r3, r2
 8001f42:	bfc4      	itt	gt
 8001f44:	1a9b      	subgt	r3, r3, r2
 8001f46:	18ed      	addgt	r5, r5, r3
 8001f48:	341a      	adds	r4, #26
 8001f4a:	42b5      	cmp	r5, r6
 8001f4c:	d11a      	bne.n	8001f84 <_printf_common+0xcc>
 8001f4e:	2000      	movs	r0, #0
 8001f50:	e008      	b.n	8001f64 <_printf_common+0xac>
 8001f52:	2301      	movs	r3, #1
 8001f54:	4652      	mov	r2, sl
 8001f56:	4649      	mov	r1, r9
 8001f58:	4638      	mov	r0, r7
 8001f5a:	47c0      	blx	r8
 8001f5c:	3001      	adds	r0, #1
 8001f5e:	d103      	bne.n	8001f68 <_printf_common+0xb0>
 8001f60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f68:	3501      	adds	r5, #1
 8001f6a:	e7c4      	b.n	8001ef6 <_printf_common+0x3e>
 8001f6c:	2030      	movs	r0, #48	; 0x30
 8001f6e:	18e1      	adds	r1, r4, r3
 8001f70:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001f74:	1c5a      	adds	r2, r3, #1
 8001f76:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001f7a:	4422      	add	r2, r4
 8001f7c:	3302      	adds	r3, #2
 8001f7e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001f82:	e7c5      	b.n	8001f10 <_printf_common+0x58>
 8001f84:	2301      	movs	r3, #1
 8001f86:	4622      	mov	r2, r4
 8001f88:	4649      	mov	r1, r9
 8001f8a:	4638      	mov	r0, r7
 8001f8c:	47c0      	blx	r8
 8001f8e:	3001      	adds	r0, #1
 8001f90:	d0e6      	beq.n	8001f60 <_printf_common+0xa8>
 8001f92:	3601      	adds	r6, #1
 8001f94:	e7d9      	b.n	8001f4a <_printf_common+0x92>
	...

08001f98 <_printf_i>:
 8001f98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001f9c:	460c      	mov	r4, r1
 8001f9e:	7e27      	ldrb	r7, [r4, #24]
 8001fa0:	4691      	mov	r9, r2
 8001fa2:	2f78      	cmp	r7, #120	; 0x78
 8001fa4:	4680      	mov	r8, r0
 8001fa6:	469a      	mov	sl, r3
 8001fa8:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001faa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001fae:	d807      	bhi.n	8001fc0 <_printf_i+0x28>
 8001fb0:	2f62      	cmp	r7, #98	; 0x62
 8001fb2:	d80a      	bhi.n	8001fca <_printf_i+0x32>
 8001fb4:	2f00      	cmp	r7, #0
 8001fb6:	f000 80d9 	beq.w	800216c <_printf_i+0x1d4>
 8001fba:	2f58      	cmp	r7, #88	; 0x58
 8001fbc:	f000 80a4 	beq.w	8002108 <_printf_i+0x170>
 8001fc0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001fc4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001fc8:	e03a      	b.n	8002040 <_printf_i+0xa8>
 8001fca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001fce:	2b15      	cmp	r3, #21
 8001fd0:	d8f6      	bhi.n	8001fc0 <_printf_i+0x28>
 8001fd2:	a001      	add	r0, pc, #4	; (adr r0, 8001fd8 <_printf_i+0x40>)
 8001fd4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8001fd8:	08002031 	.word	0x08002031
 8001fdc:	08002045 	.word	0x08002045
 8001fe0:	08001fc1 	.word	0x08001fc1
 8001fe4:	08001fc1 	.word	0x08001fc1
 8001fe8:	08001fc1 	.word	0x08001fc1
 8001fec:	08001fc1 	.word	0x08001fc1
 8001ff0:	08002045 	.word	0x08002045
 8001ff4:	08001fc1 	.word	0x08001fc1
 8001ff8:	08001fc1 	.word	0x08001fc1
 8001ffc:	08001fc1 	.word	0x08001fc1
 8002000:	08001fc1 	.word	0x08001fc1
 8002004:	08002153 	.word	0x08002153
 8002008:	08002075 	.word	0x08002075
 800200c:	08002135 	.word	0x08002135
 8002010:	08001fc1 	.word	0x08001fc1
 8002014:	08001fc1 	.word	0x08001fc1
 8002018:	08002175 	.word	0x08002175
 800201c:	08001fc1 	.word	0x08001fc1
 8002020:	08002075 	.word	0x08002075
 8002024:	08001fc1 	.word	0x08001fc1
 8002028:	08001fc1 	.word	0x08001fc1
 800202c:	0800213d 	.word	0x0800213d
 8002030:	680b      	ldr	r3, [r1, #0]
 8002032:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002036:	1d1a      	adds	r2, r3, #4
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	600a      	str	r2, [r1, #0]
 800203c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002040:	2301      	movs	r3, #1
 8002042:	e0a4      	b.n	800218e <_printf_i+0x1f6>
 8002044:	6825      	ldr	r5, [r4, #0]
 8002046:	6808      	ldr	r0, [r1, #0]
 8002048:	062e      	lsls	r6, r5, #24
 800204a:	f100 0304 	add.w	r3, r0, #4
 800204e:	d50a      	bpl.n	8002066 <_printf_i+0xce>
 8002050:	6805      	ldr	r5, [r0, #0]
 8002052:	600b      	str	r3, [r1, #0]
 8002054:	2d00      	cmp	r5, #0
 8002056:	da03      	bge.n	8002060 <_printf_i+0xc8>
 8002058:	232d      	movs	r3, #45	; 0x2d
 800205a:	426d      	negs	r5, r5
 800205c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002060:	230a      	movs	r3, #10
 8002062:	485e      	ldr	r0, [pc, #376]	; (80021dc <_printf_i+0x244>)
 8002064:	e019      	b.n	800209a <_printf_i+0x102>
 8002066:	f015 0f40 	tst.w	r5, #64	; 0x40
 800206a:	6805      	ldr	r5, [r0, #0]
 800206c:	600b      	str	r3, [r1, #0]
 800206e:	bf18      	it	ne
 8002070:	b22d      	sxthne	r5, r5
 8002072:	e7ef      	b.n	8002054 <_printf_i+0xbc>
 8002074:	680b      	ldr	r3, [r1, #0]
 8002076:	6825      	ldr	r5, [r4, #0]
 8002078:	1d18      	adds	r0, r3, #4
 800207a:	6008      	str	r0, [r1, #0]
 800207c:	0628      	lsls	r0, r5, #24
 800207e:	d501      	bpl.n	8002084 <_printf_i+0xec>
 8002080:	681d      	ldr	r5, [r3, #0]
 8002082:	e002      	b.n	800208a <_printf_i+0xf2>
 8002084:	0669      	lsls	r1, r5, #25
 8002086:	d5fb      	bpl.n	8002080 <_printf_i+0xe8>
 8002088:	881d      	ldrh	r5, [r3, #0]
 800208a:	2f6f      	cmp	r7, #111	; 0x6f
 800208c:	bf0c      	ite	eq
 800208e:	2308      	moveq	r3, #8
 8002090:	230a      	movne	r3, #10
 8002092:	4852      	ldr	r0, [pc, #328]	; (80021dc <_printf_i+0x244>)
 8002094:	2100      	movs	r1, #0
 8002096:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800209a:	6866      	ldr	r6, [r4, #4]
 800209c:	2e00      	cmp	r6, #0
 800209e:	bfa8      	it	ge
 80020a0:	6821      	ldrge	r1, [r4, #0]
 80020a2:	60a6      	str	r6, [r4, #8]
 80020a4:	bfa4      	itt	ge
 80020a6:	f021 0104 	bicge.w	r1, r1, #4
 80020aa:	6021      	strge	r1, [r4, #0]
 80020ac:	b90d      	cbnz	r5, 80020b2 <_printf_i+0x11a>
 80020ae:	2e00      	cmp	r6, #0
 80020b0:	d04d      	beq.n	800214e <_printf_i+0x1b6>
 80020b2:	4616      	mov	r6, r2
 80020b4:	fbb5 f1f3 	udiv	r1, r5, r3
 80020b8:	fb03 5711 	mls	r7, r3, r1, r5
 80020bc:	5dc7      	ldrb	r7, [r0, r7]
 80020be:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80020c2:	462f      	mov	r7, r5
 80020c4:	42bb      	cmp	r3, r7
 80020c6:	460d      	mov	r5, r1
 80020c8:	d9f4      	bls.n	80020b4 <_printf_i+0x11c>
 80020ca:	2b08      	cmp	r3, #8
 80020cc:	d10b      	bne.n	80020e6 <_printf_i+0x14e>
 80020ce:	6823      	ldr	r3, [r4, #0]
 80020d0:	07df      	lsls	r7, r3, #31
 80020d2:	d508      	bpl.n	80020e6 <_printf_i+0x14e>
 80020d4:	6923      	ldr	r3, [r4, #16]
 80020d6:	6861      	ldr	r1, [r4, #4]
 80020d8:	4299      	cmp	r1, r3
 80020da:	bfde      	ittt	le
 80020dc:	2330      	movle	r3, #48	; 0x30
 80020de:	f806 3c01 	strble.w	r3, [r6, #-1]
 80020e2:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80020e6:	1b92      	subs	r2, r2, r6
 80020e8:	6122      	str	r2, [r4, #16]
 80020ea:	464b      	mov	r3, r9
 80020ec:	4621      	mov	r1, r4
 80020ee:	4640      	mov	r0, r8
 80020f0:	f8cd a000 	str.w	sl, [sp]
 80020f4:	aa03      	add	r2, sp, #12
 80020f6:	f7ff fedf 	bl	8001eb8 <_printf_common>
 80020fa:	3001      	adds	r0, #1
 80020fc:	d14c      	bne.n	8002198 <_printf_i+0x200>
 80020fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002102:	b004      	add	sp, #16
 8002104:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002108:	4834      	ldr	r0, [pc, #208]	; (80021dc <_printf_i+0x244>)
 800210a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800210e:	680e      	ldr	r6, [r1, #0]
 8002110:	6823      	ldr	r3, [r4, #0]
 8002112:	f856 5b04 	ldr.w	r5, [r6], #4
 8002116:	061f      	lsls	r7, r3, #24
 8002118:	600e      	str	r6, [r1, #0]
 800211a:	d514      	bpl.n	8002146 <_printf_i+0x1ae>
 800211c:	07d9      	lsls	r1, r3, #31
 800211e:	bf44      	itt	mi
 8002120:	f043 0320 	orrmi.w	r3, r3, #32
 8002124:	6023      	strmi	r3, [r4, #0]
 8002126:	b91d      	cbnz	r5, 8002130 <_printf_i+0x198>
 8002128:	6823      	ldr	r3, [r4, #0]
 800212a:	f023 0320 	bic.w	r3, r3, #32
 800212e:	6023      	str	r3, [r4, #0]
 8002130:	2310      	movs	r3, #16
 8002132:	e7af      	b.n	8002094 <_printf_i+0xfc>
 8002134:	6823      	ldr	r3, [r4, #0]
 8002136:	f043 0320 	orr.w	r3, r3, #32
 800213a:	6023      	str	r3, [r4, #0]
 800213c:	2378      	movs	r3, #120	; 0x78
 800213e:	4828      	ldr	r0, [pc, #160]	; (80021e0 <_printf_i+0x248>)
 8002140:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002144:	e7e3      	b.n	800210e <_printf_i+0x176>
 8002146:	065e      	lsls	r6, r3, #25
 8002148:	bf48      	it	mi
 800214a:	b2ad      	uxthmi	r5, r5
 800214c:	e7e6      	b.n	800211c <_printf_i+0x184>
 800214e:	4616      	mov	r6, r2
 8002150:	e7bb      	b.n	80020ca <_printf_i+0x132>
 8002152:	680b      	ldr	r3, [r1, #0]
 8002154:	6826      	ldr	r6, [r4, #0]
 8002156:	1d1d      	adds	r5, r3, #4
 8002158:	6960      	ldr	r0, [r4, #20]
 800215a:	600d      	str	r5, [r1, #0]
 800215c:	0635      	lsls	r5, r6, #24
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	d501      	bpl.n	8002166 <_printf_i+0x1ce>
 8002162:	6018      	str	r0, [r3, #0]
 8002164:	e002      	b.n	800216c <_printf_i+0x1d4>
 8002166:	0671      	lsls	r1, r6, #25
 8002168:	d5fb      	bpl.n	8002162 <_printf_i+0x1ca>
 800216a:	8018      	strh	r0, [r3, #0]
 800216c:	2300      	movs	r3, #0
 800216e:	4616      	mov	r6, r2
 8002170:	6123      	str	r3, [r4, #16]
 8002172:	e7ba      	b.n	80020ea <_printf_i+0x152>
 8002174:	680b      	ldr	r3, [r1, #0]
 8002176:	1d1a      	adds	r2, r3, #4
 8002178:	600a      	str	r2, [r1, #0]
 800217a:	681e      	ldr	r6, [r3, #0]
 800217c:	2100      	movs	r1, #0
 800217e:	4630      	mov	r0, r6
 8002180:	6862      	ldr	r2, [r4, #4]
 8002182:	f000 f82f 	bl	80021e4 <memchr>
 8002186:	b108      	cbz	r0, 800218c <_printf_i+0x1f4>
 8002188:	1b80      	subs	r0, r0, r6
 800218a:	6060      	str	r0, [r4, #4]
 800218c:	6863      	ldr	r3, [r4, #4]
 800218e:	6123      	str	r3, [r4, #16]
 8002190:	2300      	movs	r3, #0
 8002192:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002196:	e7a8      	b.n	80020ea <_printf_i+0x152>
 8002198:	4632      	mov	r2, r6
 800219a:	4649      	mov	r1, r9
 800219c:	4640      	mov	r0, r8
 800219e:	6923      	ldr	r3, [r4, #16]
 80021a0:	47d0      	blx	sl
 80021a2:	3001      	adds	r0, #1
 80021a4:	d0ab      	beq.n	80020fe <_printf_i+0x166>
 80021a6:	6823      	ldr	r3, [r4, #0]
 80021a8:	079b      	lsls	r3, r3, #30
 80021aa:	d413      	bmi.n	80021d4 <_printf_i+0x23c>
 80021ac:	68e0      	ldr	r0, [r4, #12]
 80021ae:	9b03      	ldr	r3, [sp, #12]
 80021b0:	4298      	cmp	r0, r3
 80021b2:	bfb8      	it	lt
 80021b4:	4618      	movlt	r0, r3
 80021b6:	e7a4      	b.n	8002102 <_printf_i+0x16a>
 80021b8:	2301      	movs	r3, #1
 80021ba:	4632      	mov	r2, r6
 80021bc:	4649      	mov	r1, r9
 80021be:	4640      	mov	r0, r8
 80021c0:	47d0      	blx	sl
 80021c2:	3001      	adds	r0, #1
 80021c4:	d09b      	beq.n	80020fe <_printf_i+0x166>
 80021c6:	3501      	adds	r5, #1
 80021c8:	68e3      	ldr	r3, [r4, #12]
 80021ca:	9903      	ldr	r1, [sp, #12]
 80021cc:	1a5b      	subs	r3, r3, r1
 80021ce:	42ab      	cmp	r3, r5
 80021d0:	dcf2      	bgt.n	80021b8 <_printf_i+0x220>
 80021d2:	e7eb      	b.n	80021ac <_printf_i+0x214>
 80021d4:	2500      	movs	r5, #0
 80021d6:	f104 0619 	add.w	r6, r4, #25
 80021da:	e7f5      	b.n	80021c8 <_printf_i+0x230>
 80021dc:	080024d1 	.word	0x080024d1
 80021e0:	080024e2 	.word	0x080024e2

080021e4 <memchr>:
 80021e4:	4603      	mov	r3, r0
 80021e6:	b510      	push	{r4, lr}
 80021e8:	b2c9      	uxtb	r1, r1
 80021ea:	4402      	add	r2, r0
 80021ec:	4293      	cmp	r3, r2
 80021ee:	4618      	mov	r0, r3
 80021f0:	d101      	bne.n	80021f6 <memchr+0x12>
 80021f2:	2000      	movs	r0, #0
 80021f4:	e003      	b.n	80021fe <memchr+0x1a>
 80021f6:	7804      	ldrb	r4, [r0, #0]
 80021f8:	3301      	adds	r3, #1
 80021fa:	428c      	cmp	r4, r1
 80021fc:	d1f6      	bne.n	80021ec <memchr+0x8>
 80021fe:	bd10      	pop	{r4, pc}

08002200 <memcpy>:
 8002200:	440a      	add	r2, r1
 8002202:	4291      	cmp	r1, r2
 8002204:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8002208:	d100      	bne.n	800220c <memcpy+0xc>
 800220a:	4770      	bx	lr
 800220c:	b510      	push	{r4, lr}
 800220e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002212:	4291      	cmp	r1, r2
 8002214:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002218:	d1f9      	bne.n	800220e <memcpy+0xe>
 800221a:	bd10      	pop	{r4, pc}

0800221c <memmove>:
 800221c:	4288      	cmp	r0, r1
 800221e:	b510      	push	{r4, lr}
 8002220:	eb01 0402 	add.w	r4, r1, r2
 8002224:	d902      	bls.n	800222c <memmove+0x10>
 8002226:	4284      	cmp	r4, r0
 8002228:	4623      	mov	r3, r4
 800222a:	d807      	bhi.n	800223c <memmove+0x20>
 800222c:	1e43      	subs	r3, r0, #1
 800222e:	42a1      	cmp	r1, r4
 8002230:	d008      	beq.n	8002244 <memmove+0x28>
 8002232:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002236:	f803 2f01 	strb.w	r2, [r3, #1]!
 800223a:	e7f8      	b.n	800222e <memmove+0x12>
 800223c:	4601      	mov	r1, r0
 800223e:	4402      	add	r2, r0
 8002240:	428a      	cmp	r2, r1
 8002242:	d100      	bne.n	8002246 <memmove+0x2a>
 8002244:	bd10      	pop	{r4, pc}
 8002246:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800224a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800224e:	e7f7      	b.n	8002240 <memmove+0x24>

08002250 <_free_r>:
 8002250:	b538      	push	{r3, r4, r5, lr}
 8002252:	4605      	mov	r5, r0
 8002254:	2900      	cmp	r1, #0
 8002256:	d043      	beq.n	80022e0 <_free_r+0x90>
 8002258:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800225c:	1f0c      	subs	r4, r1, #4
 800225e:	2b00      	cmp	r3, #0
 8002260:	bfb8      	it	lt
 8002262:	18e4      	addlt	r4, r4, r3
 8002264:	f000 f8d0 	bl	8002408 <__malloc_lock>
 8002268:	4a1e      	ldr	r2, [pc, #120]	; (80022e4 <_free_r+0x94>)
 800226a:	6813      	ldr	r3, [r2, #0]
 800226c:	4610      	mov	r0, r2
 800226e:	b933      	cbnz	r3, 800227e <_free_r+0x2e>
 8002270:	6063      	str	r3, [r4, #4]
 8002272:	6014      	str	r4, [r2, #0]
 8002274:	4628      	mov	r0, r5
 8002276:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800227a:	f000 b8cb 	b.w	8002414 <__malloc_unlock>
 800227e:	42a3      	cmp	r3, r4
 8002280:	d90a      	bls.n	8002298 <_free_r+0x48>
 8002282:	6821      	ldr	r1, [r4, #0]
 8002284:	1862      	adds	r2, r4, r1
 8002286:	4293      	cmp	r3, r2
 8002288:	bf01      	itttt	eq
 800228a:	681a      	ldreq	r2, [r3, #0]
 800228c:	685b      	ldreq	r3, [r3, #4]
 800228e:	1852      	addeq	r2, r2, r1
 8002290:	6022      	streq	r2, [r4, #0]
 8002292:	6063      	str	r3, [r4, #4]
 8002294:	6004      	str	r4, [r0, #0]
 8002296:	e7ed      	b.n	8002274 <_free_r+0x24>
 8002298:	461a      	mov	r2, r3
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	b10b      	cbz	r3, 80022a2 <_free_r+0x52>
 800229e:	42a3      	cmp	r3, r4
 80022a0:	d9fa      	bls.n	8002298 <_free_r+0x48>
 80022a2:	6811      	ldr	r1, [r2, #0]
 80022a4:	1850      	adds	r0, r2, r1
 80022a6:	42a0      	cmp	r0, r4
 80022a8:	d10b      	bne.n	80022c2 <_free_r+0x72>
 80022aa:	6820      	ldr	r0, [r4, #0]
 80022ac:	4401      	add	r1, r0
 80022ae:	1850      	adds	r0, r2, r1
 80022b0:	4283      	cmp	r3, r0
 80022b2:	6011      	str	r1, [r2, #0]
 80022b4:	d1de      	bne.n	8002274 <_free_r+0x24>
 80022b6:	6818      	ldr	r0, [r3, #0]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	4401      	add	r1, r0
 80022bc:	6011      	str	r1, [r2, #0]
 80022be:	6053      	str	r3, [r2, #4]
 80022c0:	e7d8      	b.n	8002274 <_free_r+0x24>
 80022c2:	d902      	bls.n	80022ca <_free_r+0x7a>
 80022c4:	230c      	movs	r3, #12
 80022c6:	602b      	str	r3, [r5, #0]
 80022c8:	e7d4      	b.n	8002274 <_free_r+0x24>
 80022ca:	6820      	ldr	r0, [r4, #0]
 80022cc:	1821      	adds	r1, r4, r0
 80022ce:	428b      	cmp	r3, r1
 80022d0:	bf01      	itttt	eq
 80022d2:	6819      	ldreq	r1, [r3, #0]
 80022d4:	685b      	ldreq	r3, [r3, #4]
 80022d6:	1809      	addeq	r1, r1, r0
 80022d8:	6021      	streq	r1, [r4, #0]
 80022da:	6063      	str	r3, [r4, #4]
 80022dc:	6054      	str	r4, [r2, #4]
 80022de:	e7c9      	b.n	8002274 <_free_r+0x24>
 80022e0:	bd38      	pop	{r3, r4, r5, pc}
 80022e2:	bf00      	nop
 80022e4:	20000090 	.word	0x20000090

080022e8 <_malloc_r>:
 80022e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022ea:	1ccd      	adds	r5, r1, #3
 80022ec:	f025 0503 	bic.w	r5, r5, #3
 80022f0:	3508      	adds	r5, #8
 80022f2:	2d0c      	cmp	r5, #12
 80022f4:	bf38      	it	cc
 80022f6:	250c      	movcc	r5, #12
 80022f8:	2d00      	cmp	r5, #0
 80022fa:	4606      	mov	r6, r0
 80022fc:	db01      	blt.n	8002302 <_malloc_r+0x1a>
 80022fe:	42a9      	cmp	r1, r5
 8002300:	d903      	bls.n	800230a <_malloc_r+0x22>
 8002302:	230c      	movs	r3, #12
 8002304:	6033      	str	r3, [r6, #0]
 8002306:	2000      	movs	r0, #0
 8002308:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800230a:	f000 f87d 	bl	8002408 <__malloc_lock>
 800230e:	4921      	ldr	r1, [pc, #132]	; (8002394 <_malloc_r+0xac>)
 8002310:	680a      	ldr	r2, [r1, #0]
 8002312:	4614      	mov	r4, r2
 8002314:	b99c      	cbnz	r4, 800233e <_malloc_r+0x56>
 8002316:	4f20      	ldr	r7, [pc, #128]	; (8002398 <_malloc_r+0xb0>)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	b923      	cbnz	r3, 8002326 <_malloc_r+0x3e>
 800231c:	4621      	mov	r1, r4
 800231e:	4630      	mov	r0, r6
 8002320:	f000 f862 	bl	80023e8 <_sbrk_r>
 8002324:	6038      	str	r0, [r7, #0]
 8002326:	4629      	mov	r1, r5
 8002328:	4630      	mov	r0, r6
 800232a:	f000 f85d 	bl	80023e8 <_sbrk_r>
 800232e:	1c43      	adds	r3, r0, #1
 8002330:	d123      	bne.n	800237a <_malloc_r+0x92>
 8002332:	230c      	movs	r3, #12
 8002334:	4630      	mov	r0, r6
 8002336:	6033      	str	r3, [r6, #0]
 8002338:	f000 f86c 	bl	8002414 <__malloc_unlock>
 800233c:	e7e3      	b.n	8002306 <_malloc_r+0x1e>
 800233e:	6823      	ldr	r3, [r4, #0]
 8002340:	1b5b      	subs	r3, r3, r5
 8002342:	d417      	bmi.n	8002374 <_malloc_r+0x8c>
 8002344:	2b0b      	cmp	r3, #11
 8002346:	d903      	bls.n	8002350 <_malloc_r+0x68>
 8002348:	6023      	str	r3, [r4, #0]
 800234a:	441c      	add	r4, r3
 800234c:	6025      	str	r5, [r4, #0]
 800234e:	e004      	b.n	800235a <_malloc_r+0x72>
 8002350:	6863      	ldr	r3, [r4, #4]
 8002352:	42a2      	cmp	r2, r4
 8002354:	bf0c      	ite	eq
 8002356:	600b      	streq	r3, [r1, #0]
 8002358:	6053      	strne	r3, [r2, #4]
 800235a:	4630      	mov	r0, r6
 800235c:	f000 f85a 	bl	8002414 <__malloc_unlock>
 8002360:	f104 000b 	add.w	r0, r4, #11
 8002364:	1d23      	adds	r3, r4, #4
 8002366:	f020 0007 	bic.w	r0, r0, #7
 800236a:	1ac2      	subs	r2, r0, r3
 800236c:	d0cc      	beq.n	8002308 <_malloc_r+0x20>
 800236e:	1a1b      	subs	r3, r3, r0
 8002370:	50a3      	str	r3, [r4, r2]
 8002372:	e7c9      	b.n	8002308 <_malloc_r+0x20>
 8002374:	4622      	mov	r2, r4
 8002376:	6864      	ldr	r4, [r4, #4]
 8002378:	e7cc      	b.n	8002314 <_malloc_r+0x2c>
 800237a:	1cc4      	adds	r4, r0, #3
 800237c:	f024 0403 	bic.w	r4, r4, #3
 8002380:	42a0      	cmp	r0, r4
 8002382:	d0e3      	beq.n	800234c <_malloc_r+0x64>
 8002384:	1a21      	subs	r1, r4, r0
 8002386:	4630      	mov	r0, r6
 8002388:	f000 f82e 	bl	80023e8 <_sbrk_r>
 800238c:	3001      	adds	r0, #1
 800238e:	d1dd      	bne.n	800234c <_malloc_r+0x64>
 8002390:	e7cf      	b.n	8002332 <_malloc_r+0x4a>
 8002392:	bf00      	nop
 8002394:	20000090 	.word	0x20000090
 8002398:	20000094 	.word	0x20000094

0800239c <_realloc_r>:
 800239c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800239e:	4607      	mov	r7, r0
 80023a0:	4614      	mov	r4, r2
 80023a2:	460e      	mov	r6, r1
 80023a4:	b921      	cbnz	r1, 80023b0 <_realloc_r+0x14>
 80023a6:	4611      	mov	r1, r2
 80023a8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80023ac:	f7ff bf9c 	b.w	80022e8 <_malloc_r>
 80023b0:	b922      	cbnz	r2, 80023bc <_realloc_r+0x20>
 80023b2:	f7ff ff4d 	bl	8002250 <_free_r>
 80023b6:	4625      	mov	r5, r4
 80023b8:	4628      	mov	r0, r5
 80023ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80023bc:	f000 f830 	bl	8002420 <_malloc_usable_size_r>
 80023c0:	42a0      	cmp	r0, r4
 80023c2:	d20f      	bcs.n	80023e4 <_realloc_r+0x48>
 80023c4:	4621      	mov	r1, r4
 80023c6:	4638      	mov	r0, r7
 80023c8:	f7ff ff8e 	bl	80022e8 <_malloc_r>
 80023cc:	4605      	mov	r5, r0
 80023ce:	2800      	cmp	r0, #0
 80023d0:	d0f2      	beq.n	80023b8 <_realloc_r+0x1c>
 80023d2:	4631      	mov	r1, r6
 80023d4:	4622      	mov	r2, r4
 80023d6:	f7ff ff13 	bl	8002200 <memcpy>
 80023da:	4631      	mov	r1, r6
 80023dc:	4638      	mov	r0, r7
 80023de:	f7ff ff37 	bl	8002250 <_free_r>
 80023e2:	e7e9      	b.n	80023b8 <_realloc_r+0x1c>
 80023e4:	4635      	mov	r5, r6
 80023e6:	e7e7      	b.n	80023b8 <_realloc_r+0x1c>

080023e8 <_sbrk_r>:
 80023e8:	b538      	push	{r3, r4, r5, lr}
 80023ea:	2300      	movs	r3, #0
 80023ec:	4d05      	ldr	r5, [pc, #20]	; (8002404 <_sbrk_r+0x1c>)
 80023ee:	4604      	mov	r4, r0
 80023f0:	4608      	mov	r0, r1
 80023f2:	602b      	str	r3, [r5, #0]
 80023f4:	f7fe fc4a 	bl	8000c8c <_sbrk>
 80023f8:	1c43      	adds	r3, r0, #1
 80023fa:	d102      	bne.n	8002402 <_sbrk_r+0x1a>
 80023fc:	682b      	ldr	r3, [r5, #0]
 80023fe:	b103      	cbz	r3, 8002402 <_sbrk_r+0x1a>
 8002400:	6023      	str	r3, [r4, #0]
 8002402:	bd38      	pop	{r3, r4, r5, pc}
 8002404:	2000009c 	.word	0x2000009c

08002408 <__malloc_lock>:
 8002408:	4801      	ldr	r0, [pc, #4]	; (8002410 <__malloc_lock+0x8>)
 800240a:	f000 b811 	b.w	8002430 <__retarget_lock_acquire_recursive>
 800240e:	bf00      	nop
 8002410:	200000a4 	.word	0x200000a4

08002414 <__malloc_unlock>:
 8002414:	4801      	ldr	r0, [pc, #4]	; (800241c <__malloc_unlock+0x8>)
 8002416:	f000 b80c 	b.w	8002432 <__retarget_lock_release_recursive>
 800241a:	bf00      	nop
 800241c:	200000a4 	.word	0x200000a4

08002420 <_malloc_usable_size_r>:
 8002420:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002424:	1f18      	subs	r0, r3, #4
 8002426:	2b00      	cmp	r3, #0
 8002428:	bfbc      	itt	lt
 800242a:	580b      	ldrlt	r3, [r1, r0]
 800242c:	18c0      	addlt	r0, r0, r3
 800242e:	4770      	bx	lr

08002430 <__retarget_lock_acquire_recursive>:
 8002430:	4770      	bx	lr

08002432 <__retarget_lock_release_recursive>:
 8002432:	4770      	bx	lr

08002434 <_init>:
 8002434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002436:	bf00      	nop
 8002438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800243a:	bc08      	pop	{r3}
 800243c:	469e      	mov	lr, r3
 800243e:	4770      	bx	lr

08002440 <_fini>:
 8002440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002442:	bf00      	nop
 8002444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002446:	bc08      	pop	{r3}
 8002448:	469e      	mov	lr, r3
 800244a:	4770      	bx	lr
