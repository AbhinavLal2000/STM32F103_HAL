
F103_HAL_Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002748  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08002854  08002854  00012854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002940  08002940  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002940  08002940  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002940  08002940  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002940  08002940  00012940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002944  08002944  00012944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002948  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000080  20000070  080029b8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f0  080029b8  000200f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000738e  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016f5  00000000  00000000  00027427  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006c0  00000000  00000000  00028b20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000638  00000000  00000000  000291e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a18  00000000  00000000  00029818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006df5  00000000  00000000  00041230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083834  00000000  00000000  00048025  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cb859  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000021f8  00000000  00000000  000cb8ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	0800283c 	.word	0x0800283c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	0800283c 	.word	0x0800283c

0800014c <__io_putchar>:
#ifdef __GNUC__
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000154:	1d39      	adds	r1, r7, #4
 8000156:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800015a:	2201      	movs	r2, #1
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <__io_putchar+0x20>)
 800015e:	f001 f9fa 	bl	8001556 <HAL_UART_Transmit>
	return ch;
 8000162:	687b      	ldr	r3, [r7, #4]
}
 8000164:	4618      	mov	r0, r3
 8000166:	3708      	adds	r7, #8
 8000168:	46bd      	mov	sp, r7
 800016a:	bd80      	pop	{r7, pc}
 800016c:	20000098 	.word	0x20000098

08000170 <goto_application>:

void goto_application(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 8000176:	2201      	movs	r2, #1
 8000178:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800017c:	480a      	ldr	r0, [pc, #40]	; (80001a8 <goto_application+0x38>)
 800017e:	f000 fd51 	bl	8000c24 <HAL_GPIO_WritePin>
	printf("Loading application...\r\n");
 8000182:	480a      	ldr	r0, [pc, #40]	; (80001ac <goto_application+0x3c>)
 8000184:	f001 fc0a 	bl	800199c <puts>
	void (*app_reset_handler)(void) = (void*)(*((volatile uint32_t*) (0x08010000 + 4U)));
 8000188:	4b09      	ldr	r3, [pc, #36]	; (80001b0 <goto_application+0x40>)
 800018a:	681b      	ldr	r3, [r3, #0]
 800018c:	607b      	str	r3, [r7, #4]
	__set_MSP(*(volatile uint32_t*) 0x08010000);
 800018e:	4b09      	ldr	r3, [pc, #36]	; (80001b4 <goto_application+0x44>)
 8000190:	681b      	ldr	r3, [r3, #0]
 8000192:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000194:	683b      	ldr	r3, [r7, #0]
 8000196:	f383 8808 	msr	MSP, r3
}
 800019a:	bf00      	nop
	app_reset_handler();
 800019c:	687b      	ldr	r3, [r7, #4]
 800019e:	4798      	blx	r3
}
 80001a0:	bf00      	nop
 80001a2:	3708      	adds	r7, #8
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bd80      	pop	{r7, pc}
 80001a8:	40011000 	.word	0x40011000
 80001ac:	08002854 	.word	0x08002854
 80001b0:	08010004 	.word	0x08010004
 80001b4:	08010000 	.word	0x08010000

080001b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	b082      	sub	sp, #8
 80001bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001be:	f000 fa43 	bl	8000648 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001c2:	f000 f825 	bl	8000210 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001c6:	f000 f889 	bl	80002dc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80001ca:	f000 f85d 	bl	8000288 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  printf("Bootloader v%d.%d\r\n", BL_V_MAJOR, BL_V_MINOR);
 80001ce:	2200      	movs	r2, #0
 80001d0:	2101      	movs	r1, #1
 80001d2:	480d      	ldr	r0, [pc, #52]	; (8000208 <main+0x50>)
 80001d4:	f001 fb5c 	bl	8001890 <iprintf>
  for(uint8_t i = 0; i < 20; i++)
 80001d8:	2300      	movs	r3, #0
 80001da:	71fb      	strb	r3, [r7, #7]
 80001dc:	e00a      	b.n	80001f4 <main+0x3c>
  {
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80001de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001e2:	480a      	ldr	r0, [pc, #40]	; (800020c <main+0x54>)
 80001e4:	f000 fd36 	bl	8000c54 <HAL_GPIO_TogglePin>
	  HAL_Delay(250);
 80001e8:	20fa      	movs	r0, #250	; 0xfa
 80001ea:	f000 fa8f 	bl	800070c <HAL_Delay>
  for(uint8_t i = 0; i < 20; i++)
 80001ee:	79fb      	ldrb	r3, [r7, #7]
 80001f0:	3301      	adds	r3, #1
 80001f2:	71fb      	strb	r3, [r7, #7]
 80001f4:	79fb      	ldrb	r3, [r7, #7]
 80001f6:	2b13      	cmp	r3, #19
 80001f8:	d9f1      	bls.n	80001de <main+0x26>
  }
  HAL_Delay(1000);
 80001fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001fe:	f000 fa85 	bl	800070c <HAL_Delay>
  goto_application();
 8000202:	f7ff ffb5 	bl	8000170 <goto_application>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000206:	e7fe      	b.n	8000206 <main+0x4e>
 8000208:	0800286c 	.word	0x0800286c
 800020c:	40011000 	.word	0x40011000

08000210 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b090      	sub	sp, #64	; 0x40
 8000214:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000216:	f107 0318 	add.w	r3, r7, #24
 800021a:	2228      	movs	r2, #40	; 0x28
 800021c:	2100      	movs	r1, #0
 800021e:	4618      	mov	r0, r3
 8000220:	f001 fb2e 	bl	8001880 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000224:	1d3b      	adds	r3, r7, #4
 8000226:	2200      	movs	r2, #0
 8000228:	601a      	str	r2, [r3, #0]
 800022a:	605a      	str	r2, [r3, #4]
 800022c:	609a      	str	r2, [r3, #8]
 800022e:	60da      	str	r2, [r3, #12]
 8000230:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000232:	2302      	movs	r3, #2
 8000234:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000236:	2301      	movs	r3, #1
 8000238:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800023a:	2310      	movs	r3, #16
 800023c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800023e:	2300      	movs	r3, #0
 8000240:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000242:	f107 0318 	add.w	r3, r7, #24
 8000246:	4618      	mov	r0, r3
 8000248:	f000 fd1e 	bl	8000c88 <HAL_RCC_OscConfig>
 800024c:	4603      	mov	r3, r0
 800024e:	2b00      	cmp	r3, #0
 8000250:	d001      	beq.n	8000256 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000252:	f000 f883 	bl	800035c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000256:	230f      	movs	r3, #15
 8000258:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800025a:	2300      	movs	r3, #0
 800025c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800025e:	2300      	movs	r3, #0
 8000260:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000262:	2300      	movs	r3, #0
 8000264:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000266:	2300      	movs	r3, #0
 8000268:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800026a:	1d3b      	adds	r3, r7, #4
 800026c:	2100      	movs	r1, #0
 800026e:	4618      	mov	r0, r3
 8000270:	f000 ff8a 	bl	8001188 <HAL_RCC_ClockConfig>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d001      	beq.n	800027e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800027a:	f000 f86f 	bl	800035c <Error_Handler>
  }
}
 800027e:	bf00      	nop
 8000280:	3740      	adds	r7, #64	; 0x40
 8000282:	46bd      	mov	sp, r7
 8000284:	bd80      	pop	{r7, pc}
	...

08000288 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800028c:	4b11      	ldr	r3, [pc, #68]	; (80002d4 <MX_USART1_UART_Init+0x4c>)
 800028e:	4a12      	ldr	r2, [pc, #72]	; (80002d8 <MX_USART1_UART_Init+0x50>)
 8000290:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000292:	4b10      	ldr	r3, [pc, #64]	; (80002d4 <MX_USART1_UART_Init+0x4c>)
 8000294:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000298:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800029a:	4b0e      	ldr	r3, [pc, #56]	; (80002d4 <MX_USART1_UART_Init+0x4c>)
 800029c:	2200      	movs	r2, #0
 800029e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80002a0:	4b0c      	ldr	r3, [pc, #48]	; (80002d4 <MX_USART1_UART_Init+0x4c>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80002a6:	4b0b      	ldr	r3, [pc, #44]	; (80002d4 <MX_USART1_UART_Init+0x4c>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80002ac:	4b09      	ldr	r3, [pc, #36]	; (80002d4 <MX_USART1_UART_Init+0x4c>)
 80002ae:	220c      	movs	r2, #12
 80002b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002b2:	4b08      	ldr	r3, [pc, #32]	; (80002d4 <MX_USART1_UART_Init+0x4c>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80002b8:	4b06      	ldr	r3, [pc, #24]	; (80002d4 <MX_USART1_UART_Init+0x4c>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80002be:	4805      	ldr	r0, [pc, #20]	; (80002d4 <MX_USART1_UART_Init+0x4c>)
 80002c0:	f001 f8fc 	bl	80014bc <HAL_UART_Init>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d001      	beq.n	80002ce <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80002ca:	f000 f847 	bl	800035c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80002ce:	bf00      	nop
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	bf00      	nop
 80002d4:	20000098 	.word	0x20000098
 80002d8:	40013800 	.word	0x40013800

080002dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b086      	sub	sp, #24
 80002e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002e2:	f107 0308 	add.w	r3, r7, #8
 80002e6:	2200      	movs	r2, #0
 80002e8:	601a      	str	r2, [r3, #0]
 80002ea:	605a      	str	r2, [r3, #4]
 80002ec:	609a      	str	r2, [r3, #8]
 80002ee:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002f0:	4b18      	ldr	r3, [pc, #96]	; (8000354 <MX_GPIO_Init+0x78>)
 80002f2:	699b      	ldr	r3, [r3, #24]
 80002f4:	4a17      	ldr	r2, [pc, #92]	; (8000354 <MX_GPIO_Init+0x78>)
 80002f6:	f043 0310 	orr.w	r3, r3, #16
 80002fa:	6193      	str	r3, [r2, #24]
 80002fc:	4b15      	ldr	r3, [pc, #84]	; (8000354 <MX_GPIO_Init+0x78>)
 80002fe:	699b      	ldr	r3, [r3, #24]
 8000300:	f003 0310 	and.w	r3, r3, #16
 8000304:	607b      	str	r3, [r7, #4]
 8000306:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000308:	4b12      	ldr	r3, [pc, #72]	; (8000354 <MX_GPIO_Init+0x78>)
 800030a:	699b      	ldr	r3, [r3, #24]
 800030c:	4a11      	ldr	r2, [pc, #68]	; (8000354 <MX_GPIO_Init+0x78>)
 800030e:	f043 0304 	orr.w	r3, r3, #4
 8000312:	6193      	str	r3, [r2, #24]
 8000314:	4b0f      	ldr	r3, [pc, #60]	; (8000354 <MX_GPIO_Init+0x78>)
 8000316:	699b      	ldr	r3, [r3, #24]
 8000318:	f003 0304 	and.w	r3, r3, #4
 800031c:	603b      	str	r3, [r7, #0]
 800031e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000320:	2200      	movs	r2, #0
 8000322:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000326:	480c      	ldr	r0, [pc, #48]	; (8000358 <MX_GPIO_Init+0x7c>)
 8000328:	f000 fc7c 	bl	8000c24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800032c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000330:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000332:	2301      	movs	r3, #1
 8000334:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000336:	2300      	movs	r3, #0
 8000338:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800033a:	2302      	movs	r3, #2
 800033c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800033e:	f107 0308 	add.w	r3, r7, #8
 8000342:	4619      	mov	r1, r3
 8000344:	4804      	ldr	r0, [pc, #16]	; (8000358 <MX_GPIO_Init+0x7c>)
 8000346:	f000 fae9 	bl	800091c <HAL_GPIO_Init>

}
 800034a:	bf00      	nop
 800034c:	3718      	adds	r7, #24
 800034e:	46bd      	mov	sp, r7
 8000350:	bd80      	pop	{r7, pc}
 8000352:	bf00      	nop
 8000354:	40021000 	.word	0x40021000
 8000358:	40011000 	.word	0x40011000

0800035c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000360:	b672      	cpsid	i
}
 8000362:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000364:	e7fe      	b.n	8000364 <Error_Handler+0x8>
	...

08000368 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000368:	b480      	push	{r7}
 800036a:	b085      	sub	sp, #20
 800036c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800036e:	4b15      	ldr	r3, [pc, #84]	; (80003c4 <HAL_MspInit+0x5c>)
 8000370:	699b      	ldr	r3, [r3, #24]
 8000372:	4a14      	ldr	r2, [pc, #80]	; (80003c4 <HAL_MspInit+0x5c>)
 8000374:	f043 0301 	orr.w	r3, r3, #1
 8000378:	6193      	str	r3, [r2, #24]
 800037a:	4b12      	ldr	r3, [pc, #72]	; (80003c4 <HAL_MspInit+0x5c>)
 800037c:	699b      	ldr	r3, [r3, #24]
 800037e:	f003 0301 	and.w	r3, r3, #1
 8000382:	60bb      	str	r3, [r7, #8]
 8000384:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000386:	4b0f      	ldr	r3, [pc, #60]	; (80003c4 <HAL_MspInit+0x5c>)
 8000388:	69db      	ldr	r3, [r3, #28]
 800038a:	4a0e      	ldr	r2, [pc, #56]	; (80003c4 <HAL_MspInit+0x5c>)
 800038c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000390:	61d3      	str	r3, [r2, #28]
 8000392:	4b0c      	ldr	r3, [pc, #48]	; (80003c4 <HAL_MspInit+0x5c>)
 8000394:	69db      	ldr	r3, [r3, #28]
 8000396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800039a:	607b      	str	r3, [r7, #4]
 800039c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800039e:	4b0a      	ldr	r3, [pc, #40]	; (80003c8 <HAL_MspInit+0x60>)
 80003a0:	685b      	ldr	r3, [r3, #4]
 80003a2:	60fb      	str	r3, [r7, #12]
 80003a4:	68fb      	ldr	r3, [r7, #12]
 80003a6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003aa:	60fb      	str	r3, [r7, #12]
 80003ac:	68fb      	ldr	r3, [r7, #12]
 80003ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003b2:	60fb      	str	r3, [r7, #12]
 80003b4:	4a04      	ldr	r2, [pc, #16]	; (80003c8 <HAL_MspInit+0x60>)
 80003b6:	68fb      	ldr	r3, [r7, #12]
 80003b8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003ba:	bf00      	nop
 80003bc:	3714      	adds	r7, #20
 80003be:	46bd      	mov	sp, r7
 80003c0:	bc80      	pop	{r7}
 80003c2:	4770      	bx	lr
 80003c4:	40021000 	.word	0x40021000
 80003c8:	40010000 	.word	0x40010000

080003cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b088      	sub	sp, #32
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003d4:	f107 0310 	add.w	r3, r7, #16
 80003d8:	2200      	movs	r2, #0
 80003da:	601a      	str	r2, [r3, #0]
 80003dc:	605a      	str	r2, [r3, #4]
 80003de:	609a      	str	r2, [r3, #8]
 80003e0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	4a1c      	ldr	r2, [pc, #112]	; (8000458 <HAL_UART_MspInit+0x8c>)
 80003e8:	4293      	cmp	r3, r2
 80003ea:	d131      	bne.n	8000450 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80003ec:	4b1b      	ldr	r3, [pc, #108]	; (800045c <HAL_UART_MspInit+0x90>)
 80003ee:	699b      	ldr	r3, [r3, #24]
 80003f0:	4a1a      	ldr	r2, [pc, #104]	; (800045c <HAL_UART_MspInit+0x90>)
 80003f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003f6:	6193      	str	r3, [r2, #24]
 80003f8:	4b18      	ldr	r3, [pc, #96]	; (800045c <HAL_UART_MspInit+0x90>)
 80003fa:	699b      	ldr	r3, [r3, #24]
 80003fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000400:	60fb      	str	r3, [r7, #12]
 8000402:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000404:	4b15      	ldr	r3, [pc, #84]	; (800045c <HAL_UART_MspInit+0x90>)
 8000406:	699b      	ldr	r3, [r3, #24]
 8000408:	4a14      	ldr	r2, [pc, #80]	; (800045c <HAL_UART_MspInit+0x90>)
 800040a:	f043 0304 	orr.w	r3, r3, #4
 800040e:	6193      	str	r3, [r2, #24]
 8000410:	4b12      	ldr	r3, [pc, #72]	; (800045c <HAL_UART_MspInit+0x90>)
 8000412:	699b      	ldr	r3, [r3, #24]
 8000414:	f003 0304 	and.w	r3, r3, #4
 8000418:	60bb      	str	r3, [r7, #8]
 800041a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800041c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000420:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000422:	2302      	movs	r3, #2
 8000424:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000426:	2303      	movs	r3, #3
 8000428:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800042a:	f107 0310 	add.w	r3, r7, #16
 800042e:	4619      	mov	r1, r3
 8000430:	480b      	ldr	r0, [pc, #44]	; (8000460 <HAL_UART_MspInit+0x94>)
 8000432:	f000 fa73 	bl	800091c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000436:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800043a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800043c:	2300      	movs	r3, #0
 800043e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000440:	2300      	movs	r3, #0
 8000442:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000444:	f107 0310 	add.w	r3, r7, #16
 8000448:	4619      	mov	r1, r3
 800044a:	4805      	ldr	r0, [pc, #20]	; (8000460 <HAL_UART_MspInit+0x94>)
 800044c:	f000 fa66 	bl	800091c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000450:	bf00      	nop
 8000452:	3720      	adds	r7, #32
 8000454:	46bd      	mov	sp, r7
 8000456:	bd80      	pop	{r7, pc}
 8000458:	40013800 	.word	0x40013800
 800045c:	40021000 	.word	0x40021000
 8000460:	40010800 	.word	0x40010800

08000464 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000464:	b480      	push	{r7}
 8000466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000468:	e7fe      	b.n	8000468 <NMI_Handler+0x4>

0800046a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800046a:	b480      	push	{r7}
 800046c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800046e:	e7fe      	b.n	800046e <HardFault_Handler+0x4>

08000470 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000474:	e7fe      	b.n	8000474 <MemManage_Handler+0x4>

08000476 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000476:	b480      	push	{r7}
 8000478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800047a:	e7fe      	b.n	800047a <BusFault_Handler+0x4>

0800047c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000480:	e7fe      	b.n	8000480 <UsageFault_Handler+0x4>

08000482 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000482:	b480      	push	{r7}
 8000484:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000486:	bf00      	nop
 8000488:	46bd      	mov	sp, r7
 800048a:	bc80      	pop	{r7}
 800048c:	4770      	bx	lr

0800048e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800048e:	b480      	push	{r7}
 8000490:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000492:	bf00      	nop
 8000494:	46bd      	mov	sp, r7
 8000496:	bc80      	pop	{r7}
 8000498:	4770      	bx	lr

0800049a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800049a:	b480      	push	{r7}
 800049c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800049e:	bf00      	nop
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bc80      	pop	{r7}
 80004a4:	4770      	bx	lr

080004a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004a6:	b580      	push	{r7, lr}
 80004a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004aa:	f000 f913 	bl	80006d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004ae:	bf00      	nop
 80004b0:	bd80      	pop	{r7, pc}

080004b2 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80004b2:	b580      	push	{r7, lr}
 80004b4:	b086      	sub	sp, #24
 80004b6:	af00      	add	r7, sp, #0
 80004b8:	60f8      	str	r0, [r7, #12]
 80004ba:	60b9      	str	r1, [r7, #8]
 80004bc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004be:	2300      	movs	r3, #0
 80004c0:	617b      	str	r3, [r7, #20]
 80004c2:	e00a      	b.n	80004da <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80004c4:	f3af 8000 	nop.w
 80004c8:	4601      	mov	r1, r0
 80004ca:	68bb      	ldr	r3, [r7, #8]
 80004cc:	1c5a      	adds	r2, r3, #1
 80004ce:	60ba      	str	r2, [r7, #8]
 80004d0:	b2ca      	uxtb	r2, r1
 80004d2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004d4:	697b      	ldr	r3, [r7, #20]
 80004d6:	3301      	adds	r3, #1
 80004d8:	617b      	str	r3, [r7, #20]
 80004da:	697a      	ldr	r2, [r7, #20]
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	429a      	cmp	r2, r3
 80004e0:	dbf0      	blt.n	80004c4 <_read+0x12>
	}

return len;
 80004e2:	687b      	ldr	r3, [r7, #4]
}
 80004e4:	4618      	mov	r0, r3
 80004e6:	3718      	adds	r7, #24
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}

080004ec <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b086      	sub	sp, #24
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	60f8      	str	r0, [r7, #12]
 80004f4:	60b9      	str	r1, [r7, #8]
 80004f6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004f8:	2300      	movs	r3, #0
 80004fa:	617b      	str	r3, [r7, #20]
 80004fc:	e009      	b.n	8000512 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80004fe:	68bb      	ldr	r3, [r7, #8]
 8000500:	1c5a      	adds	r2, r3, #1
 8000502:	60ba      	str	r2, [r7, #8]
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	4618      	mov	r0, r3
 8000508:	f7ff fe20 	bl	800014c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800050c:	697b      	ldr	r3, [r7, #20]
 800050e:	3301      	adds	r3, #1
 8000510:	617b      	str	r3, [r7, #20]
 8000512:	697a      	ldr	r2, [r7, #20]
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	429a      	cmp	r2, r3
 8000518:	dbf1      	blt.n	80004fe <_write+0x12>
	}
	return len;
 800051a:	687b      	ldr	r3, [r7, #4]
}
 800051c:	4618      	mov	r0, r3
 800051e:	3718      	adds	r7, #24
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}

08000524 <_close>:

int _close(int file)
{
 8000524:	b480      	push	{r7}
 8000526:	b083      	sub	sp, #12
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
	return -1;
 800052c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000530:	4618      	mov	r0, r3
 8000532:	370c      	adds	r7, #12
 8000534:	46bd      	mov	sp, r7
 8000536:	bc80      	pop	{r7}
 8000538:	4770      	bx	lr

0800053a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800053a:	b480      	push	{r7}
 800053c:	b083      	sub	sp, #12
 800053e:	af00      	add	r7, sp, #0
 8000540:	6078      	str	r0, [r7, #4]
 8000542:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000544:	683b      	ldr	r3, [r7, #0]
 8000546:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800054a:	605a      	str	r2, [r3, #4]
	return 0;
 800054c:	2300      	movs	r3, #0
}
 800054e:	4618      	mov	r0, r3
 8000550:	370c      	adds	r7, #12
 8000552:	46bd      	mov	sp, r7
 8000554:	bc80      	pop	{r7}
 8000556:	4770      	bx	lr

08000558 <_isatty>:

int _isatty(int file)
{
 8000558:	b480      	push	{r7}
 800055a:	b083      	sub	sp, #12
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
	return 1;
 8000560:	2301      	movs	r3, #1
}
 8000562:	4618      	mov	r0, r3
 8000564:	370c      	adds	r7, #12
 8000566:	46bd      	mov	sp, r7
 8000568:	bc80      	pop	{r7}
 800056a:	4770      	bx	lr

0800056c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800056c:	b480      	push	{r7}
 800056e:	b085      	sub	sp, #20
 8000570:	af00      	add	r7, sp, #0
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	60b9      	str	r1, [r7, #8]
 8000576:	607a      	str	r2, [r7, #4]
	return 0;
 8000578:	2300      	movs	r3, #0
}
 800057a:	4618      	mov	r0, r3
 800057c:	3714      	adds	r7, #20
 800057e:	46bd      	mov	sp, r7
 8000580:	bc80      	pop	{r7}
 8000582:	4770      	bx	lr

08000584 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b086      	sub	sp, #24
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800058c:	4a14      	ldr	r2, [pc, #80]	; (80005e0 <_sbrk+0x5c>)
 800058e:	4b15      	ldr	r3, [pc, #84]	; (80005e4 <_sbrk+0x60>)
 8000590:	1ad3      	subs	r3, r2, r3
 8000592:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000594:	697b      	ldr	r3, [r7, #20]
 8000596:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000598:	4b13      	ldr	r3, [pc, #76]	; (80005e8 <_sbrk+0x64>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d102      	bne.n	80005a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005a0:	4b11      	ldr	r3, [pc, #68]	; (80005e8 <_sbrk+0x64>)
 80005a2:	4a12      	ldr	r2, [pc, #72]	; (80005ec <_sbrk+0x68>)
 80005a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005a6:	4b10      	ldr	r3, [pc, #64]	; (80005e8 <_sbrk+0x64>)
 80005a8:	681a      	ldr	r2, [r3, #0]
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	4413      	add	r3, r2
 80005ae:	693a      	ldr	r2, [r7, #16]
 80005b0:	429a      	cmp	r2, r3
 80005b2:	d207      	bcs.n	80005c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005b4:	f001 f93a 	bl	800182c <__errno>
 80005b8:	4603      	mov	r3, r0
 80005ba:	220c      	movs	r2, #12
 80005bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005c2:	e009      	b.n	80005d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005c4:	4b08      	ldr	r3, [pc, #32]	; (80005e8 <_sbrk+0x64>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005ca:	4b07      	ldr	r3, [pc, #28]	; (80005e8 <_sbrk+0x64>)
 80005cc:	681a      	ldr	r2, [r3, #0]
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	4413      	add	r3, r2
 80005d2:	4a05      	ldr	r2, [pc, #20]	; (80005e8 <_sbrk+0x64>)
 80005d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005d6:	68fb      	ldr	r3, [r7, #12]
}
 80005d8:	4618      	mov	r0, r3
 80005da:	3718      	adds	r7, #24
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	20005000 	.word	0x20005000
 80005e4:	00000400 	.word	0x00000400
 80005e8:	2000008c 	.word	0x2000008c
 80005ec:	200000f0 	.word	0x200000f0

080005f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005f4:	bf00      	nop
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bc80      	pop	{r7}
 80005fa:	4770      	bx	lr

080005fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005fc:	480c      	ldr	r0, [pc, #48]	; (8000630 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80005fe:	490d      	ldr	r1, [pc, #52]	; (8000634 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000600:	4a0d      	ldr	r2, [pc, #52]	; (8000638 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000602:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000604:	e002      	b.n	800060c <LoopCopyDataInit>

08000606 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000606:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000608:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800060a:	3304      	adds	r3, #4

0800060c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800060c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800060e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000610:	d3f9      	bcc.n	8000606 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000612:	4a0a      	ldr	r2, [pc, #40]	; (800063c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000614:	4c0a      	ldr	r4, [pc, #40]	; (8000640 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000616:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000618:	e001      	b.n	800061e <LoopFillZerobss>

0800061a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800061a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800061c:	3204      	adds	r2, #4

0800061e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800061e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000620:	d3fb      	bcc.n	800061a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000622:	f7ff ffe5 	bl	80005f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000626:	f001 f907 	bl	8001838 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800062a:	f7ff fdc5 	bl	80001b8 <main>
  bx lr
 800062e:	4770      	bx	lr
  ldr r0, =_sdata
 8000630:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000634:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000638:	08002948 	.word	0x08002948
  ldr r2, =_sbss
 800063c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000640:	200000f0 	.word	0x200000f0

08000644 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000644:	e7fe      	b.n	8000644 <ADC1_2_IRQHandler>
	...

08000648 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800064c:	4b08      	ldr	r3, [pc, #32]	; (8000670 <HAL_Init+0x28>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a07      	ldr	r2, [pc, #28]	; (8000670 <HAL_Init+0x28>)
 8000652:	f043 0310 	orr.w	r3, r3, #16
 8000656:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000658:	2003      	movs	r0, #3
 800065a:	f000 f92b 	bl	80008b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800065e:	200f      	movs	r0, #15
 8000660:	f000 f808 	bl	8000674 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000664:	f7ff fe80 	bl	8000368 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000668:	2300      	movs	r3, #0
}
 800066a:	4618      	mov	r0, r3
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40022000 	.word	0x40022000

08000674 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800067c:	4b12      	ldr	r3, [pc, #72]	; (80006c8 <HAL_InitTick+0x54>)
 800067e:	681a      	ldr	r2, [r3, #0]
 8000680:	4b12      	ldr	r3, [pc, #72]	; (80006cc <HAL_InitTick+0x58>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	4619      	mov	r1, r3
 8000686:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800068a:	fbb3 f3f1 	udiv	r3, r3, r1
 800068e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000692:	4618      	mov	r0, r3
 8000694:	f000 f935 	bl	8000902 <HAL_SYSTICK_Config>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800069e:	2301      	movs	r3, #1
 80006a0:	e00e      	b.n	80006c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	2b0f      	cmp	r3, #15
 80006a6:	d80a      	bhi.n	80006be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006a8:	2200      	movs	r2, #0
 80006aa:	6879      	ldr	r1, [r7, #4]
 80006ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80006b0:	f000 f90b 	bl	80008ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006b4:	4a06      	ldr	r2, [pc, #24]	; (80006d0 <HAL_InitTick+0x5c>)
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006ba:	2300      	movs	r3, #0
 80006bc:	e000      	b.n	80006c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006be:	2301      	movs	r3, #1
}
 80006c0:	4618      	mov	r0, r3
 80006c2:	3708      	adds	r7, #8
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	20000000 	.word	0x20000000
 80006cc:	20000008 	.word	0x20000008
 80006d0:	20000004 	.word	0x20000004

080006d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006d8:	4b05      	ldr	r3, [pc, #20]	; (80006f0 <HAL_IncTick+0x1c>)
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	461a      	mov	r2, r3
 80006de:	4b05      	ldr	r3, [pc, #20]	; (80006f4 <HAL_IncTick+0x20>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	4413      	add	r3, r2
 80006e4:	4a03      	ldr	r2, [pc, #12]	; (80006f4 <HAL_IncTick+0x20>)
 80006e6:	6013      	str	r3, [r2, #0]
}
 80006e8:	bf00      	nop
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bc80      	pop	{r7}
 80006ee:	4770      	bx	lr
 80006f0:	20000008 	.word	0x20000008
 80006f4:	200000dc 	.word	0x200000dc

080006f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  return uwTick;
 80006fc:	4b02      	ldr	r3, [pc, #8]	; (8000708 <HAL_GetTick+0x10>)
 80006fe:	681b      	ldr	r3, [r3, #0]
}
 8000700:	4618      	mov	r0, r3
 8000702:	46bd      	mov	sp, r7
 8000704:	bc80      	pop	{r7}
 8000706:	4770      	bx	lr
 8000708:	200000dc 	.word	0x200000dc

0800070c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000714:	f7ff fff0 	bl	80006f8 <HAL_GetTick>
 8000718:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000724:	d005      	beq.n	8000732 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000726:	4b0a      	ldr	r3, [pc, #40]	; (8000750 <HAL_Delay+0x44>)
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	461a      	mov	r2, r3
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	4413      	add	r3, r2
 8000730:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000732:	bf00      	nop
 8000734:	f7ff ffe0 	bl	80006f8 <HAL_GetTick>
 8000738:	4602      	mov	r2, r0
 800073a:	68bb      	ldr	r3, [r7, #8]
 800073c:	1ad3      	subs	r3, r2, r3
 800073e:	68fa      	ldr	r2, [r7, #12]
 8000740:	429a      	cmp	r2, r3
 8000742:	d8f7      	bhi.n	8000734 <HAL_Delay+0x28>
  {
  }
}
 8000744:	bf00      	nop
 8000746:	bf00      	nop
 8000748:	3710      	adds	r7, #16
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20000008 	.word	0x20000008

08000754 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000754:	b480      	push	{r7}
 8000756:	b085      	sub	sp, #20
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	f003 0307 	and.w	r3, r3, #7
 8000762:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000764:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <__NVIC_SetPriorityGrouping+0x44>)
 8000766:	68db      	ldr	r3, [r3, #12]
 8000768:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800076a:	68ba      	ldr	r2, [r7, #8]
 800076c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000770:	4013      	ands	r3, r2
 8000772:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000778:	68bb      	ldr	r3, [r7, #8]
 800077a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800077c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000780:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000784:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000786:	4a04      	ldr	r2, [pc, #16]	; (8000798 <__NVIC_SetPriorityGrouping+0x44>)
 8000788:	68bb      	ldr	r3, [r7, #8]
 800078a:	60d3      	str	r3, [r2, #12]
}
 800078c:	bf00      	nop
 800078e:	3714      	adds	r7, #20
 8000790:	46bd      	mov	sp, r7
 8000792:	bc80      	pop	{r7}
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	e000ed00 	.word	0xe000ed00

0800079c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007a0:	4b04      	ldr	r3, [pc, #16]	; (80007b4 <__NVIC_GetPriorityGrouping+0x18>)
 80007a2:	68db      	ldr	r3, [r3, #12]
 80007a4:	0a1b      	lsrs	r3, r3, #8
 80007a6:	f003 0307 	and.w	r3, r3, #7
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bc80      	pop	{r7}
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	e000ed00 	.word	0xe000ed00

080007b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	6039      	str	r1, [r7, #0]
 80007c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	db0a      	blt.n	80007e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	b2da      	uxtb	r2, r3
 80007d0:	490c      	ldr	r1, [pc, #48]	; (8000804 <__NVIC_SetPriority+0x4c>)
 80007d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007d6:	0112      	lsls	r2, r2, #4
 80007d8:	b2d2      	uxtb	r2, r2
 80007da:	440b      	add	r3, r1
 80007dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007e0:	e00a      	b.n	80007f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	b2da      	uxtb	r2, r3
 80007e6:	4908      	ldr	r1, [pc, #32]	; (8000808 <__NVIC_SetPriority+0x50>)
 80007e8:	79fb      	ldrb	r3, [r7, #7]
 80007ea:	f003 030f 	and.w	r3, r3, #15
 80007ee:	3b04      	subs	r3, #4
 80007f0:	0112      	lsls	r2, r2, #4
 80007f2:	b2d2      	uxtb	r2, r2
 80007f4:	440b      	add	r3, r1
 80007f6:	761a      	strb	r2, [r3, #24]
}
 80007f8:	bf00      	nop
 80007fa:	370c      	adds	r7, #12
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bc80      	pop	{r7}
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	e000e100 	.word	0xe000e100
 8000808:	e000ed00 	.word	0xe000ed00

0800080c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800080c:	b480      	push	{r7}
 800080e:	b089      	sub	sp, #36	; 0x24
 8000810:	af00      	add	r7, sp, #0
 8000812:	60f8      	str	r0, [r7, #12]
 8000814:	60b9      	str	r1, [r7, #8]
 8000816:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	f003 0307 	and.w	r3, r3, #7
 800081e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000820:	69fb      	ldr	r3, [r7, #28]
 8000822:	f1c3 0307 	rsb	r3, r3, #7
 8000826:	2b04      	cmp	r3, #4
 8000828:	bf28      	it	cs
 800082a:	2304      	movcs	r3, #4
 800082c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800082e:	69fb      	ldr	r3, [r7, #28]
 8000830:	3304      	adds	r3, #4
 8000832:	2b06      	cmp	r3, #6
 8000834:	d902      	bls.n	800083c <NVIC_EncodePriority+0x30>
 8000836:	69fb      	ldr	r3, [r7, #28]
 8000838:	3b03      	subs	r3, #3
 800083a:	e000      	b.n	800083e <NVIC_EncodePriority+0x32>
 800083c:	2300      	movs	r3, #0
 800083e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000840:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000844:	69bb      	ldr	r3, [r7, #24]
 8000846:	fa02 f303 	lsl.w	r3, r2, r3
 800084a:	43da      	mvns	r2, r3
 800084c:	68bb      	ldr	r3, [r7, #8]
 800084e:	401a      	ands	r2, r3
 8000850:	697b      	ldr	r3, [r7, #20]
 8000852:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000854:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	fa01 f303 	lsl.w	r3, r1, r3
 800085e:	43d9      	mvns	r1, r3
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000864:	4313      	orrs	r3, r2
         );
}
 8000866:	4618      	mov	r0, r3
 8000868:	3724      	adds	r7, #36	; 0x24
 800086a:	46bd      	mov	sp, r7
 800086c:	bc80      	pop	{r7}
 800086e:	4770      	bx	lr

08000870 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	3b01      	subs	r3, #1
 800087c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000880:	d301      	bcc.n	8000886 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000882:	2301      	movs	r3, #1
 8000884:	e00f      	b.n	80008a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000886:	4a0a      	ldr	r2, [pc, #40]	; (80008b0 <SysTick_Config+0x40>)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	3b01      	subs	r3, #1
 800088c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800088e:	210f      	movs	r1, #15
 8000890:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000894:	f7ff ff90 	bl	80007b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000898:	4b05      	ldr	r3, [pc, #20]	; (80008b0 <SysTick_Config+0x40>)
 800089a:	2200      	movs	r2, #0
 800089c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800089e:	4b04      	ldr	r3, [pc, #16]	; (80008b0 <SysTick_Config+0x40>)
 80008a0:	2207      	movs	r2, #7
 80008a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008a4:	2300      	movs	r3, #0
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	3708      	adds	r7, #8
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	e000e010 	.word	0xe000e010

080008b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008bc:	6878      	ldr	r0, [r7, #4]
 80008be:	f7ff ff49 	bl	8000754 <__NVIC_SetPriorityGrouping>
}
 80008c2:	bf00      	nop
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}

080008ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008ca:	b580      	push	{r7, lr}
 80008cc:	b086      	sub	sp, #24
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	4603      	mov	r3, r0
 80008d2:	60b9      	str	r1, [r7, #8]
 80008d4:	607a      	str	r2, [r7, #4]
 80008d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008d8:	2300      	movs	r3, #0
 80008da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008dc:	f7ff ff5e 	bl	800079c <__NVIC_GetPriorityGrouping>
 80008e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008e2:	687a      	ldr	r2, [r7, #4]
 80008e4:	68b9      	ldr	r1, [r7, #8]
 80008e6:	6978      	ldr	r0, [r7, #20]
 80008e8:	f7ff ff90 	bl	800080c <NVIC_EncodePriority>
 80008ec:	4602      	mov	r2, r0
 80008ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008f2:	4611      	mov	r1, r2
 80008f4:	4618      	mov	r0, r3
 80008f6:	f7ff ff5f 	bl	80007b8 <__NVIC_SetPriority>
}
 80008fa:	bf00      	nop
 80008fc:	3718      	adds	r7, #24
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}

08000902 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000902:	b580      	push	{r7, lr}
 8000904:	b082      	sub	sp, #8
 8000906:	af00      	add	r7, sp, #0
 8000908:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800090a:	6878      	ldr	r0, [r7, #4]
 800090c:	f7ff ffb0 	bl	8000870 <SysTick_Config>
 8000910:	4603      	mov	r3, r0
}
 8000912:	4618      	mov	r0, r3
 8000914:	3708      	adds	r7, #8
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
	...

0800091c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800091c:	b480      	push	{r7}
 800091e:	b08b      	sub	sp, #44	; 0x2c
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
 8000924:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000926:	2300      	movs	r3, #0
 8000928:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800092a:	2300      	movs	r3, #0
 800092c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800092e:	e169      	b.n	8000c04 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000930:	2201      	movs	r2, #1
 8000932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000934:	fa02 f303 	lsl.w	r3, r2, r3
 8000938:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	69fa      	ldr	r2, [r7, #28]
 8000940:	4013      	ands	r3, r2
 8000942:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000944:	69ba      	ldr	r2, [r7, #24]
 8000946:	69fb      	ldr	r3, [r7, #28]
 8000948:	429a      	cmp	r2, r3
 800094a:	f040 8158 	bne.w	8000bfe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	685b      	ldr	r3, [r3, #4]
 8000952:	4a9a      	ldr	r2, [pc, #616]	; (8000bbc <HAL_GPIO_Init+0x2a0>)
 8000954:	4293      	cmp	r3, r2
 8000956:	d05e      	beq.n	8000a16 <HAL_GPIO_Init+0xfa>
 8000958:	4a98      	ldr	r2, [pc, #608]	; (8000bbc <HAL_GPIO_Init+0x2a0>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d875      	bhi.n	8000a4a <HAL_GPIO_Init+0x12e>
 800095e:	4a98      	ldr	r2, [pc, #608]	; (8000bc0 <HAL_GPIO_Init+0x2a4>)
 8000960:	4293      	cmp	r3, r2
 8000962:	d058      	beq.n	8000a16 <HAL_GPIO_Init+0xfa>
 8000964:	4a96      	ldr	r2, [pc, #600]	; (8000bc0 <HAL_GPIO_Init+0x2a4>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d86f      	bhi.n	8000a4a <HAL_GPIO_Init+0x12e>
 800096a:	4a96      	ldr	r2, [pc, #600]	; (8000bc4 <HAL_GPIO_Init+0x2a8>)
 800096c:	4293      	cmp	r3, r2
 800096e:	d052      	beq.n	8000a16 <HAL_GPIO_Init+0xfa>
 8000970:	4a94      	ldr	r2, [pc, #592]	; (8000bc4 <HAL_GPIO_Init+0x2a8>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d869      	bhi.n	8000a4a <HAL_GPIO_Init+0x12e>
 8000976:	4a94      	ldr	r2, [pc, #592]	; (8000bc8 <HAL_GPIO_Init+0x2ac>)
 8000978:	4293      	cmp	r3, r2
 800097a:	d04c      	beq.n	8000a16 <HAL_GPIO_Init+0xfa>
 800097c:	4a92      	ldr	r2, [pc, #584]	; (8000bc8 <HAL_GPIO_Init+0x2ac>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d863      	bhi.n	8000a4a <HAL_GPIO_Init+0x12e>
 8000982:	4a92      	ldr	r2, [pc, #584]	; (8000bcc <HAL_GPIO_Init+0x2b0>)
 8000984:	4293      	cmp	r3, r2
 8000986:	d046      	beq.n	8000a16 <HAL_GPIO_Init+0xfa>
 8000988:	4a90      	ldr	r2, [pc, #576]	; (8000bcc <HAL_GPIO_Init+0x2b0>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d85d      	bhi.n	8000a4a <HAL_GPIO_Init+0x12e>
 800098e:	2b12      	cmp	r3, #18
 8000990:	d82a      	bhi.n	80009e8 <HAL_GPIO_Init+0xcc>
 8000992:	2b12      	cmp	r3, #18
 8000994:	d859      	bhi.n	8000a4a <HAL_GPIO_Init+0x12e>
 8000996:	a201      	add	r2, pc, #4	; (adr r2, 800099c <HAL_GPIO_Init+0x80>)
 8000998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800099c:	08000a17 	.word	0x08000a17
 80009a0:	080009f1 	.word	0x080009f1
 80009a4:	08000a03 	.word	0x08000a03
 80009a8:	08000a45 	.word	0x08000a45
 80009ac:	08000a4b 	.word	0x08000a4b
 80009b0:	08000a4b 	.word	0x08000a4b
 80009b4:	08000a4b 	.word	0x08000a4b
 80009b8:	08000a4b 	.word	0x08000a4b
 80009bc:	08000a4b 	.word	0x08000a4b
 80009c0:	08000a4b 	.word	0x08000a4b
 80009c4:	08000a4b 	.word	0x08000a4b
 80009c8:	08000a4b 	.word	0x08000a4b
 80009cc:	08000a4b 	.word	0x08000a4b
 80009d0:	08000a4b 	.word	0x08000a4b
 80009d4:	08000a4b 	.word	0x08000a4b
 80009d8:	08000a4b 	.word	0x08000a4b
 80009dc:	08000a4b 	.word	0x08000a4b
 80009e0:	080009f9 	.word	0x080009f9
 80009e4:	08000a0d 	.word	0x08000a0d
 80009e8:	4a79      	ldr	r2, [pc, #484]	; (8000bd0 <HAL_GPIO_Init+0x2b4>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d013      	beq.n	8000a16 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80009ee:	e02c      	b.n	8000a4a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	68db      	ldr	r3, [r3, #12]
 80009f4:	623b      	str	r3, [r7, #32]
          break;
 80009f6:	e029      	b.n	8000a4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	68db      	ldr	r3, [r3, #12]
 80009fc:	3304      	adds	r3, #4
 80009fe:	623b      	str	r3, [r7, #32]
          break;
 8000a00:	e024      	b.n	8000a4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	68db      	ldr	r3, [r3, #12]
 8000a06:	3308      	adds	r3, #8
 8000a08:	623b      	str	r3, [r7, #32]
          break;
 8000a0a:	e01f      	b.n	8000a4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	68db      	ldr	r3, [r3, #12]
 8000a10:	330c      	adds	r3, #12
 8000a12:	623b      	str	r3, [r7, #32]
          break;
 8000a14:	e01a      	b.n	8000a4c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	689b      	ldr	r3, [r3, #8]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d102      	bne.n	8000a24 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a1e:	2304      	movs	r3, #4
 8000a20:	623b      	str	r3, [r7, #32]
          break;
 8000a22:	e013      	b.n	8000a4c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	689b      	ldr	r3, [r3, #8]
 8000a28:	2b01      	cmp	r3, #1
 8000a2a:	d105      	bne.n	8000a38 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a2c:	2308      	movs	r3, #8
 8000a2e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	69fa      	ldr	r2, [r7, #28]
 8000a34:	611a      	str	r2, [r3, #16]
          break;
 8000a36:	e009      	b.n	8000a4c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a38:	2308      	movs	r3, #8
 8000a3a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	69fa      	ldr	r2, [r7, #28]
 8000a40:	615a      	str	r2, [r3, #20]
          break;
 8000a42:	e003      	b.n	8000a4c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a44:	2300      	movs	r3, #0
 8000a46:	623b      	str	r3, [r7, #32]
          break;
 8000a48:	e000      	b.n	8000a4c <HAL_GPIO_Init+0x130>
          break;
 8000a4a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a4c:	69bb      	ldr	r3, [r7, #24]
 8000a4e:	2bff      	cmp	r3, #255	; 0xff
 8000a50:	d801      	bhi.n	8000a56 <HAL_GPIO_Init+0x13a>
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	e001      	b.n	8000a5a <HAL_GPIO_Init+0x13e>
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	3304      	adds	r3, #4
 8000a5a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a5c:	69bb      	ldr	r3, [r7, #24]
 8000a5e:	2bff      	cmp	r3, #255	; 0xff
 8000a60:	d802      	bhi.n	8000a68 <HAL_GPIO_Init+0x14c>
 8000a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a64:	009b      	lsls	r3, r3, #2
 8000a66:	e002      	b.n	8000a6e <HAL_GPIO_Init+0x152>
 8000a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a6a:	3b08      	subs	r3, #8
 8000a6c:	009b      	lsls	r3, r3, #2
 8000a6e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	681a      	ldr	r2, [r3, #0]
 8000a74:	210f      	movs	r1, #15
 8000a76:	693b      	ldr	r3, [r7, #16]
 8000a78:	fa01 f303 	lsl.w	r3, r1, r3
 8000a7c:	43db      	mvns	r3, r3
 8000a7e:	401a      	ands	r2, r3
 8000a80:	6a39      	ldr	r1, [r7, #32]
 8000a82:	693b      	ldr	r3, [r7, #16]
 8000a84:	fa01 f303 	lsl.w	r3, r1, r3
 8000a88:	431a      	orrs	r2, r3
 8000a8a:	697b      	ldr	r3, [r7, #20]
 8000a8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	f000 80b1 	beq.w	8000bfe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a9c:	4b4d      	ldr	r3, [pc, #308]	; (8000bd4 <HAL_GPIO_Init+0x2b8>)
 8000a9e:	699b      	ldr	r3, [r3, #24]
 8000aa0:	4a4c      	ldr	r2, [pc, #304]	; (8000bd4 <HAL_GPIO_Init+0x2b8>)
 8000aa2:	f043 0301 	orr.w	r3, r3, #1
 8000aa6:	6193      	str	r3, [r2, #24]
 8000aa8:	4b4a      	ldr	r3, [pc, #296]	; (8000bd4 <HAL_GPIO_Init+0x2b8>)
 8000aaa:	699b      	ldr	r3, [r3, #24]
 8000aac:	f003 0301 	and.w	r3, r3, #1
 8000ab0:	60bb      	str	r3, [r7, #8]
 8000ab2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ab4:	4a48      	ldr	r2, [pc, #288]	; (8000bd8 <HAL_GPIO_Init+0x2bc>)
 8000ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ab8:	089b      	lsrs	r3, r3, #2
 8000aba:	3302      	adds	r3, #2
 8000abc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ac0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ac4:	f003 0303 	and.w	r3, r3, #3
 8000ac8:	009b      	lsls	r3, r3, #2
 8000aca:	220f      	movs	r2, #15
 8000acc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad0:	43db      	mvns	r3, r3
 8000ad2:	68fa      	ldr	r2, [r7, #12]
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	4a40      	ldr	r2, [pc, #256]	; (8000bdc <HAL_GPIO_Init+0x2c0>)
 8000adc:	4293      	cmp	r3, r2
 8000ade:	d013      	beq.n	8000b08 <HAL_GPIO_Init+0x1ec>
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	4a3f      	ldr	r2, [pc, #252]	; (8000be0 <HAL_GPIO_Init+0x2c4>)
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	d00d      	beq.n	8000b04 <HAL_GPIO_Init+0x1e8>
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	4a3e      	ldr	r2, [pc, #248]	; (8000be4 <HAL_GPIO_Init+0x2c8>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d007      	beq.n	8000b00 <HAL_GPIO_Init+0x1e4>
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	4a3d      	ldr	r2, [pc, #244]	; (8000be8 <HAL_GPIO_Init+0x2cc>)
 8000af4:	4293      	cmp	r3, r2
 8000af6:	d101      	bne.n	8000afc <HAL_GPIO_Init+0x1e0>
 8000af8:	2303      	movs	r3, #3
 8000afa:	e006      	b.n	8000b0a <HAL_GPIO_Init+0x1ee>
 8000afc:	2304      	movs	r3, #4
 8000afe:	e004      	b.n	8000b0a <HAL_GPIO_Init+0x1ee>
 8000b00:	2302      	movs	r3, #2
 8000b02:	e002      	b.n	8000b0a <HAL_GPIO_Init+0x1ee>
 8000b04:	2301      	movs	r3, #1
 8000b06:	e000      	b.n	8000b0a <HAL_GPIO_Init+0x1ee>
 8000b08:	2300      	movs	r3, #0
 8000b0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b0c:	f002 0203 	and.w	r2, r2, #3
 8000b10:	0092      	lsls	r2, r2, #2
 8000b12:	4093      	lsls	r3, r2
 8000b14:	68fa      	ldr	r2, [r7, #12]
 8000b16:	4313      	orrs	r3, r2
 8000b18:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b1a:	492f      	ldr	r1, [pc, #188]	; (8000bd8 <HAL_GPIO_Init+0x2bc>)
 8000b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b1e:	089b      	lsrs	r3, r3, #2
 8000b20:	3302      	adds	r3, #2
 8000b22:	68fa      	ldr	r2, [r7, #12]
 8000b24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d006      	beq.n	8000b42 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000b34:	4b2d      	ldr	r3, [pc, #180]	; (8000bec <HAL_GPIO_Init+0x2d0>)
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	492c      	ldr	r1, [pc, #176]	; (8000bec <HAL_GPIO_Init+0x2d0>)
 8000b3a:	69bb      	ldr	r3, [r7, #24]
 8000b3c:	4313      	orrs	r3, r2
 8000b3e:	600b      	str	r3, [r1, #0]
 8000b40:	e006      	b.n	8000b50 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b42:	4b2a      	ldr	r3, [pc, #168]	; (8000bec <HAL_GPIO_Init+0x2d0>)
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	69bb      	ldr	r3, [r7, #24]
 8000b48:	43db      	mvns	r3, r3
 8000b4a:	4928      	ldr	r1, [pc, #160]	; (8000bec <HAL_GPIO_Init+0x2d0>)
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	685b      	ldr	r3, [r3, #4]
 8000b54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d006      	beq.n	8000b6a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000b5c:	4b23      	ldr	r3, [pc, #140]	; (8000bec <HAL_GPIO_Init+0x2d0>)
 8000b5e:	685a      	ldr	r2, [r3, #4]
 8000b60:	4922      	ldr	r1, [pc, #136]	; (8000bec <HAL_GPIO_Init+0x2d0>)
 8000b62:	69bb      	ldr	r3, [r7, #24]
 8000b64:	4313      	orrs	r3, r2
 8000b66:	604b      	str	r3, [r1, #4]
 8000b68:	e006      	b.n	8000b78 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000b6a:	4b20      	ldr	r3, [pc, #128]	; (8000bec <HAL_GPIO_Init+0x2d0>)
 8000b6c:	685a      	ldr	r2, [r3, #4]
 8000b6e:	69bb      	ldr	r3, [r7, #24]
 8000b70:	43db      	mvns	r3, r3
 8000b72:	491e      	ldr	r1, [pc, #120]	; (8000bec <HAL_GPIO_Init+0x2d0>)
 8000b74:	4013      	ands	r3, r2
 8000b76:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d006      	beq.n	8000b92 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b84:	4b19      	ldr	r3, [pc, #100]	; (8000bec <HAL_GPIO_Init+0x2d0>)
 8000b86:	689a      	ldr	r2, [r3, #8]
 8000b88:	4918      	ldr	r1, [pc, #96]	; (8000bec <HAL_GPIO_Init+0x2d0>)
 8000b8a:	69bb      	ldr	r3, [r7, #24]
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	608b      	str	r3, [r1, #8]
 8000b90:	e006      	b.n	8000ba0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b92:	4b16      	ldr	r3, [pc, #88]	; (8000bec <HAL_GPIO_Init+0x2d0>)
 8000b94:	689a      	ldr	r2, [r3, #8]
 8000b96:	69bb      	ldr	r3, [r7, #24]
 8000b98:	43db      	mvns	r3, r3
 8000b9a:	4914      	ldr	r1, [pc, #80]	; (8000bec <HAL_GPIO_Init+0x2d0>)
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d021      	beq.n	8000bf0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000bac:	4b0f      	ldr	r3, [pc, #60]	; (8000bec <HAL_GPIO_Init+0x2d0>)
 8000bae:	68da      	ldr	r2, [r3, #12]
 8000bb0:	490e      	ldr	r1, [pc, #56]	; (8000bec <HAL_GPIO_Init+0x2d0>)
 8000bb2:	69bb      	ldr	r3, [r7, #24]
 8000bb4:	4313      	orrs	r3, r2
 8000bb6:	60cb      	str	r3, [r1, #12]
 8000bb8:	e021      	b.n	8000bfe <HAL_GPIO_Init+0x2e2>
 8000bba:	bf00      	nop
 8000bbc:	10320000 	.word	0x10320000
 8000bc0:	10310000 	.word	0x10310000
 8000bc4:	10220000 	.word	0x10220000
 8000bc8:	10210000 	.word	0x10210000
 8000bcc:	10120000 	.word	0x10120000
 8000bd0:	10110000 	.word	0x10110000
 8000bd4:	40021000 	.word	0x40021000
 8000bd8:	40010000 	.word	0x40010000
 8000bdc:	40010800 	.word	0x40010800
 8000be0:	40010c00 	.word	0x40010c00
 8000be4:	40011000 	.word	0x40011000
 8000be8:	40011400 	.word	0x40011400
 8000bec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000bf0:	4b0b      	ldr	r3, [pc, #44]	; (8000c20 <HAL_GPIO_Init+0x304>)
 8000bf2:	68da      	ldr	r2, [r3, #12]
 8000bf4:	69bb      	ldr	r3, [r7, #24]
 8000bf6:	43db      	mvns	r3, r3
 8000bf8:	4909      	ldr	r1, [pc, #36]	; (8000c20 <HAL_GPIO_Init+0x304>)
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c00:	3301      	adds	r3, #1
 8000c02:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	681a      	ldr	r2, [r3, #0]
 8000c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c0a:	fa22 f303 	lsr.w	r3, r2, r3
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	f47f ae8e 	bne.w	8000930 <HAL_GPIO_Init+0x14>
  }
}
 8000c14:	bf00      	nop
 8000c16:	bf00      	nop
 8000c18:	372c      	adds	r7, #44	; 0x2c
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bc80      	pop	{r7}
 8000c1e:	4770      	bx	lr
 8000c20:	40010400 	.word	0x40010400

08000c24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
 8000c2c:	460b      	mov	r3, r1
 8000c2e:	807b      	strh	r3, [r7, #2]
 8000c30:	4613      	mov	r3, r2
 8000c32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c34:	787b      	ldrb	r3, [r7, #1]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d003      	beq.n	8000c42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c3a:	887a      	ldrh	r2, [r7, #2]
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000c40:	e003      	b.n	8000c4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c42:	887b      	ldrh	r3, [r7, #2]
 8000c44:	041a      	lsls	r2, r3, #16
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	611a      	str	r2, [r3, #16]
}
 8000c4a:	bf00      	nop
 8000c4c:	370c      	adds	r7, #12
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bc80      	pop	{r7}
 8000c52:	4770      	bx	lr

08000c54 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b085      	sub	sp, #20
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	460b      	mov	r3, r1
 8000c5e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	68db      	ldr	r3, [r3, #12]
 8000c64:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000c66:	887a      	ldrh	r2, [r7, #2]
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	041a      	lsls	r2, r3, #16
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	43d9      	mvns	r1, r3
 8000c72:	887b      	ldrh	r3, [r7, #2]
 8000c74:	400b      	ands	r3, r1
 8000c76:	431a      	orrs	r2, r3
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	611a      	str	r2, [r3, #16]
}
 8000c7c:	bf00      	nop
 8000c7e:	3714      	adds	r7, #20
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bc80      	pop	{r7}
 8000c84:	4770      	bx	lr
	...

08000c88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b086      	sub	sp, #24
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d101      	bne.n	8000c9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c96:	2301      	movs	r3, #1
 8000c98:	e26c      	b.n	8001174 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	f003 0301 	and.w	r3, r3, #1
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	f000 8087 	beq.w	8000db6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ca8:	4b92      	ldr	r3, [pc, #584]	; (8000ef4 <HAL_RCC_OscConfig+0x26c>)
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	f003 030c 	and.w	r3, r3, #12
 8000cb0:	2b04      	cmp	r3, #4
 8000cb2:	d00c      	beq.n	8000cce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000cb4:	4b8f      	ldr	r3, [pc, #572]	; (8000ef4 <HAL_RCC_OscConfig+0x26c>)
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	f003 030c 	and.w	r3, r3, #12
 8000cbc:	2b08      	cmp	r3, #8
 8000cbe:	d112      	bne.n	8000ce6 <HAL_RCC_OscConfig+0x5e>
 8000cc0:	4b8c      	ldr	r3, [pc, #560]	; (8000ef4 <HAL_RCC_OscConfig+0x26c>)
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ccc:	d10b      	bne.n	8000ce6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cce:	4b89      	ldr	r3, [pc, #548]	; (8000ef4 <HAL_RCC_OscConfig+0x26c>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d06c      	beq.n	8000db4 <HAL_RCC_OscConfig+0x12c>
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d168      	bne.n	8000db4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	e246      	b.n	8001174 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cee:	d106      	bne.n	8000cfe <HAL_RCC_OscConfig+0x76>
 8000cf0:	4b80      	ldr	r3, [pc, #512]	; (8000ef4 <HAL_RCC_OscConfig+0x26c>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a7f      	ldr	r2, [pc, #508]	; (8000ef4 <HAL_RCC_OscConfig+0x26c>)
 8000cf6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cfa:	6013      	str	r3, [r2, #0]
 8000cfc:	e02e      	b.n	8000d5c <HAL_RCC_OscConfig+0xd4>
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d10c      	bne.n	8000d20 <HAL_RCC_OscConfig+0x98>
 8000d06:	4b7b      	ldr	r3, [pc, #492]	; (8000ef4 <HAL_RCC_OscConfig+0x26c>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4a7a      	ldr	r2, [pc, #488]	; (8000ef4 <HAL_RCC_OscConfig+0x26c>)
 8000d0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d10:	6013      	str	r3, [r2, #0]
 8000d12:	4b78      	ldr	r3, [pc, #480]	; (8000ef4 <HAL_RCC_OscConfig+0x26c>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a77      	ldr	r2, [pc, #476]	; (8000ef4 <HAL_RCC_OscConfig+0x26c>)
 8000d18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d1c:	6013      	str	r3, [r2, #0]
 8000d1e:	e01d      	b.n	8000d5c <HAL_RCC_OscConfig+0xd4>
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d28:	d10c      	bne.n	8000d44 <HAL_RCC_OscConfig+0xbc>
 8000d2a:	4b72      	ldr	r3, [pc, #456]	; (8000ef4 <HAL_RCC_OscConfig+0x26c>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4a71      	ldr	r2, [pc, #452]	; (8000ef4 <HAL_RCC_OscConfig+0x26c>)
 8000d30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d34:	6013      	str	r3, [r2, #0]
 8000d36:	4b6f      	ldr	r3, [pc, #444]	; (8000ef4 <HAL_RCC_OscConfig+0x26c>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a6e      	ldr	r2, [pc, #440]	; (8000ef4 <HAL_RCC_OscConfig+0x26c>)
 8000d3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d40:	6013      	str	r3, [r2, #0]
 8000d42:	e00b      	b.n	8000d5c <HAL_RCC_OscConfig+0xd4>
 8000d44:	4b6b      	ldr	r3, [pc, #428]	; (8000ef4 <HAL_RCC_OscConfig+0x26c>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a6a      	ldr	r2, [pc, #424]	; (8000ef4 <HAL_RCC_OscConfig+0x26c>)
 8000d4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d4e:	6013      	str	r3, [r2, #0]
 8000d50:	4b68      	ldr	r3, [pc, #416]	; (8000ef4 <HAL_RCC_OscConfig+0x26c>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a67      	ldr	r2, [pc, #412]	; (8000ef4 <HAL_RCC_OscConfig+0x26c>)
 8000d56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d5a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d013      	beq.n	8000d8c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d64:	f7ff fcc8 	bl	80006f8 <HAL_GetTick>
 8000d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d6a:	e008      	b.n	8000d7e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d6c:	f7ff fcc4 	bl	80006f8 <HAL_GetTick>
 8000d70:	4602      	mov	r2, r0
 8000d72:	693b      	ldr	r3, [r7, #16]
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	2b64      	cmp	r3, #100	; 0x64
 8000d78:	d901      	bls.n	8000d7e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000d7a:	2303      	movs	r3, #3
 8000d7c:	e1fa      	b.n	8001174 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d7e:	4b5d      	ldr	r3, [pc, #372]	; (8000ef4 <HAL_RCC_OscConfig+0x26c>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d0f0      	beq.n	8000d6c <HAL_RCC_OscConfig+0xe4>
 8000d8a:	e014      	b.n	8000db6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d8c:	f7ff fcb4 	bl	80006f8 <HAL_GetTick>
 8000d90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d92:	e008      	b.n	8000da6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d94:	f7ff fcb0 	bl	80006f8 <HAL_GetTick>
 8000d98:	4602      	mov	r2, r0
 8000d9a:	693b      	ldr	r3, [r7, #16]
 8000d9c:	1ad3      	subs	r3, r2, r3
 8000d9e:	2b64      	cmp	r3, #100	; 0x64
 8000da0:	d901      	bls.n	8000da6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000da2:	2303      	movs	r3, #3
 8000da4:	e1e6      	b.n	8001174 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000da6:	4b53      	ldr	r3, [pc, #332]	; (8000ef4 <HAL_RCC_OscConfig+0x26c>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d1f0      	bne.n	8000d94 <HAL_RCC_OscConfig+0x10c>
 8000db2:	e000      	b.n	8000db6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000db4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f003 0302 	and.w	r3, r3, #2
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d063      	beq.n	8000e8a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000dc2:	4b4c      	ldr	r3, [pc, #304]	; (8000ef4 <HAL_RCC_OscConfig+0x26c>)
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	f003 030c 	and.w	r3, r3, #12
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d00b      	beq.n	8000de6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000dce:	4b49      	ldr	r3, [pc, #292]	; (8000ef4 <HAL_RCC_OscConfig+0x26c>)
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	f003 030c 	and.w	r3, r3, #12
 8000dd6:	2b08      	cmp	r3, #8
 8000dd8:	d11c      	bne.n	8000e14 <HAL_RCC_OscConfig+0x18c>
 8000dda:	4b46      	ldr	r3, [pc, #280]	; (8000ef4 <HAL_RCC_OscConfig+0x26c>)
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d116      	bne.n	8000e14 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000de6:	4b43      	ldr	r3, [pc, #268]	; (8000ef4 <HAL_RCC_OscConfig+0x26c>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f003 0302 	and.w	r3, r3, #2
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d005      	beq.n	8000dfe <HAL_RCC_OscConfig+0x176>
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	691b      	ldr	r3, [r3, #16]
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	d001      	beq.n	8000dfe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e1ba      	b.n	8001174 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dfe:	4b3d      	ldr	r3, [pc, #244]	; (8000ef4 <HAL_RCC_OscConfig+0x26c>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	695b      	ldr	r3, [r3, #20]
 8000e0a:	00db      	lsls	r3, r3, #3
 8000e0c:	4939      	ldr	r1, [pc, #228]	; (8000ef4 <HAL_RCC_OscConfig+0x26c>)
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e12:	e03a      	b.n	8000e8a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	691b      	ldr	r3, [r3, #16]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d020      	beq.n	8000e5e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e1c:	4b36      	ldr	r3, [pc, #216]	; (8000ef8 <HAL_RCC_OscConfig+0x270>)
 8000e1e:	2201      	movs	r2, #1
 8000e20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e22:	f7ff fc69 	bl	80006f8 <HAL_GetTick>
 8000e26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e28:	e008      	b.n	8000e3c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e2a:	f7ff fc65 	bl	80006f8 <HAL_GetTick>
 8000e2e:	4602      	mov	r2, r0
 8000e30:	693b      	ldr	r3, [r7, #16]
 8000e32:	1ad3      	subs	r3, r2, r3
 8000e34:	2b02      	cmp	r3, #2
 8000e36:	d901      	bls.n	8000e3c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000e38:	2303      	movs	r3, #3
 8000e3a:	e19b      	b.n	8001174 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e3c:	4b2d      	ldr	r3, [pc, #180]	; (8000ef4 <HAL_RCC_OscConfig+0x26c>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f003 0302 	and.w	r3, r3, #2
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d0f0      	beq.n	8000e2a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e48:	4b2a      	ldr	r3, [pc, #168]	; (8000ef4 <HAL_RCC_OscConfig+0x26c>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	695b      	ldr	r3, [r3, #20]
 8000e54:	00db      	lsls	r3, r3, #3
 8000e56:	4927      	ldr	r1, [pc, #156]	; (8000ef4 <HAL_RCC_OscConfig+0x26c>)
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	600b      	str	r3, [r1, #0]
 8000e5c:	e015      	b.n	8000e8a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e5e:	4b26      	ldr	r3, [pc, #152]	; (8000ef8 <HAL_RCC_OscConfig+0x270>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e64:	f7ff fc48 	bl	80006f8 <HAL_GetTick>
 8000e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e6a:	e008      	b.n	8000e7e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e6c:	f7ff fc44 	bl	80006f8 <HAL_GetTick>
 8000e70:	4602      	mov	r2, r0
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	1ad3      	subs	r3, r2, r3
 8000e76:	2b02      	cmp	r3, #2
 8000e78:	d901      	bls.n	8000e7e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000e7a:	2303      	movs	r3, #3
 8000e7c:	e17a      	b.n	8001174 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e7e:	4b1d      	ldr	r3, [pc, #116]	; (8000ef4 <HAL_RCC_OscConfig+0x26c>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f003 0302 	and.w	r3, r3, #2
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d1f0      	bne.n	8000e6c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f003 0308 	and.w	r3, r3, #8
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d03a      	beq.n	8000f0c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	699b      	ldr	r3, [r3, #24]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d019      	beq.n	8000ed2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e9e:	4b17      	ldr	r3, [pc, #92]	; (8000efc <HAL_RCC_OscConfig+0x274>)
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ea4:	f7ff fc28 	bl	80006f8 <HAL_GetTick>
 8000ea8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000eaa:	e008      	b.n	8000ebe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000eac:	f7ff fc24 	bl	80006f8 <HAL_GetTick>
 8000eb0:	4602      	mov	r2, r0
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	1ad3      	subs	r3, r2, r3
 8000eb6:	2b02      	cmp	r3, #2
 8000eb8:	d901      	bls.n	8000ebe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000eba:	2303      	movs	r3, #3
 8000ebc:	e15a      	b.n	8001174 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ebe:	4b0d      	ldr	r3, [pc, #52]	; (8000ef4 <HAL_RCC_OscConfig+0x26c>)
 8000ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ec2:	f003 0302 	and.w	r3, r3, #2
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d0f0      	beq.n	8000eac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000eca:	2001      	movs	r0, #1
 8000ecc:	f000 fad8 	bl	8001480 <RCC_Delay>
 8000ed0:	e01c      	b.n	8000f0c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ed2:	4b0a      	ldr	r3, [pc, #40]	; (8000efc <HAL_RCC_OscConfig+0x274>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ed8:	f7ff fc0e 	bl	80006f8 <HAL_GetTick>
 8000edc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ede:	e00f      	b.n	8000f00 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ee0:	f7ff fc0a 	bl	80006f8 <HAL_GetTick>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	693b      	ldr	r3, [r7, #16]
 8000ee8:	1ad3      	subs	r3, r2, r3
 8000eea:	2b02      	cmp	r3, #2
 8000eec:	d908      	bls.n	8000f00 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000eee:	2303      	movs	r3, #3
 8000ef0:	e140      	b.n	8001174 <HAL_RCC_OscConfig+0x4ec>
 8000ef2:	bf00      	nop
 8000ef4:	40021000 	.word	0x40021000
 8000ef8:	42420000 	.word	0x42420000
 8000efc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f00:	4b9e      	ldr	r3, [pc, #632]	; (800117c <HAL_RCC_OscConfig+0x4f4>)
 8000f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f04:	f003 0302 	and.w	r3, r3, #2
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d1e9      	bne.n	8000ee0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f003 0304 	and.w	r3, r3, #4
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	f000 80a6 	beq.w	8001066 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f1e:	4b97      	ldr	r3, [pc, #604]	; (800117c <HAL_RCC_OscConfig+0x4f4>)
 8000f20:	69db      	ldr	r3, [r3, #28]
 8000f22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d10d      	bne.n	8000f46 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f2a:	4b94      	ldr	r3, [pc, #592]	; (800117c <HAL_RCC_OscConfig+0x4f4>)
 8000f2c:	69db      	ldr	r3, [r3, #28]
 8000f2e:	4a93      	ldr	r2, [pc, #588]	; (800117c <HAL_RCC_OscConfig+0x4f4>)
 8000f30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f34:	61d3      	str	r3, [r2, #28]
 8000f36:	4b91      	ldr	r3, [pc, #580]	; (800117c <HAL_RCC_OscConfig+0x4f4>)
 8000f38:	69db      	ldr	r3, [r3, #28]
 8000f3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f3e:	60bb      	str	r3, [r7, #8]
 8000f40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f42:	2301      	movs	r3, #1
 8000f44:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f46:	4b8e      	ldr	r3, [pc, #568]	; (8001180 <HAL_RCC_OscConfig+0x4f8>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d118      	bne.n	8000f84 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f52:	4b8b      	ldr	r3, [pc, #556]	; (8001180 <HAL_RCC_OscConfig+0x4f8>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a8a      	ldr	r2, [pc, #552]	; (8001180 <HAL_RCC_OscConfig+0x4f8>)
 8000f58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f5e:	f7ff fbcb 	bl	80006f8 <HAL_GetTick>
 8000f62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f64:	e008      	b.n	8000f78 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f66:	f7ff fbc7 	bl	80006f8 <HAL_GetTick>
 8000f6a:	4602      	mov	r2, r0
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	1ad3      	subs	r3, r2, r3
 8000f70:	2b64      	cmp	r3, #100	; 0x64
 8000f72:	d901      	bls.n	8000f78 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000f74:	2303      	movs	r3, #3
 8000f76:	e0fd      	b.n	8001174 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f78:	4b81      	ldr	r3, [pc, #516]	; (8001180 <HAL_RCC_OscConfig+0x4f8>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d0f0      	beq.n	8000f66 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d106      	bne.n	8000f9a <HAL_RCC_OscConfig+0x312>
 8000f8c:	4b7b      	ldr	r3, [pc, #492]	; (800117c <HAL_RCC_OscConfig+0x4f4>)
 8000f8e:	6a1b      	ldr	r3, [r3, #32]
 8000f90:	4a7a      	ldr	r2, [pc, #488]	; (800117c <HAL_RCC_OscConfig+0x4f4>)
 8000f92:	f043 0301 	orr.w	r3, r3, #1
 8000f96:	6213      	str	r3, [r2, #32]
 8000f98:	e02d      	b.n	8000ff6 <HAL_RCC_OscConfig+0x36e>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	68db      	ldr	r3, [r3, #12]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d10c      	bne.n	8000fbc <HAL_RCC_OscConfig+0x334>
 8000fa2:	4b76      	ldr	r3, [pc, #472]	; (800117c <HAL_RCC_OscConfig+0x4f4>)
 8000fa4:	6a1b      	ldr	r3, [r3, #32]
 8000fa6:	4a75      	ldr	r2, [pc, #468]	; (800117c <HAL_RCC_OscConfig+0x4f4>)
 8000fa8:	f023 0301 	bic.w	r3, r3, #1
 8000fac:	6213      	str	r3, [r2, #32]
 8000fae:	4b73      	ldr	r3, [pc, #460]	; (800117c <HAL_RCC_OscConfig+0x4f4>)
 8000fb0:	6a1b      	ldr	r3, [r3, #32]
 8000fb2:	4a72      	ldr	r2, [pc, #456]	; (800117c <HAL_RCC_OscConfig+0x4f4>)
 8000fb4:	f023 0304 	bic.w	r3, r3, #4
 8000fb8:	6213      	str	r3, [r2, #32]
 8000fba:	e01c      	b.n	8000ff6 <HAL_RCC_OscConfig+0x36e>
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	2b05      	cmp	r3, #5
 8000fc2:	d10c      	bne.n	8000fde <HAL_RCC_OscConfig+0x356>
 8000fc4:	4b6d      	ldr	r3, [pc, #436]	; (800117c <HAL_RCC_OscConfig+0x4f4>)
 8000fc6:	6a1b      	ldr	r3, [r3, #32]
 8000fc8:	4a6c      	ldr	r2, [pc, #432]	; (800117c <HAL_RCC_OscConfig+0x4f4>)
 8000fca:	f043 0304 	orr.w	r3, r3, #4
 8000fce:	6213      	str	r3, [r2, #32]
 8000fd0:	4b6a      	ldr	r3, [pc, #424]	; (800117c <HAL_RCC_OscConfig+0x4f4>)
 8000fd2:	6a1b      	ldr	r3, [r3, #32]
 8000fd4:	4a69      	ldr	r2, [pc, #420]	; (800117c <HAL_RCC_OscConfig+0x4f4>)
 8000fd6:	f043 0301 	orr.w	r3, r3, #1
 8000fda:	6213      	str	r3, [r2, #32]
 8000fdc:	e00b      	b.n	8000ff6 <HAL_RCC_OscConfig+0x36e>
 8000fde:	4b67      	ldr	r3, [pc, #412]	; (800117c <HAL_RCC_OscConfig+0x4f4>)
 8000fe0:	6a1b      	ldr	r3, [r3, #32]
 8000fe2:	4a66      	ldr	r2, [pc, #408]	; (800117c <HAL_RCC_OscConfig+0x4f4>)
 8000fe4:	f023 0301 	bic.w	r3, r3, #1
 8000fe8:	6213      	str	r3, [r2, #32]
 8000fea:	4b64      	ldr	r3, [pc, #400]	; (800117c <HAL_RCC_OscConfig+0x4f4>)
 8000fec:	6a1b      	ldr	r3, [r3, #32]
 8000fee:	4a63      	ldr	r2, [pc, #396]	; (800117c <HAL_RCC_OscConfig+0x4f4>)
 8000ff0:	f023 0304 	bic.w	r3, r3, #4
 8000ff4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	68db      	ldr	r3, [r3, #12]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d015      	beq.n	800102a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ffe:	f7ff fb7b 	bl	80006f8 <HAL_GetTick>
 8001002:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001004:	e00a      	b.n	800101c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001006:	f7ff fb77 	bl	80006f8 <HAL_GetTick>
 800100a:	4602      	mov	r2, r0
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	1ad3      	subs	r3, r2, r3
 8001010:	f241 3288 	movw	r2, #5000	; 0x1388
 8001014:	4293      	cmp	r3, r2
 8001016:	d901      	bls.n	800101c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001018:	2303      	movs	r3, #3
 800101a:	e0ab      	b.n	8001174 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800101c:	4b57      	ldr	r3, [pc, #348]	; (800117c <HAL_RCC_OscConfig+0x4f4>)
 800101e:	6a1b      	ldr	r3, [r3, #32]
 8001020:	f003 0302 	and.w	r3, r3, #2
 8001024:	2b00      	cmp	r3, #0
 8001026:	d0ee      	beq.n	8001006 <HAL_RCC_OscConfig+0x37e>
 8001028:	e014      	b.n	8001054 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800102a:	f7ff fb65 	bl	80006f8 <HAL_GetTick>
 800102e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001030:	e00a      	b.n	8001048 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001032:	f7ff fb61 	bl	80006f8 <HAL_GetTick>
 8001036:	4602      	mov	r2, r0
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	1ad3      	subs	r3, r2, r3
 800103c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001040:	4293      	cmp	r3, r2
 8001042:	d901      	bls.n	8001048 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001044:	2303      	movs	r3, #3
 8001046:	e095      	b.n	8001174 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001048:	4b4c      	ldr	r3, [pc, #304]	; (800117c <HAL_RCC_OscConfig+0x4f4>)
 800104a:	6a1b      	ldr	r3, [r3, #32]
 800104c:	f003 0302 	and.w	r3, r3, #2
 8001050:	2b00      	cmp	r3, #0
 8001052:	d1ee      	bne.n	8001032 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001054:	7dfb      	ldrb	r3, [r7, #23]
 8001056:	2b01      	cmp	r3, #1
 8001058:	d105      	bne.n	8001066 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800105a:	4b48      	ldr	r3, [pc, #288]	; (800117c <HAL_RCC_OscConfig+0x4f4>)
 800105c:	69db      	ldr	r3, [r3, #28]
 800105e:	4a47      	ldr	r2, [pc, #284]	; (800117c <HAL_RCC_OscConfig+0x4f4>)
 8001060:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001064:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	69db      	ldr	r3, [r3, #28]
 800106a:	2b00      	cmp	r3, #0
 800106c:	f000 8081 	beq.w	8001172 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001070:	4b42      	ldr	r3, [pc, #264]	; (800117c <HAL_RCC_OscConfig+0x4f4>)
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f003 030c 	and.w	r3, r3, #12
 8001078:	2b08      	cmp	r3, #8
 800107a:	d061      	beq.n	8001140 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	69db      	ldr	r3, [r3, #28]
 8001080:	2b02      	cmp	r3, #2
 8001082:	d146      	bne.n	8001112 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001084:	4b3f      	ldr	r3, [pc, #252]	; (8001184 <HAL_RCC_OscConfig+0x4fc>)
 8001086:	2200      	movs	r2, #0
 8001088:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800108a:	f7ff fb35 	bl	80006f8 <HAL_GetTick>
 800108e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001090:	e008      	b.n	80010a4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001092:	f7ff fb31 	bl	80006f8 <HAL_GetTick>
 8001096:	4602      	mov	r2, r0
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	1ad3      	subs	r3, r2, r3
 800109c:	2b02      	cmp	r3, #2
 800109e:	d901      	bls.n	80010a4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80010a0:	2303      	movs	r3, #3
 80010a2:	e067      	b.n	8001174 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010a4:	4b35      	ldr	r3, [pc, #212]	; (800117c <HAL_RCC_OscConfig+0x4f4>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d1f0      	bne.n	8001092 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6a1b      	ldr	r3, [r3, #32]
 80010b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010b8:	d108      	bne.n	80010cc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80010ba:	4b30      	ldr	r3, [pc, #192]	; (800117c <HAL_RCC_OscConfig+0x4f4>)
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	689b      	ldr	r3, [r3, #8]
 80010c6:	492d      	ldr	r1, [pc, #180]	; (800117c <HAL_RCC_OscConfig+0x4f4>)
 80010c8:	4313      	orrs	r3, r2
 80010ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80010cc:	4b2b      	ldr	r3, [pc, #172]	; (800117c <HAL_RCC_OscConfig+0x4f4>)
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6a19      	ldr	r1, [r3, #32]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010dc:	430b      	orrs	r3, r1
 80010de:	4927      	ldr	r1, [pc, #156]	; (800117c <HAL_RCC_OscConfig+0x4f4>)
 80010e0:	4313      	orrs	r3, r2
 80010e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80010e4:	4b27      	ldr	r3, [pc, #156]	; (8001184 <HAL_RCC_OscConfig+0x4fc>)
 80010e6:	2201      	movs	r2, #1
 80010e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010ea:	f7ff fb05 	bl	80006f8 <HAL_GetTick>
 80010ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010f0:	e008      	b.n	8001104 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010f2:	f7ff fb01 	bl	80006f8 <HAL_GetTick>
 80010f6:	4602      	mov	r2, r0
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	1ad3      	subs	r3, r2, r3
 80010fc:	2b02      	cmp	r3, #2
 80010fe:	d901      	bls.n	8001104 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001100:	2303      	movs	r3, #3
 8001102:	e037      	b.n	8001174 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001104:	4b1d      	ldr	r3, [pc, #116]	; (800117c <HAL_RCC_OscConfig+0x4f4>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800110c:	2b00      	cmp	r3, #0
 800110e:	d0f0      	beq.n	80010f2 <HAL_RCC_OscConfig+0x46a>
 8001110:	e02f      	b.n	8001172 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001112:	4b1c      	ldr	r3, [pc, #112]	; (8001184 <HAL_RCC_OscConfig+0x4fc>)
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001118:	f7ff faee 	bl	80006f8 <HAL_GetTick>
 800111c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800111e:	e008      	b.n	8001132 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001120:	f7ff faea 	bl	80006f8 <HAL_GetTick>
 8001124:	4602      	mov	r2, r0
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	2b02      	cmp	r3, #2
 800112c:	d901      	bls.n	8001132 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800112e:	2303      	movs	r3, #3
 8001130:	e020      	b.n	8001174 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001132:	4b12      	ldr	r3, [pc, #72]	; (800117c <HAL_RCC_OscConfig+0x4f4>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800113a:	2b00      	cmp	r3, #0
 800113c:	d1f0      	bne.n	8001120 <HAL_RCC_OscConfig+0x498>
 800113e:	e018      	b.n	8001172 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	69db      	ldr	r3, [r3, #28]
 8001144:	2b01      	cmp	r3, #1
 8001146:	d101      	bne.n	800114c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001148:	2301      	movs	r3, #1
 800114a:	e013      	b.n	8001174 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800114c:	4b0b      	ldr	r3, [pc, #44]	; (800117c <HAL_RCC_OscConfig+0x4f4>)
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6a1b      	ldr	r3, [r3, #32]
 800115c:	429a      	cmp	r2, r3
 800115e:	d106      	bne.n	800116e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800116a:	429a      	cmp	r2, r3
 800116c:	d001      	beq.n	8001172 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	e000      	b.n	8001174 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001172:	2300      	movs	r3, #0
}
 8001174:	4618      	mov	r0, r3
 8001176:	3718      	adds	r7, #24
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	40021000 	.word	0x40021000
 8001180:	40007000 	.word	0x40007000
 8001184:	42420060 	.word	0x42420060

08001188 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d101      	bne.n	800119c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001198:	2301      	movs	r3, #1
 800119a:	e0d0      	b.n	800133e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800119c:	4b6a      	ldr	r3, [pc, #424]	; (8001348 <HAL_RCC_ClockConfig+0x1c0>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f003 0307 	and.w	r3, r3, #7
 80011a4:	683a      	ldr	r2, [r7, #0]
 80011a6:	429a      	cmp	r2, r3
 80011a8:	d910      	bls.n	80011cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011aa:	4b67      	ldr	r3, [pc, #412]	; (8001348 <HAL_RCC_ClockConfig+0x1c0>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f023 0207 	bic.w	r2, r3, #7
 80011b2:	4965      	ldr	r1, [pc, #404]	; (8001348 <HAL_RCC_ClockConfig+0x1c0>)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011ba:	4b63      	ldr	r3, [pc, #396]	; (8001348 <HAL_RCC_ClockConfig+0x1c0>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f003 0307 	and.w	r3, r3, #7
 80011c2:	683a      	ldr	r2, [r7, #0]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	d001      	beq.n	80011cc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80011c8:	2301      	movs	r3, #1
 80011ca:	e0b8      	b.n	800133e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f003 0302 	and.w	r3, r3, #2
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d020      	beq.n	800121a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f003 0304 	and.w	r3, r3, #4
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d005      	beq.n	80011f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011e4:	4b59      	ldr	r3, [pc, #356]	; (800134c <HAL_RCC_ClockConfig+0x1c4>)
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	4a58      	ldr	r2, [pc, #352]	; (800134c <HAL_RCC_ClockConfig+0x1c4>)
 80011ea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80011ee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f003 0308 	and.w	r3, r3, #8
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d005      	beq.n	8001208 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011fc:	4b53      	ldr	r3, [pc, #332]	; (800134c <HAL_RCC_ClockConfig+0x1c4>)
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	4a52      	ldr	r2, [pc, #328]	; (800134c <HAL_RCC_ClockConfig+0x1c4>)
 8001202:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001206:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001208:	4b50      	ldr	r3, [pc, #320]	; (800134c <HAL_RCC_ClockConfig+0x1c4>)
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	494d      	ldr	r1, [pc, #308]	; (800134c <HAL_RCC_ClockConfig+0x1c4>)
 8001216:	4313      	orrs	r3, r2
 8001218:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f003 0301 	and.w	r3, r3, #1
 8001222:	2b00      	cmp	r3, #0
 8001224:	d040      	beq.n	80012a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	2b01      	cmp	r3, #1
 800122c:	d107      	bne.n	800123e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800122e:	4b47      	ldr	r3, [pc, #284]	; (800134c <HAL_RCC_ClockConfig+0x1c4>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001236:	2b00      	cmp	r3, #0
 8001238:	d115      	bne.n	8001266 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	e07f      	b.n	800133e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	2b02      	cmp	r3, #2
 8001244:	d107      	bne.n	8001256 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001246:	4b41      	ldr	r3, [pc, #260]	; (800134c <HAL_RCC_ClockConfig+0x1c4>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800124e:	2b00      	cmp	r3, #0
 8001250:	d109      	bne.n	8001266 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	e073      	b.n	800133e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001256:	4b3d      	ldr	r3, [pc, #244]	; (800134c <HAL_RCC_ClockConfig+0x1c4>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 0302 	and.w	r3, r3, #2
 800125e:	2b00      	cmp	r3, #0
 8001260:	d101      	bne.n	8001266 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e06b      	b.n	800133e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001266:	4b39      	ldr	r3, [pc, #228]	; (800134c <HAL_RCC_ClockConfig+0x1c4>)
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f023 0203 	bic.w	r2, r3, #3
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	4936      	ldr	r1, [pc, #216]	; (800134c <HAL_RCC_ClockConfig+0x1c4>)
 8001274:	4313      	orrs	r3, r2
 8001276:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001278:	f7ff fa3e 	bl	80006f8 <HAL_GetTick>
 800127c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800127e:	e00a      	b.n	8001296 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001280:	f7ff fa3a 	bl	80006f8 <HAL_GetTick>
 8001284:	4602      	mov	r2, r0
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	f241 3288 	movw	r2, #5000	; 0x1388
 800128e:	4293      	cmp	r3, r2
 8001290:	d901      	bls.n	8001296 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001292:	2303      	movs	r3, #3
 8001294:	e053      	b.n	800133e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001296:	4b2d      	ldr	r3, [pc, #180]	; (800134c <HAL_RCC_ClockConfig+0x1c4>)
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f003 020c 	and.w	r2, r3, #12
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d1eb      	bne.n	8001280 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80012a8:	4b27      	ldr	r3, [pc, #156]	; (8001348 <HAL_RCC_ClockConfig+0x1c0>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f003 0307 	and.w	r3, r3, #7
 80012b0:	683a      	ldr	r2, [r7, #0]
 80012b2:	429a      	cmp	r2, r3
 80012b4:	d210      	bcs.n	80012d8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012b6:	4b24      	ldr	r3, [pc, #144]	; (8001348 <HAL_RCC_ClockConfig+0x1c0>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f023 0207 	bic.w	r2, r3, #7
 80012be:	4922      	ldr	r1, [pc, #136]	; (8001348 <HAL_RCC_ClockConfig+0x1c0>)
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012c6:	4b20      	ldr	r3, [pc, #128]	; (8001348 <HAL_RCC_ClockConfig+0x1c0>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 0307 	and.w	r3, r3, #7
 80012ce:	683a      	ldr	r2, [r7, #0]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d001      	beq.n	80012d8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80012d4:	2301      	movs	r3, #1
 80012d6:	e032      	b.n	800133e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f003 0304 	and.w	r3, r3, #4
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d008      	beq.n	80012f6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012e4:	4b19      	ldr	r3, [pc, #100]	; (800134c <HAL_RCC_ClockConfig+0x1c4>)
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	4916      	ldr	r1, [pc, #88]	; (800134c <HAL_RCC_ClockConfig+0x1c4>)
 80012f2:	4313      	orrs	r3, r2
 80012f4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f003 0308 	and.w	r3, r3, #8
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d009      	beq.n	8001316 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001302:	4b12      	ldr	r3, [pc, #72]	; (800134c <HAL_RCC_ClockConfig+0x1c4>)
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	691b      	ldr	r3, [r3, #16]
 800130e:	00db      	lsls	r3, r3, #3
 8001310:	490e      	ldr	r1, [pc, #56]	; (800134c <HAL_RCC_ClockConfig+0x1c4>)
 8001312:	4313      	orrs	r3, r2
 8001314:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001316:	f000 f821 	bl	800135c <HAL_RCC_GetSysClockFreq>
 800131a:	4602      	mov	r2, r0
 800131c:	4b0b      	ldr	r3, [pc, #44]	; (800134c <HAL_RCC_ClockConfig+0x1c4>)
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	091b      	lsrs	r3, r3, #4
 8001322:	f003 030f 	and.w	r3, r3, #15
 8001326:	490a      	ldr	r1, [pc, #40]	; (8001350 <HAL_RCC_ClockConfig+0x1c8>)
 8001328:	5ccb      	ldrb	r3, [r1, r3]
 800132a:	fa22 f303 	lsr.w	r3, r2, r3
 800132e:	4a09      	ldr	r2, [pc, #36]	; (8001354 <HAL_RCC_ClockConfig+0x1cc>)
 8001330:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001332:	4b09      	ldr	r3, [pc, #36]	; (8001358 <HAL_RCC_ClockConfig+0x1d0>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff f99c 	bl	8000674 <HAL_InitTick>

  return HAL_OK;
 800133c:	2300      	movs	r3, #0
}
 800133e:	4618      	mov	r0, r3
 8001340:	3710      	adds	r7, #16
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40022000 	.word	0x40022000
 800134c:	40021000 	.word	0x40021000
 8001350:	08002890 	.word	0x08002890
 8001354:	20000000 	.word	0x20000000
 8001358:	20000004 	.word	0x20000004

0800135c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800135c:	b490      	push	{r4, r7}
 800135e:	b08a      	sub	sp, #40	; 0x28
 8001360:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001362:	4b2a      	ldr	r3, [pc, #168]	; (800140c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001364:	1d3c      	adds	r4, r7, #4
 8001366:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001368:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800136c:	f240 2301 	movw	r3, #513	; 0x201
 8001370:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001372:	2300      	movs	r3, #0
 8001374:	61fb      	str	r3, [r7, #28]
 8001376:	2300      	movs	r3, #0
 8001378:	61bb      	str	r3, [r7, #24]
 800137a:	2300      	movs	r3, #0
 800137c:	627b      	str	r3, [r7, #36]	; 0x24
 800137e:	2300      	movs	r3, #0
 8001380:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001382:	2300      	movs	r3, #0
 8001384:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001386:	4b22      	ldr	r3, [pc, #136]	; (8001410 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	f003 030c 	and.w	r3, r3, #12
 8001392:	2b04      	cmp	r3, #4
 8001394:	d002      	beq.n	800139c <HAL_RCC_GetSysClockFreq+0x40>
 8001396:	2b08      	cmp	r3, #8
 8001398:	d003      	beq.n	80013a2 <HAL_RCC_GetSysClockFreq+0x46>
 800139a:	e02d      	b.n	80013f8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800139c:	4b1d      	ldr	r3, [pc, #116]	; (8001414 <HAL_RCC_GetSysClockFreq+0xb8>)
 800139e:	623b      	str	r3, [r7, #32]
      break;
 80013a0:	e02d      	b.n	80013fe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	0c9b      	lsrs	r3, r3, #18
 80013a6:	f003 030f 	and.w	r3, r3, #15
 80013aa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80013ae:	4413      	add	r3, r2
 80013b0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80013b4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d013      	beq.n	80013e8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80013c0:	4b13      	ldr	r3, [pc, #76]	; (8001410 <HAL_RCC_GetSysClockFreq+0xb4>)
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	0c5b      	lsrs	r3, r3, #17
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80013ce:	4413      	add	r3, r2
 80013d0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80013d4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	4a0e      	ldr	r2, [pc, #56]	; (8001414 <HAL_RCC_GetSysClockFreq+0xb8>)
 80013da:	fb02 f203 	mul.w	r2, r2, r3
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80013e4:	627b      	str	r3, [r7, #36]	; 0x24
 80013e6:	e004      	b.n	80013f2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	4a0b      	ldr	r2, [pc, #44]	; (8001418 <HAL_RCC_GetSysClockFreq+0xbc>)
 80013ec:	fb02 f303 	mul.w	r3, r2, r3
 80013f0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80013f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f4:	623b      	str	r3, [r7, #32]
      break;
 80013f6:	e002      	b.n	80013fe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80013f8:	4b06      	ldr	r3, [pc, #24]	; (8001414 <HAL_RCC_GetSysClockFreq+0xb8>)
 80013fa:	623b      	str	r3, [r7, #32]
      break;
 80013fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80013fe:	6a3b      	ldr	r3, [r7, #32]
}
 8001400:	4618      	mov	r0, r3
 8001402:	3728      	adds	r7, #40	; 0x28
 8001404:	46bd      	mov	sp, r7
 8001406:	bc90      	pop	{r4, r7}
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	08002880 	.word	0x08002880
 8001410:	40021000 	.word	0x40021000
 8001414:	007a1200 	.word	0x007a1200
 8001418:	003d0900 	.word	0x003d0900

0800141c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001420:	4b02      	ldr	r3, [pc, #8]	; (800142c <HAL_RCC_GetHCLKFreq+0x10>)
 8001422:	681b      	ldr	r3, [r3, #0]
}
 8001424:	4618      	mov	r0, r3
 8001426:	46bd      	mov	sp, r7
 8001428:	bc80      	pop	{r7}
 800142a:	4770      	bx	lr
 800142c:	20000000 	.word	0x20000000

08001430 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001434:	f7ff fff2 	bl	800141c <HAL_RCC_GetHCLKFreq>
 8001438:	4602      	mov	r2, r0
 800143a:	4b05      	ldr	r3, [pc, #20]	; (8001450 <HAL_RCC_GetPCLK1Freq+0x20>)
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	0a1b      	lsrs	r3, r3, #8
 8001440:	f003 0307 	and.w	r3, r3, #7
 8001444:	4903      	ldr	r1, [pc, #12]	; (8001454 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001446:	5ccb      	ldrb	r3, [r1, r3]
 8001448:	fa22 f303 	lsr.w	r3, r2, r3
}
 800144c:	4618      	mov	r0, r3
 800144e:	bd80      	pop	{r7, pc}
 8001450:	40021000 	.word	0x40021000
 8001454:	080028a0 	.word	0x080028a0

08001458 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800145c:	f7ff ffde 	bl	800141c <HAL_RCC_GetHCLKFreq>
 8001460:	4602      	mov	r2, r0
 8001462:	4b05      	ldr	r3, [pc, #20]	; (8001478 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	0adb      	lsrs	r3, r3, #11
 8001468:	f003 0307 	and.w	r3, r3, #7
 800146c:	4903      	ldr	r1, [pc, #12]	; (800147c <HAL_RCC_GetPCLK2Freq+0x24>)
 800146e:	5ccb      	ldrb	r3, [r1, r3]
 8001470:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001474:	4618      	mov	r0, r3
 8001476:	bd80      	pop	{r7, pc}
 8001478:	40021000 	.word	0x40021000
 800147c:	080028a0 	.word	0x080028a0

08001480 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001480:	b480      	push	{r7}
 8001482:	b085      	sub	sp, #20
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001488:	4b0a      	ldr	r3, [pc, #40]	; (80014b4 <RCC_Delay+0x34>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a0a      	ldr	r2, [pc, #40]	; (80014b8 <RCC_Delay+0x38>)
 800148e:	fba2 2303 	umull	r2, r3, r2, r3
 8001492:	0a5b      	lsrs	r3, r3, #9
 8001494:	687a      	ldr	r2, [r7, #4]
 8001496:	fb02 f303 	mul.w	r3, r2, r3
 800149a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800149c:	bf00      	nop
  }
  while (Delay --);
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	1e5a      	subs	r2, r3, #1
 80014a2:	60fa      	str	r2, [r7, #12]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d1f9      	bne.n	800149c <RCC_Delay+0x1c>
}
 80014a8:	bf00      	nop
 80014aa:	bf00      	nop
 80014ac:	3714      	adds	r7, #20
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bc80      	pop	{r7}
 80014b2:	4770      	bx	lr
 80014b4:	20000000 	.word	0x20000000
 80014b8:	10624dd3 	.word	0x10624dd3

080014bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d101      	bne.n	80014ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e03f      	b.n	800154e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d106      	bne.n	80014e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2200      	movs	r2, #0
 80014de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f7fe ff72 	bl	80003cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2224      	movs	r2, #36	; 0x24
 80014ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	68da      	ldr	r2, [r3, #12]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80014fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f000 f905 	bl	8001710 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	691a      	ldr	r2, [r3, #16]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001514:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	695a      	ldr	r2, [r3, #20]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001524:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	68da      	ldr	r2, [r3, #12]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001534:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2200      	movs	r2, #0
 800153a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2220      	movs	r2, #32
 8001540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2220      	movs	r2, #32
 8001548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800154c:	2300      	movs	r3, #0
}
 800154e:	4618      	mov	r0, r3
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}

08001556 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	b08a      	sub	sp, #40	; 0x28
 800155a:	af02      	add	r7, sp, #8
 800155c:	60f8      	str	r0, [r7, #12]
 800155e:	60b9      	str	r1, [r7, #8]
 8001560:	603b      	str	r3, [r7, #0]
 8001562:	4613      	mov	r3, r2
 8001564:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001566:	2300      	movs	r3, #0
 8001568:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001570:	b2db      	uxtb	r3, r3
 8001572:	2b20      	cmp	r3, #32
 8001574:	d17c      	bne.n	8001670 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d002      	beq.n	8001582 <HAL_UART_Transmit+0x2c>
 800157c:	88fb      	ldrh	r3, [r7, #6]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d101      	bne.n	8001586 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e075      	b.n	8001672 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800158c:	2b01      	cmp	r3, #1
 800158e:	d101      	bne.n	8001594 <HAL_UART_Transmit+0x3e>
 8001590:	2302      	movs	r3, #2
 8001592:	e06e      	b.n	8001672 <HAL_UART_Transmit+0x11c>
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	2201      	movs	r2, #1
 8001598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	2200      	movs	r2, #0
 80015a0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	2221      	movs	r2, #33	; 0x21
 80015a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80015aa:	f7ff f8a5 	bl	80006f8 <HAL_GetTick>
 80015ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	88fa      	ldrh	r2, [r7, #6]
 80015b4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	88fa      	ldrh	r2, [r7, #6]
 80015ba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015c4:	d108      	bne.n	80015d8 <HAL_UART_Transmit+0x82>
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	691b      	ldr	r3, [r3, #16]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d104      	bne.n	80015d8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	61bb      	str	r3, [r7, #24]
 80015d6:	e003      	b.n	80015e0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80015dc:	2300      	movs	r3, #0
 80015de:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	2200      	movs	r2, #0
 80015e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80015e8:	e02a      	b.n	8001640 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	9300      	str	r3, [sp, #0]
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	2200      	movs	r2, #0
 80015f2:	2180      	movs	r1, #128	; 0x80
 80015f4:	68f8      	ldr	r0, [r7, #12]
 80015f6:	f000 f840 	bl	800167a <UART_WaitOnFlagUntilTimeout>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001600:	2303      	movs	r3, #3
 8001602:	e036      	b.n	8001672 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d10b      	bne.n	8001622 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800160a:	69bb      	ldr	r3, [r7, #24]
 800160c:	881b      	ldrh	r3, [r3, #0]
 800160e:	461a      	mov	r2, r3
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001618:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800161a:	69bb      	ldr	r3, [r7, #24]
 800161c:	3302      	adds	r3, #2
 800161e:	61bb      	str	r3, [r7, #24]
 8001620:	e007      	b.n	8001632 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	781a      	ldrb	r2, [r3, #0]
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	3301      	adds	r3, #1
 8001630:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001636:	b29b      	uxth	r3, r3
 8001638:	3b01      	subs	r3, #1
 800163a:	b29a      	uxth	r2, r3
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001644:	b29b      	uxth	r3, r3
 8001646:	2b00      	cmp	r3, #0
 8001648:	d1cf      	bne.n	80015ea <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	9300      	str	r3, [sp, #0]
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	2200      	movs	r2, #0
 8001652:	2140      	movs	r1, #64	; 0x40
 8001654:	68f8      	ldr	r0, [r7, #12]
 8001656:	f000 f810 	bl	800167a <UART_WaitOnFlagUntilTimeout>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001660:	2303      	movs	r3, #3
 8001662:	e006      	b.n	8001672 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	2220      	movs	r2, #32
 8001668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800166c:	2300      	movs	r3, #0
 800166e:	e000      	b.n	8001672 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001670:	2302      	movs	r3, #2
  }
}
 8001672:	4618      	mov	r0, r3
 8001674:	3720      	adds	r7, #32
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}

0800167a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800167a:	b580      	push	{r7, lr}
 800167c:	b084      	sub	sp, #16
 800167e:	af00      	add	r7, sp, #0
 8001680:	60f8      	str	r0, [r7, #12]
 8001682:	60b9      	str	r1, [r7, #8]
 8001684:	603b      	str	r3, [r7, #0]
 8001686:	4613      	mov	r3, r2
 8001688:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800168a:	e02c      	b.n	80016e6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001692:	d028      	beq.n	80016e6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d007      	beq.n	80016aa <UART_WaitOnFlagUntilTimeout+0x30>
 800169a:	f7ff f82d 	bl	80006f8 <HAL_GetTick>
 800169e:	4602      	mov	r2, r0
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	429a      	cmp	r2, r3
 80016a8:	d21d      	bcs.n	80016e6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	68da      	ldr	r2, [r3, #12]
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80016b8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	695a      	ldr	r2, [r3, #20]
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f022 0201 	bic.w	r2, r2, #1
 80016c8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	2220      	movs	r2, #32
 80016ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	2220      	movs	r2, #32
 80016d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	2200      	movs	r2, #0
 80016de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e00f      	b.n	8001706 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	4013      	ands	r3, r2
 80016f0:	68ba      	ldr	r2, [r7, #8]
 80016f2:	429a      	cmp	r2, r3
 80016f4:	bf0c      	ite	eq
 80016f6:	2301      	moveq	r3, #1
 80016f8:	2300      	movne	r3, #0
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	461a      	mov	r2, r3
 80016fe:	79fb      	ldrb	r3, [r7, #7]
 8001700:	429a      	cmp	r2, r3
 8001702:	d0c3      	beq.n	800168c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001704:	2300      	movs	r3, #0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
	...

08001710 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	691b      	ldr	r3, [r3, #16]
 800171e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	68da      	ldr	r2, [r3, #12]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	430a      	orrs	r2, r1
 800172c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	689a      	ldr	r2, [r3, #8]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	691b      	ldr	r3, [r3, #16]
 8001736:	431a      	orrs	r2, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	695b      	ldr	r3, [r3, #20]
 800173c:	4313      	orrs	r3, r2
 800173e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	68db      	ldr	r3, [r3, #12]
 8001746:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800174a:	f023 030c 	bic.w	r3, r3, #12
 800174e:	687a      	ldr	r2, [r7, #4]
 8001750:	6812      	ldr	r2, [r2, #0]
 8001752:	68b9      	ldr	r1, [r7, #8]
 8001754:	430b      	orrs	r3, r1
 8001756:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	695b      	ldr	r3, [r3, #20]
 800175e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	699a      	ldr	r2, [r3, #24]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	430a      	orrs	r2, r1
 800176c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a2c      	ldr	r2, [pc, #176]	; (8001824 <UART_SetConfig+0x114>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d103      	bne.n	8001780 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001778:	f7ff fe6e 	bl	8001458 <HAL_RCC_GetPCLK2Freq>
 800177c:	60f8      	str	r0, [r7, #12]
 800177e:	e002      	b.n	8001786 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001780:	f7ff fe56 	bl	8001430 <HAL_RCC_GetPCLK1Freq>
 8001784:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001786:	68fa      	ldr	r2, [r7, #12]
 8001788:	4613      	mov	r3, r2
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	4413      	add	r3, r2
 800178e:	009a      	lsls	r2, r3, #2
 8001790:	441a      	add	r2, r3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	fbb2 f3f3 	udiv	r3, r2, r3
 800179c:	4a22      	ldr	r2, [pc, #136]	; (8001828 <UART_SetConfig+0x118>)
 800179e:	fba2 2303 	umull	r2, r3, r2, r3
 80017a2:	095b      	lsrs	r3, r3, #5
 80017a4:	0119      	lsls	r1, r3, #4
 80017a6:	68fa      	ldr	r2, [r7, #12]
 80017a8:	4613      	mov	r3, r2
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	4413      	add	r3, r2
 80017ae:	009a      	lsls	r2, r3, #2
 80017b0:	441a      	add	r2, r3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80017bc:	4b1a      	ldr	r3, [pc, #104]	; (8001828 <UART_SetConfig+0x118>)
 80017be:	fba3 0302 	umull	r0, r3, r3, r2
 80017c2:	095b      	lsrs	r3, r3, #5
 80017c4:	2064      	movs	r0, #100	; 0x64
 80017c6:	fb00 f303 	mul.w	r3, r0, r3
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	011b      	lsls	r3, r3, #4
 80017ce:	3332      	adds	r3, #50	; 0x32
 80017d0:	4a15      	ldr	r2, [pc, #84]	; (8001828 <UART_SetConfig+0x118>)
 80017d2:	fba2 2303 	umull	r2, r3, r2, r3
 80017d6:	095b      	lsrs	r3, r3, #5
 80017d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017dc:	4419      	add	r1, r3
 80017de:	68fa      	ldr	r2, [r7, #12]
 80017e0:	4613      	mov	r3, r2
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	4413      	add	r3, r2
 80017e6:	009a      	lsls	r2, r3, #2
 80017e8:	441a      	add	r2, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80017f4:	4b0c      	ldr	r3, [pc, #48]	; (8001828 <UART_SetConfig+0x118>)
 80017f6:	fba3 0302 	umull	r0, r3, r3, r2
 80017fa:	095b      	lsrs	r3, r3, #5
 80017fc:	2064      	movs	r0, #100	; 0x64
 80017fe:	fb00 f303 	mul.w	r3, r0, r3
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	011b      	lsls	r3, r3, #4
 8001806:	3332      	adds	r3, #50	; 0x32
 8001808:	4a07      	ldr	r2, [pc, #28]	; (8001828 <UART_SetConfig+0x118>)
 800180a:	fba2 2303 	umull	r2, r3, r2, r3
 800180e:	095b      	lsrs	r3, r3, #5
 8001810:	f003 020f 	and.w	r2, r3, #15
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	440a      	add	r2, r1
 800181a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800181c:	bf00      	nop
 800181e:	3710      	adds	r7, #16
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	40013800 	.word	0x40013800
 8001828:	51eb851f 	.word	0x51eb851f

0800182c <__errno>:
 800182c:	4b01      	ldr	r3, [pc, #4]	; (8001834 <__errno+0x8>)
 800182e:	6818      	ldr	r0, [r3, #0]
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	2000000c 	.word	0x2000000c

08001838 <__libc_init_array>:
 8001838:	b570      	push	{r4, r5, r6, lr}
 800183a:	2600      	movs	r6, #0
 800183c:	4d0c      	ldr	r5, [pc, #48]	; (8001870 <__libc_init_array+0x38>)
 800183e:	4c0d      	ldr	r4, [pc, #52]	; (8001874 <__libc_init_array+0x3c>)
 8001840:	1b64      	subs	r4, r4, r5
 8001842:	10a4      	asrs	r4, r4, #2
 8001844:	42a6      	cmp	r6, r4
 8001846:	d109      	bne.n	800185c <__libc_init_array+0x24>
 8001848:	f000 fff8 	bl	800283c <_init>
 800184c:	2600      	movs	r6, #0
 800184e:	4d0a      	ldr	r5, [pc, #40]	; (8001878 <__libc_init_array+0x40>)
 8001850:	4c0a      	ldr	r4, [pc, #40]	; (800187c <__libc_init_array+0x44>)
 8001852:	1b64      	subs	r4, r4, r5
 8001854:	10a4      	asrs	r4, r4, #2
 8001856:	42a6      	cmp	r6, r4
 8001858:	d105      	bne.n	8001866 <__libc_init_array+0x2e>
 800185a:	bd70      	pop	{r4, r5, r6, pc}
 800185c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001860:	4798      	blx	r3
 8001862:	3601      	adds	r6, #1
 8001864:	e7ee      	b.n	8001844 <__libc_init_array+0xc>
 8001866:	f855 3b04 	ldr.w	r3, [r5], #4
 800186a:	4798      	blx	r3
 800186c:	3601      	adds	r6, #1
 800186e:	e7f2      	b.n	8001856 <__libc_init_array+0x1e>
 8001870:	08002940 	.word	0x08002940
 8001874:	08002940 	.word	0x08002940
 8001878:	08002940 	.word	0x08002940
 800187c:	08002944 	.word	0x08002944

08001880 <memset>:
 8001880:	4603      	mov	r3, r0
 8001882:	4402      	add	r2, r0
 8001884:	4293      	cmp	r3, r2
 8001886:	d100      	bne.n	800188a <memset+0xa>
 8001888:	4770      	bx	lr
 800188a:	f803 1b01 	strb.w	r1, [r3], #1
 800188e:	e7f9      	b.n	8001884 <memset+0x4>

08001890 <iprintf>:
 8001890:	b40f      	push	{r0, r1, r2, r3}
 8001892:	4b0a      	ldr	r3, [pc, #40]	; (80018bc <iprintf+0x2c>)
 8001894:	b513      	push	{r0, r1, r4, lr}
 8001896:	681c      	ldr	r4, [r3, #0]
 8001898:	b124      	cbz	r4, 80018a4 <iprintf+0x14>
 800189a:	69a3      	ldr	r3, [r4, #24]
 800189c:	b913      	cbnz	r3, 80018a4 <iprintf+0x14>
 800189e:	4620      	mov	r0, r4
 80018a0:	f000 fa5e 	bl	8001d60 <__sinit>
 80018a4:	ab05      	add	r3, sp, #20
 80018a6:	4620      	mov	r0, r4
 80018a8:	9a04      	ldr	r2, [sp, #16]
 80018aa:	68a1      	ldr	r1, [r4, #8]
 80018ac:	9301      	str	r3, [sp, #4]
 80018ae:	f000 fc29 	bl	8002104 <_vfiprintf_r>
 80018b2:	b002      	add	sp, #8
 80018b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80018b8:	b004      	add	sp, #16
 80018ba:	4770      	bx	lr
 80018bc:	2000000c 	.word	0x2000000c

080018c0 <_puts_r>:
 80018c0:	b570      	push	{r4, r5, r6, lr}
 80018c2:	460e      	mov	r6, r1
 80018c4:	4605      	mov	r5, r0
 80018c6:	b118      	cbz	r0, 80018d0 <_puts_r+0x10>
 80018c8:	6983      	ldr	r3, [r0, #24]
 80018ca:	b90b      	cbnz	r3, 80018d0 <_puts_r+0x10>
 80018cc:	f000 fa48 	bl	8001d60 <__sinit>
 80018d0:	69ab      	ldr	r3, [r5, #24]
 80018d2:	68ac      	ldr	r4, [r5, #8]
 80018d4:	b913      	cbnz	r3, 80018dc <_puts_r+0x1c>
 80018d6:	4628      	mov	r0, r5
 80018d8:	f000 fa42 	bl	8001d60 <__sinit>
 80018dc:	4b2c      	ldr	r3, [pc, #176]	; (8001990 <_puts_r+0xd0>)
 80018de:	429c      	cmp	r4, r3
 80018e0:	d120      	bne.n	8001924 <_puts_r+0x64>
 80018e2:	686c      	ldr	r4, [r5, #4]
 80018e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80018e6:	07db      	lsls	r3, r3, #31
 80018e8:	d405      	bmi.n	80018f6 <_puts_r+0x36>
 80018ea:	89a3      	ldrh	r3, [r4, #12]
 80018ec:	0598      	lsls	r0, r3, #22
 80018ee:	d402      	bmi.n	80018f6 <_puts_r+0x36>
 80018f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80018f2:	f000 fad3 	bl	8001e9c <__retarget_lock_acquire_recursive>
 80018f6:	89a3      	ldrh	r3, [r4, #12]
 80018f8:	0719      	lsls	r1, r3, #28
 80018fa:	d51d      	bpl.n	8001938 <_puts_r+0x78>
 80018fc:	6923      	ldr	r3, [r4, #16]
 80018fe:	b1db      	cbz	r3, 8001938 <_puts_r+0x78>
 8001900:	3e01      	subs	r6, #1
 8001902:	68a3      	ldr	r3, [r4, #8]
 8001904:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001908:	3b01      	subs	r3, #1
 800190a:	60a3      	str	r3, [r4, #8]
 800190c:	bb39      	cbnz	r1, 800195e <_puts_r+0x9e>
 800190e:	2b00      	cmp	r3, #0
 8001910:	da38      	bge.n	8001984 <_puts_r+0xc4>
 8001912:	4622      	mov	r2, r4
 8001914:	210a      	movs	r1, #10
 8001916:	4628      	mov	r0, r5
 8001918:	f000 f848 	bl	80019ac <__swbuf_r>
 800191c:	3001      	adds	r0, #1
 800191e:	d011      	beq.n	8001944 <_puts_r+0x84>
 8001920:	250a      	movs	r5, #10
 8001922:	e011      	b.n	8001948 <_puts_r+0x88>
 8001924:	4b1b      	ldr	r3, [pc, #108]	; (8001994 <_puts_r+0xd4>)
 8001926:	429c      	cmp	r4, r3
 8001928:	d101      	bne.n	800192e <_puts_r+0x6e>
 800192a:	68ac      	ldr	r4, [r5, #8]
 800192c:	e7da      	b.n	80018e4 <_puts_r+0x24>
 800192e:	4b1a      	ldr	r3, [pc, #104]	; (8001998 <_puts_r+0xd8>)
 8001930:	429c      	cmp	r4, r3
 8001932:	bf08      	it	eq
 8001934:	68ec      	ldreq	r4, [r5, #12]
 8001936:	e7d5      	b.n	80018e4 <_puts_r+0x24>
 8001938:	4621      	mov	r1, r4
 800193a:	4628      	mov	r0, r5
 800193c:	f000 f888 	bl	8001a50 <__swsetup_r>
 8001940:	2800      	cmp	r0, #0
 8001942:	d0dd      	beq.n	8001900 <_puts_r+0x40>
 8001944:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8001948:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800194a:	07da      	lsls	r2, r3, #31
 800194c:	d405      	bmi.n	800195a <_puts_r+0x9a>
 800194e:	89a3      	ldrh	r3, [r4, #12]
 8001950:	059b      	lsls	r3, r3, #22
 8001952:	d402      	bmi.n	800195a <_puts_r+0x9a>
 8001954:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001956:	f000 faa2 	bl	8001e9e <__retarget_lock_release_recursive>
 800195a:	4628      	mov	r0, r5
 800195c:	bd70      	pop	{r4, r5, r6, pc}
 800195e:	2b00      	cmp	r3, #0
 8001960:	da04      	bge.n	800196c <_puts_r+0xac>
 8001962:	69a2      	ldr	r2, [r4, #24]
 8001964:	429a      	cmp	r2, r3
 8001966:	dc06      	bgt.n	8001976 <_puts_r+0xb6>
 8001968:	290a      	cmp	r1, #10
 800196a:	d004      	beq.n	8001976 <_puts_r+0xb6>
 800196c:	6823      	ldr	r3, [r4, #0]
 800196e:	1c5a      	adds	r2, r3, #1
 8001970:	6022      	str	r2, [r4, #0]
 8001972:	7019      	strb	r1, [r3, #0]
 8001974:	e7c5      	b.n	8001902 <_puts_r+0x42>
 8001976:	4622      	mov	r2, r4
 8001978:	4628      	mov	r0, r5
 800197a:	f000 f817 	bl	80019ac <__swbuf_r>
 800197e:	3001      	adds	r0, #1
 8001980:	d1bf      	bne.n	8001902 <_puts_r+0x42>
 8001982:	e7df      	b.n	8001944 <_puts_r+0x84>
 8001984:	250a      	movs	r5, #10
 8001986:	6823      	ldr	r3, [r4, #0]
 8001988:	1c5a      	adds	r2, r3, #1
 800198a:	6022      	str	r2, [r4, #0]
 800198c:	701d      	strb	r5, [r3, #0]
 800198e:	e7db      	b.n	8001948 <_puts_r+0x88>
 8001990:	080028cc 	.word	0x080028cc
 8001994:	080028ec 	.word	0x080028ec
 8001998:	080028ac 	.word	0x080028ac

0800199c <puts>:
 800199c:	4b02      	ldr	r3, [pc, #8]	; (80019a8 <puts+0xc>)
 800199e:	4601      	mov	r1, r0
 80019a0:	6818      	ldr	r0, [r3, #0]
 80019a2:	f7ff bf8d 	b.w	80018c0 <_puts_r>
 80019a6:	bf00      	nop
 80019a8:	2000000c 	.word	0x2000000c

080019ac <__swbuf_r>:
 80019ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019ae:	460e      	mov	r6, r1
 80019b0:	4614      	mov	r4, r2
 80019b2:	4605      	mov	r5, r0
 80019b4:	b118      	cbz	r0, 80019be <__swbuf_r+0x12>
 80019b6:	6983      	ldr	r3, [r0, #24]
 80019b8:	b90b      	cbnz	r3, 80019be <__swbuf_r+0x12>
 80019ba:	f000 f9d1 	bl	8001d60 <__sinit>
 80019be:	4b21      	ldr	r3, [pc, #132]	; (8001a44 <__swbuf_r+0x98>)
 80019c0:	429c      	cmp	r4, r3
 80019c2:	d12b      	bne.n	8001a1c <__swbuf_r+0x70>
 80019c4:	686c      	ldr	r4, [r5, #4]
 80019c6:	69a3      	ldr	r3, [r4, #24]
 80019c8:	60a3      	str	r3, [r4, #8]
 80019ca:	89a3      	ldrh	r3, [r4, #12]
 80019cc:	071a      	lsls	r2, r3, #28
 80019ce:	d52f      	bpl.n	8001a30 <__swbuf_r+0x84>
 80019d0:	6923      	ldr	r3, [r4, #16]
 80019d2:	b36b      	cbz	r3, 8001a30 <__swbuf_r+0x84>
 80019d4:	6923      	ldr	r3, [r4, #16]
 80019d6:	6820      	ldr	r0, [r4, #0]
 80019d8:	b2f6      	uxtb	r6, r6
 80019da:	1ac0      	subs	r0, r0, r3
 80019dc:	6963      	ldr	r3, [r4, #20]
 80019de:	4637      	mov	r7, r6
 80019e0:	4283      	cmp	r3, r0
 80019e2:	dc04      	bgt.n	80019ee <__swbuf_r+0x42>
 80019e4:	4621      	mov	r1, r4
 80019e6:	4628      	mov	r0, r5
 80019e8:	f000 f926 	bl	8001c38 <_fflush_r>
 80019ec:	bb30      	cbnz	r0, 8001a3c <__swbuf_r+0x90>
 80019ee:	68a3      	ldr	r3, [r4, #8]
 80019f0:	3001      	adds	r0, #1
 80019f2:	3b01      	subs	r3, #1
 80019f4:	60a3      	str	r3, [r4, #8]
 80019f6:	6823      	ldr	r3, [r4, #0]
 80019f8:	1c5a      	adds	r2, r3, #1
 80019fa:	6022      	str	r2, [r4, #0]
 80019fc:	701e      	strb	r6, [r3, #0]
 80019fe:	6963      	ldr	r3, [r4, #20]
 8001a00:	4283      	cmp	r3, r0
 8001a02:	d004      	beq.n	8001a0e <__swbuf_r+0x62>
 8001a04:	89a3      	ldrh	r3, [r4, #12]
 8001a06:	07db      	lsls	r3, r3, #31
 8001a08:	d506      	bpl.n	8001a18 <__swbuf_r+0x6c>
 8001a0a:	2e0a      	cmp	r6, #10
 8001a0c:	d104      	bne.n	8001a18 <__swbuf_r+0x6c>
 8001a0e:	4621      	mov	r1, r4
 8001a10:	4628      	mov	r0, r5
 8001a12:	f000 f911 	bl	8001c38 <_fflush_r>
 8001a16:	b988      	cbnz	r0, 8001a3c <__swbuf_r+0x90>
 8001a18:	4638      	mov	r0, r7
 8001a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a1c:	4b0a      	ldr	r3, [pc, #40]	; (8001a48 <__swbuf_r+0x9c>)
 8001a1e:	429c      	cmp	r4, r3
 8001a20:	d101      	bne.n	8001a26 <__swbuf_r+0x7a>
 8001a22:	68ac      	ldr	r4, [r5, #8]
 8001a24:	e7cf      	b.n	80019c6 <__swbuf_r+0x1a>
 8001a26:	4b09      	ldr	r3, [pc, #36]	; (8001a4c <__swbuf_r+0xa0>)
 8001a28:	429c      	cmp	r4, r3
 8001a2a:	bf08      	it	eq
 8001a2c:	68ec      	ldreq	r4, [r5, #12]
 8001a2e:	e7ca      	b.n	80019c6 <__swbuf_r+0x1a>
 8001a30:	4621      	mov	r1, r4
 8001a32:	4628      	mov	r0, r5
 8001a34:	f000 f80c 	bl	8001a50 <__swsetup_r>
 8001a38:	2800      	cmp	r0, #0
 8001a3a:	d0cb      	beq.n	80019d4 <__swbuf_r+0x28>
 8001a3c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8001a40:	e7ea      	b.n	8001a18 <__swbuf_r+0x6c>
 8001a42:	bf00      	nop
 8001a44:	080028cc 	.word	0x080028cc
 8001a48:	080028ec 	.word	0x080028ec
 8001a4c:	080028ac 	.word	0x080028ac

08001a50 <__swsetup_r>:
 8001a50:	4b32      	ldr	r3, [pc, #200]	; (8001b1c <__swsetup_r+0xcc>)
 8001a52:	b570      	push	{r4, r5, r6, lr}
 8001a54:	681d      	ldr	r5, [r3, #0]
 8001a56:	4606      	mov	r6, r0
 8001a58:	460c      	mov	r4, r1
 8001a5a:	b125      	cbz	r5, 8001a66 <__swsetup_r+0x16>
 8001a5c:	69ab      	ldr	r3, [r5, #24]
 8001a5e:	b913      	cbnz	r3, 8001a66 <__swsetup_r+0x16>
 8001a60:	4628      	mov	r0, r5
 8001a62:	f000 f97d 	bl	8001d60 <__sinit>
 8001a66:	4b2e      	ldr	r3, [pc, #184]	; (8001b20 <__swsetup_r+0xd0>)
 8001a68:	429c      	cmp	r4, r3
 8001a6a:	d10f      	bne.n	8001a8c <__swsetup_r+0x3c>
 8001a6c:	686c      	ldr	r4, [r5, #4]
 8001a6e:	89a3      	ldrh	r3, [r4, #12]
 8001a70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001a74:	0719      	lsls	r1, r3, #28
 8001a76:	d42c      	bmi.n	8001ad2 <__swsetup_r+0x82>
 8001a78:	06dd      	lsls	r5, r3, #27
 8001a7a:	d411      	bmi.n	8001aa0 <__swsetup_r+0x50>
 8001a7c:	2309      	movs	r3, #9
 8001a7e:	6033      	str	r3, [r6, #0]
 8001a80:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001a84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a88:	81a3      	strh	r3, [r4, #12]
 8001a8a:	e03e      	b.n	8001b0a <__swsetup_r+0xba>
 8001a8c:	4b25      	ldr	r3, [pc, #148]	; (8001b24 <__swsetup_r+0xd4>)
 8001a8e:	429c      	cmp	r4, r3
 8001a90:	d101      	bne.n	8001a96 <__swsetup_r+0x46>
 8001a92:	68ac      	ldr	r4, [r5, #8]
 8001a94:	e7eb      	b.n	8001a6e <__swsetup_r+0x1e>
 8001a96:	4b24      	ldr	r3, [pc, #144]	; (8001b28 <__swsetup_r+0xd8>)
 8001a98:	429c      	cmp	r4, r3
 8001a9a:	bf08      	it	eq
 8001a9c:	68ec      	ldreq	r4, [r5, #12]
 8001a9e:	e7e6      	b.n	8001a6e <__swsetup_r+0x1e>
 8001aa0:	0758      	lsls	r0, r3, #29
 8001aa2:	d512      	bpl.n	8001aca <__swsetup_r+0x7a>
 8001aa4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001aa6:	b141      	cbz	r1, 8001aba <__swsetup_r+0x6a>
 8001aa8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001aac:	4299      	cmp	r1, r3
 8001aae:	d002      	beq.n	8001ab6 <__swsetup_r+0x66>
 8001ab0:	4630      	mov	r0, r6
 8001ab2:	f000 fa59 	bl	8001f68 <_free_r>
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	6363      	str	r3, [r4, #52]	; 0x34
 8001aba:	89a3      	ldrh	r3, [r4, #12]
 8001abc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001ac0:	81a3      	strh	r3, [r4, #12]
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	6063      	str	r3, [r4, #4]
 8001ac6:	6923      	ldr	r3, [r4, #16]
 8001ac8:	6023      	str	r3, [r4, #0]
 8001aca:	89a3      	ldrh	r3, [r4, #12]
 8001acc:	f043 0308 	orr.w	r3, r3, #8
 8001ad0:	81a3      	strh	r3, [r4, #12]
 8001ad2:	6923      	ldr	r3, [r4, #16]
 8001ad4:	b94b      	cbnz	r3, 8001aea <__swsetup_r+0x9a>
 8001ad6:	89a3      	ldrh	r3, [r4, #12]
 8001ad8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001adc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ae0:	d003      	beq.n	8001aea <__swsetup_r+0x9a>
 8001ae2:	4621      	mov	r1, r4
 8001ae4:	4630      	mov	r0, r6
 8001ae6:	f000 f9ff 	bl	8001ee8 <__smakebuf_r>
 8001aea:	89a0      	ldrh	r0, [r4, #12]
 8001aec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001af0:	f010 0301 	ands.w	r3, r0, #1
 8001af4:	d00a      	beq.n	8001b0c <__swsetup_r+0xbc>
 8001af6:	2300      	movs	r3, #0
 8001af8:	60a3      	str	r3, [r4, #8]
 8001afa:	6963      	ldr	r3, [r4, #20]
 8001afc:	425b      	negs	r3, r3
 8001afe:	61a3      	str	r3, [r4, #24]
 8001b00:	6923      	ldr	r3, [r4, #16]
 8001b02:	b943      	cbnz	r3, 8001b16 <__swsetup_r+0xc6>
 8001b04:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001b08:	d1ba      	bne.n	8001a80 <__swsetup_r+0x30>
 8001b0a:	bd70      	pop	{r4, r5, r6, pc}
 8001b0c:	0781      	lsls	r1, r0, #30
 8001b0e:	bf58      	it	pl
 8001b10:	6963      	ldrpl	r3, [r4, #20]
 8001b12:	60a3      	str	r3, [r4, #8]
 8001b14:	e7f4      	b.n	8001b00 <__swsetup_r+0xb0>
 8001b16:	2000      	movs	r0, #0
 8001b18:	e7f7      	b.n	8001b0a <__swsetup_r+0xba>
 8001b1a:	bf00      	nop
 8001b1c:	2000000c 	.word	0x2000000c
 8001b20:	080028cc 	.word	0x080028cc
 8001b24:	080028ec 	.word	0x080028ec
 8001b28:	080028ac 	.word	0x080028ac

08001b2c <__sflush_r>:
 8001b2c:	898a      	ldrh	r2, [r1, #12]
 8001b2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b32:	4605      	mov	r5, r0
 8001b34:	0710      	lsls	r0, r2, #28
 8001b36:	460c      	mov	r4, r1
 8001b38:	d458      	bmi.n	8001bec <__sflush_r+0xc0>
 8001b3a:	684b      	ldr	r3, [r1, #4]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	dc05      	bgt.n	8001b4c <__sflush_r+0x20>
 8001b40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	dc02      	bgt.n	8001b4c <__sflush_r+0x20>
 8001b46:	2000      	movs	r0, #0
 8001b48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001b4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001b4e:	2e00      	cmp	r6, #0
 8001b50:	d0f9      	beq.n	8001b46 <__sflush_r+0x1a>
 8001b52:	2300      	movs	r3, #0
 8001b54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001b58:	682f      	ldr	r7, [r5, #0]
 8001b5a:	602b      	str	r3, [r5, #0]
 8001b5c:	d032      	beq.n	8001bc4 <__sflush_r+0x98>
 8001b5e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001b60:	89a3      	ldrh	r3, [r4, #12]
 8001b62:	075a      	lsls	r2, r3, #29
 8001b64:	d505      	bpl.n	8001b72 <__sflush_r+0x46>
 8001b66:	6863      	ldr	r3, [r4, #4]
 8001b68:	1ac0      	subs	r0, r0, r3
 8001b6a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001b6c:	b10b      	cbz	r3, 8001b72 <__sflush_r+0x46>
 8001b6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b70:	1ac0      	subs	r0, r0, r3
 8001b72:	2300      	movs	r3, #0
 8001b74:	4602      	mov	r2, r0
 8001b76:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001b78:	4628      	mov	r0, r5
 8001b7a:	6a21      	ldr	r1, [r4, #32]
 8001b7c:	47b0      	blx	r6
 8001b7e:	1c43      	adds	r3, r0, #1
 8001b80:	89a3      	ldrh	r3, [r4, #12]
 8001b82:	d106      	bne.n	8001b92 <__sflush_r+0x66>
 8001b84:	6829      	ldr	r1, [r5, #0]
 8001b86:	291d      	cmp	r1, #29
 8001b88:	d82c      	bhi.n	8001be4 <__sflush_r+0xb8>
 8001b8a:	4a2a      	ldr	r2, [pc, #168]	; (8001c34 <__sflush_r+0x108>)
 8001b8c:	40ca      	lsrs	r2, r1
 8001b8e:	07d6      	lsls	r6, r2, #31
 8001b90:	d528      	bpl.n	8001be4 <__sflush_r+0xb8>
 8001b92:	2200      	movs	r2, #0
 8001b94:	6062      	str	r2, [r4, #4]
 8001b96:	6922      	ldr	r2, [r4, #16]
 8001b98:	04d9      	lsls	r1, r3, #19
 8001b9a:	6022      	str	r2, [r4, #0]
 8001b9c:	d504      	bpl.n	8001ba8 <__sflush_r+0x7c>
 8001b9e:	1c42      	adds	r2, r0, #1
 8001ba0:	d101      	bne.n	8001ba6 <__sflush_r+0x7a>
 8001ba2:	682b      	ldr	r3, [r5, #0]
 8001ba4:	b903      	cbnz	r3, 8001ba8 <__sflush_r+0x7c>
 8001ba6:	6560      	str	r0, [r4, #84]	; 0x54
 8001ba8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001baa:	602f      	str	r7, [r5, #0]
 8001bac:	2900      	cmp	r1, #0
 8001bae:	d0ca      	beq.n	8001b46 <__sflush_r+0x1a>
 8001bb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001bb4:	4299      	cmp	r1, r3
 8001bb6:	d002      	beq.n	8001bbe <__sflush_r+0x92>
 8001bb8:	4628      	mov	r0, r5
 8001bba:	f000 f9d5 	bl	8001f68 <_free_r>
 8001bbe:	2000      	movs	r0, #0
 8001bc0:	6360      	str	r0, [r4, #52]	; 0x34
 8001bc2:	e7c1      	b.n	8001b48 <__sflush_r+0x1c>
 8001bc4:	6a21      	ldr	r1, [r4, #32]
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	4628      	mov	r0, r5
 8001bca:	47b0      	blx	r6
 8001bcc:	1c41      	adds	r1, r0, #1
 8001bce:	d1c7      	bne.n	8001b60 <__sflush_r+0x34>
 8001bd0:	682b      	ldr	r3, [r5, #0]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d0c4      	beq.n	8001b60 <__sflush_r+0x34>
 8001bd6:	2b1d      	cmp	r3, #29
 8001bd8:	d001      	beq.n	8001bde <__sflush_r+0xb2>
 8001bda:	2b16      	cmp	r3, #22
 8001bdc:	d101      	bne.n	8001be2 <__sflush_r+0xb6>
 8001bde:	602f      	str	r7, [r5, #0]
 8001be0:	e7b1      	b.n	8001b46 <__sflush_r+0x1a>
 8001be2:	89a3      	ldrh	r3, [r4, #12]
 8001be4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001be8:	81a3      	strh	r3, [r4, #12]
 8001bea:	e7ad      	b.n	8001b48 <__sflush_r+0x1c>
 8001bec:	690f      	ldr	r7, [r1, #16]
 8001bee:	2f00      	cmp	r7, #0
 8001bf0:	d0a9      	beq.n	8001b46 <__sflush_r+0x1a>
 8001bf2:	0793      	lsls	r3, r2, #30
 8001bf4:	bf18      	it	ne
 8001bf6:	2300      	movne	r3, #0
 8001bf8:	680e      	ldr	r6, [r1, #0]
 8001bfa:	bf08      	it	eq
 8001bfc:	694b      	ldreq	r3, [r1, #20]
 8001bfe:	eba6 0807 	sub.w	r8, r6, r7
 8001c02:	600f      	str	r7, [r1, #0]
 8001c04:	608b      	str	r3, [r1, #8]
 8001c06:	f1b8 0f00 	cmp.w	r8, #0
 8001c0a:	dd9c      	ble.n	8001b46 <__sflush_r+0x1a>
 8001c0c:	4643      	mov	r3, r8
 8001c0e:	463a      	mov	r2, r7
 8001c10:	4628      	mov	r0, r5
 8001c12:	6a21      	ldr	r1, [r4, #32]
 8001c14:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001c16:	47b0      	blx	r6
 8001c18:	2800      	cmp	r0, #0
 8001c1a:	dc06      	bgt.n	8001c2a <__sflush_r+0xfe>
 8001c1c:	89a3      	ldrh	r3, [r4, #12]
 8001c1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c26:	81a3      	strh	r3, [r4, #12]
 8001c28:	e78e      	b.n	8001b48 <__sflush_r+0x1c>
 8001c2a:	4407      	add	r7, r0
 8001c2c:	eba8 0800 	sub.w	r8, r8, r0
 8001c30:	e7e9      	b.n	8001c06 <__sflush_r+0xda>
 8001c32:	bf00      	nop
 8001c34:	20400001 	.word	0x20400001

08001c38 <_fflush_r>:
 8001c38:	b538      	push	{r3, r4, r5, lr}
 8001c3a:	690b      	ldr	r3, [r1, #16]
 8001c3c:	4605      	mov	r5, r0
 8001c3e:	460c      	mov	r4, r1
 8001c40:	b913      	cbnz	r3, 8001c48 <_fflush_r+0x10>
 8001c42:	2500      	movs	r5, #0
 8001c44:	4628      	mov	r0, r5
 8001c46:	bd38      	pop	{r3, r4, r5, pc}
 8001c48:	b118      	cbz	r0, 8001c52 <_fflush_r+0x1a>
 8001c4a:	6983      	ldr	r3, [r0, #24]
 8001c4c:	b90b      	cbnz	r3, 8001c52 <_fflush_r+0x1a>
 8001c4e:	f000 f887 	bl	8001d60 <__sinit>
 8001c52:	4b14      	ldr	r3, [pc, #80]	; (8001ca4 <_fflush_r+0x6c>)
 8001c54:	429c      	cmp	r4, r3
 8001c56:	d11b      	bne.n	8001c90 <_fflush_r+0x58>
 8001c58:	686c      	ldr	r4, [r5, #4]
 8001c5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d0ef      	beq.n	8001c42 <_fflush_r+0xa>
 8001c62:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001c64:	07d0      	lsls	r0, r2, #31
 8001c66:	d404      	bmi.n	8001c72 <_fflush_r+0x3a>
 8001c68:	0599      	lsls	r1, r3, #22
 8001c6a:	d402      	bmi.n	8001c72 <_fflush_r+0x3a>
 8001c6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001c6e:	f000 f915 	bl	8001e9c <__retarget_lock_acquire_recursive>
 8001c72:	4628      	mov	r0, r5
 8001c74:	4621      	mov	r1, r4
 8001c76:	f7ff ff59 	bl	8001b2c <__sflush_r>
 8001c7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001c7c:	4605      	mov	r5, r0
 8001c7e:	07da      	lsls	r2, r3, #31
 8001c80:	d4e0      	bmi.n	8001c44 <_fflush_r+0xc>
 8001c82:	89a3      	ldrh	r3, [r4, #12]
 8001c84:	059b      	lsls	r3, r3, #22
 8001c86:	d4dd      	bmi.n	8001c44 <_fflush_r+0xc>
 8001c88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001c8a:	f000 f908 	bl	8001e9e <__retarget_lock_release_recursive>
 8001c8e:	e7d9      	b.n	8001c44 <_fflush_r+0xc>
 8001c90:	4b05      	ldr	r3, [pc, #20]	; (8001ca8 <_fflush_r+0x70>)
 8001c92:	429c      	cmp	r4, r3
 8001c94:	d101      	bne.n	8001c9a <_fflush_r+0x62>
 8001c96:	68ac      	ldr	r4, [r5, #8]
 8001c98:	e7df      	b.n	8001c5a <_fflush_r+0x22>
 8001c9a:	4b04      	ldr	r3, [pc, #16]	; (8001cac <_fflush_r+0x74>)
 8001c9c:	429c      	cmp	r4, r3
 8001c9e:	bf08      	it	eq
 8001ca0:	68ec      	ldreq	r4, [r5, #12]
 8001ca2:	e7da      	b.n	8001c5a <_fflush_r+0x22>
 8001ca4:	080028cc 	.word	0x080028cc
 8001ca8:	080028ec 	.word	0x080028ec
 8001cac:	080028ac 	.word	0x080028ac

08001cb0 <std>:
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	b510      	push	{r4, lr}
 8001cb4:	4604      	mov	r4, r0
 8001cb6:	e9c0 3300 	strd	r3, r3, [r0]
 8001cba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001cbe:	6083      	str	r3, [r0, #8]
 8001cc0:	8181      	strh	r1, [r0, #12]
 8001cc2:	6643      	str	r3, [r0, #100]	; 0x64
 8001cc4:	81c2      	strh	r2, [r0, #14]
 8001cc6:	6183      	str	r3, [r0, #24]
 8001cc8:	4619      	mov	r1, r3
 8001cca:	2208      	movs	r2, #8
 8001ccc:	305c      	adds	r0, #92	; 0x5c
 8001cce:	f7ff fdd7 	bl	8001880 <memset>
 8001cd2:	4b05      	ldr	r3, [pc, #20]	; (8001ce8 <std+0x38>)
 8001cd4:	6224      	str	r4, [r4, #32]
 8001cd6:	6263      	str	r3, [r4, #36]	; 0x24
 8001cd8:	4b04      	ldr	r3, [pc, #16]	; (8001cec <std+0x3c>)
 8001cda:	62a3      	str	r3, [r4, #40]	; 0x28
 8001cdc:	4b04      	ldr	r3, [pc, #16]	; (8001cf0 <std+0x40>)
 8001cde:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001ce0:	4b04      	ldr	r3, [pc, #16]	; (8001cf4 <std+0x44>)
 8001ce2:	6323      	str	r3, [r4, #48]	; 0x30
 8001ce4:	bd10      	pop	{r4, pc}
 8001ce6:	bf00      	nop
 8001ce8:	080026b1 	.word	0x080026b1
 8001cec:	080026d3 	.word	0x080026d3
 8001cf0:	0800270b 	.word	0x0800270b
 8001cf4:	0800272f 	.word	0x0800272f

08001cf8 <_cleanup_r>:
 8001cf8:	4901      	ldr	r1, [pc, #4]	; (8001d00 <_cleanup_r+0x8>)
 8001cfa:	f000 b8af 	b.w	8001e5c <_fwalk_reent>
 8001cfe:	bf00      	nop
 8001d00:	08001c39 	.word	0x08001c39

08001d04 <__sfmoreglue>:
 8001d04:	b570      	push	{r4, r5, r6, lr}
 8001d06:	2568      	movs	r5, #104	; 0x68
 8001d08:	1e4a      	subs	r2, r1, #1
 8001d0a:	4355      	muls	r5, r2
 8001d0c:	460e      	mov	r6, r1
 8001d0e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001d12:	f000 f975 	bl	8002000 <_malloc_r>
 8001d16:	4604      	mov	r4, r0
 8001d18:	b140      	cbz	r0, 8001d2c <__sfmoreglue+0x28>
 8001d1a:	2100      	movs	r1, #0
 8001d1c:	e9c0 1600 	strd	r1, r6, [r0]
 8001d20:	300c      	adds	r0, #12
 8001d22:	60a0      	str	r0, [r4, #8]
 8001d24:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001d28:	f7ff fdaa 	bl	8001880 <memset>
 8001d2c:	4620      	mov	r0, r4
 8001d2e:	bd70      	pop	{r4, r5, r6, pc}

08001d30 <__sfp_lock_acquire>:
 8001d30:	4801      	ldr	r0, [pc, #4]	; (8001d38 <__sfp_lock_acquire+0x8>)
 8001d32:	f000 b8b3 	b.w	8001e9c <__retarget_lock_acquire_recursive>
 8001d36:	bf00      	nop
 8001d38:	200000e8 	.word	0x200000e8

08001d3c <__sfp_lock_release>:
 8001d3c:	4801      	ldr	r0, [pc, #4]	; (8001d44 <__sfp_lock_release+0x8>)
 8001d3e:	f000 b8ae 	b.w	8001e9e <__retarget_lock_release_recursive>
 8001d42:	bf00      	nop
 8001d44:	200000e8 	.word	0x200000e8

08001d48 <__sinit_lock_acquire>:
 8001d48:	4801      	ldr	r0, [pc, #4]	; (8001d50 <__sinit_lock_acquire+0x8>)
 8001d4a:	f000 b8a7 	b.w	8001e9c <__retarget_lock_acquire_recursive>
 8001d4e:	bf00      	nop
 8001d50:	200000e3 	.word	0x200000e3

08001d54 <__sinit_lock_release>:
 8001d54:	4801      	ldr	r0, [pc, #4]	; (8001d5c <__sinit_lock_release+0x8>)
 8001d56:	f000 b8a2 	b.w	8001e9e <__retarget_lock_release_recursive>
 8001d5a:	bf00      	nop
 8001d5c:	200000e3 	.word	0x200000e3

08001d60 <__sinit>:
 8001d60:	b510      	push	{r4, lr}
 8001d62:	4604      	mov	r4, r0
 8001d64:	f7ff fff0 	bl	8001d48 <__sinit_lock_acquire>
 8001d68:	69a3      	ldr	r3, [r4, #24]
 8001d6a:	b11b      	cbz	r3, 8001d74 <__sinit+0x14>
 8001d6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001d70:	f7ff bff0 	b.w	8001d54 <__sinit_lock_release>
 8001d74:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001d78:	6523      	str	r3, [r4, #80]	; 0x50
 8001d7a:	4b13      	ldr	r3, [pc, #76]	; (8001dc8 <__sinit+0x68>)
 8001d7c:	4a13      	ldr	r2, [pc, #76]	; (8001dcc <__sinit+0x6c>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	62a2      	str	r2, [r4, #40]	; 0x28
 8001d82:	42a3      	cmp	r3, r4
 8001d84:	bf08      	it	eq
 8001d86:	2301      	moveq	r3, #1
 8001d88:	4620      	mov	r0, r4
 8001d8a:	bf08      	it	eq
 8001d8c:	61a3      	streq	r3, [r4, #24]
 8001d8e:	f000 f81f 	bl	8001dd0 <__sfp>
 8001d92:	6060      	str	r0, [r4, #4]
 8001d94:	4620      	mov	r0, r4
 8001d96:	f000 f81b 	bl	8001dd0 <__sfp>
 8001d9a:	60a0      	str	r0, [r4, #8]
 8001d9c:	4620      	mov	r0, r4
 8001d9e:	f000 f817 	bl	8001dd0 <__sfp>
 8001da2:	2200      	movs	r2, #0
 8001da4:	2104      	movs	r1, #4
 8001da6:	60e0      	str	r0, [r4, #12]
 8001da8:	6860      	ldr	r0, [r4, #4]
 8001daa:	f7ff ff81 	bl	8001cb0 <std>
 8001dae:	2201      	movs	r2, #1
 8001db0:	2109      	movs	r1, #9
 8001db2:	68a0      	ldr	r0, [r4, #8]
 8001db4:	f7ff ff7c 	bl	8001cb0 <std>
 8001db8:	2202      	movs	r2, #2
 8001dba:	2112      	movs	r1, #18
 8001dbc:	68e0      	ldr	r0, [r4, #12]
 8001dbe:	f7ff ff77 	bl	8001cb0 <std>
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	61a3      	str	r3, [r4, #24]
 8001dc6:	e7d1      	b.n	8001d6c <__sinit+0xc>
 8001dc8:	080028a8 	.word	0x080028a8
 8001dcc:	08001cf9 	.word	0x08001cf9

08001dd0 <__sfp>:
 8001dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dd2:	4607      	mov	r7, r0
 8001dd4:	f7ff ffac 	bl	8001d30 <__sfp_lock_acquire>
 8001dd8:	4b1e      	ldr	r3, [pc, #120]	; (8001e54 <__sfp+0x84>)
 8001dda:	681e      	ldr	r6, [r3, #0]
 8001ddc:	69b3      	ldr	r3, [r6, #24]
 8001dde:	b913      	cbnz	r3, 8001de6 <__sfp+0x16>
 8001de0:	4630      	mov	r0, r6
 8001de2:	f7ff ffbd 	bl	8001d60 <__sinit>
 8001de6:	3648      	adds	r6, #72	; 0x48
 8001de8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001dec:	3b01      	subs	r3, #1
 8001dee:	d503      	bpl.n	8001df8 <__sfp+0x28>
 8001df0:	6833      	ldr	r3, [r6, #0]
 8001df2:	b30b      	cbz	r3, 8001e38 <__sfp+0x68>
 8001df4:	6836      	ldr	r6, [r6, #0]
 8001df6:	e7f7      	b.n	8001de8 <__sfp+0x18>
 8001df8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001dfc:	b9d5      	cbnz	r5, 8001e34 <__sfp+0x64>
 8001dfe:	4b16      	ldr	r3, [pc, #88]	; (8001e58 <__sfp+0x88>)
 8001e00:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001e04:	60e3      	str	r3, [r4, #12]
 8001e06:	6665      	str	r5, [r4, #100]	; 0x64
 8001e08:	f000 f847 	bl	8001e9a <__retarget_lock_init_recursive>
 8001e0c:	f7ff ff96 	bl	8001d3c <__sfp_lock_release>
 8001e10:	2208      	movs	r2, #8
 8001e12:	4629      	mov	r1, r5
 8001e14:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001e18:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001e1c:	6025      	str	r5, [r4, #0]
 8001e1e:	61a5      	str	r5, [r4, #24]
 8001e20:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001e24:	f7ff fd2c 	bl	8001880 <memset>
 8001e28:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001e2c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001e30:	4620      	mov	r0, r4
 8001e32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e34:	3468      	adds	r4, #104	; 0x68
 8001e36:	e7d9      	b.n	8001dec <__sfp+0x1c>
 8001e38:	2104      	movs	r1, #4
 8001e3a:	4638      	mov	r0, r7
 8001e3c:	f7ff ff62 	bl	8001d04 <__sfmoreglue>
 8001e40:	4604      	mov	r4, r0
 8001e42:	6030      	str	r0, [r6, #0]
 8001e44:	2800      	cmp	r0, #0
 8001e46:	d1d5      	bne.n	8001df4 <__sfp+0x24>
 8001e48:	f7ff ff78 	bl	8001d3c <__sfp_lock_release>
 8001e4c:	230c      	movs	r3, #12
 8001e4e:	603b      	str	r3, [r7, #0]
 8001e50:	e7ee      	b.n	8001e30 <__sfp+0x60>
 8001e52:	bf00      	nop
 8001e54:	080028a8 	.word	0x080028a8
 8001e58:	ffff0001 	.word	0xffff0001

08001e5c <_fwalk_reent>:
 8001e5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001e60:	4606      	mov	r6, r0
 8001e62:	4688      	mov	r8, r1
 8001e64:	2700      	movs	r7, #0
 8001e66:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001e6a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001e6e:	f1b9 0901 	subs.w	r9, r9, #1
 8001e72:	d505      	bpl.n	8001e80 <_fwalk_reent+0x24>
 8001e74:	6824      	ldr	r4, [r4, #0]
 8001e76:	2c00      	cmp	r4, #0
 8001e78:	d1f7      	bne.n	8001e6a <_fwalk_reent+0xe>
 8001e7a:	4638      	mov	r0, r7
 8001e7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001e80:	89ab      	ldrh	r3, [r5, #12]
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d907      	bls.n	8001e96 <_fwalk_reent+0x3a>
 8001e86:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	d003      	beq.n	8001e96 <_fwalk_reent+0x3a>
 8001e8e:	4629      	mov	r1, r5
 8001e90:	4630      	mov	r0, r6
 8001e92:	47c0      	blx	r8
 8001e94:	4307      	orrs	r7, r0
 8001e96:	3568      	adds	r5, #104	; 0x68
 8001e98:	e7e9      	b.n	8001e6e <_fwalk_reent+0x12>

08001e9a <__retarget_lock_init_recursive>:
 8001e9a:	4770      	bx	lr

08001e9c <__retarget_lock_acquire_recursive>:
 8001e9c:	4770      	bx	lr

08001e9e <__retarget_lock_release_recursive>:
 8001e9e:	4770      	bx	lr

08001ea0 <__swhatbuf_r>:
 8001ea0:	b570      	push	{r4, r5, r6, lr}
 8001ea2:	460e      	mov	r6, r1
 8001ea4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ea8:	4614      	mov	r4, r2
 8001eaa:	2900      	cmp	r1, #0
 8001eac:	461d      	mov	r5, r3
 8001eae:	b096      	sub	sp, #88	; 0x58
 8001eb0:	da07      	bge.n	8001ec2 <__swhatbuf_r+0x22>
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	602b      	str	r3, [r5, #0]
 8001eb6:	89b3      	ldrh	r3, [r6, #12]
 8001eb8:	061a      	lsls	r2, r3, #24
 8001eba:	d410      	bmi.n	8001ede <__swhatbuf_r+0x3e>
 8001ebc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ec0:	e00e      	b.n	8001ee0 <__swhatbuf_r+0x40>
 8001ec2:	466a      	mov	r2, sp
 8001ec4:	f000 fc5a 	bl	800277c <_fstat_r>
 8001ec8:	2800      	cmp	r0, #0
 8001eca:	dbf2      	blt.n	8001eb2 <__swhatbuf_r+0x12>
 8001ecc:	9a01      	ldr	r2, [sp, #4]
 8001ece:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001ed2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001ed6:	425a      	negs	r2, r3
 8001ed8:	415a      	adcs	r2, r3
 8001eda:	602a      	str	r2, [r5, #0]
 8001edc:	e7ee      	b.n	8001ebc <__swhatbuf_r+0x1c>
 8001ede:	2340      	movs	r3, #64	; 0x40
 8001ee0:	2000      	movs	r0, #0
 8001ee2:	6023      	str	r3, [r4, #0]
 8001ee4:	b016      	add	sp, #88	; 0x58
 8001ee6:	bd70      	pop	{r4, r5, r6, pc}

08001ee8 <__smakebuf_r>:
 8001ee8:	898b      	ldrh	r3, [r1, #12]
 8001eea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001eec:	079d      	lsls	r5, r3, #30
 8001eee:	4606      	mov	r6, r0
 8001ef0:	460c      	mov	r4, r1
 8001ef2:	d507      	bpl.n	8001f04 <__smakebuf_r+0x1c>
 8001ef4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001ef8:	6023      	str	r3, [r4, #0]
 8001efa:	6123      	str	r3, [r4, #16]
 8001efc:	2301      	movs	r3, #1
 8001efe:	6163      	str	r3, [r4, #20]
 8001f00:	b002      	add	sp, #8
 8001f02:	bd70      	pop	{r4, r5, r6, pc}
 8001f04:	466a      	mov	r2, sp
 8001f06:	ab01      	add	r3, sp, #4
 8001f08:	f7ff ffca 	bl	8001ea0 <__swhatbuf_r>
 8001f0c:	9900      	ldr	r1, [sp, #0]
 8001f0e:	4605      	mov	r5, r0
 8001f10:	4630      	mov	r0, r6
 8001f12:	f000 f875 	bl	8002000 <_malloc_r>
 8001f16:	b948      	cbnz	r0, 8001f2c <__smakebuf_r+0x44>
 8001f18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001f1c:	059a      	lsls	r2, r3, #22
 8001f1e:	d4ef      	bmi.n	8001f00 <__smakebuf_r+0x18>
 8001f20:	f023 0303 	bic.w	r3, r3, #3
 8001f24:	f043 0302 	orr.w	r3, r3, #2
 8001f28:	81a3      	strh	r3, [r4, #12]
 8001f2a:	e7e3      	b.n	8001ef4 <__smakebuf_r+0xc>
 8001f2c:	4b0d      	ldr	r3, [pc, #52]	; (8001f64 <__smakebuf_r+0x7c>)
 8001f2e:	62b3      	str	r3, [r6, #40]	; 0x28
 8001f30:	89a3      	ldrh	r3, [r4, #12]
 8001f32:	6020      	str	r0, [r4, #0]
 8001f34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f38:	81a3      	strh	r3, [r4, #12]
 8001f3a:	9b00      	ldr	r3, [sp, #0]
 8001f3c:	6120      	str	r0, [r4, #16]
 8001f3e:	6163      	str	r3, [r4, #20]
 8001f40:	9b01      	ldr	r3, [sp, #4]
 8001f42:	b15b      	cbz	r3, 8001f5c <__smakebuf_r+0x74>
 8001f44:	4630      	mov	r0, r6
 8001f46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001f4a:	f000 fc29 	bl	80027a0 <_isatty_r>
 8001f4e:	b128      	cbz	r0, 8001f5c <__smakebuf_r+0x74>
 8001f50:	89a3      	ldrh	r3, [r4, #12]
 8001f52:	f023 0303 	bic.w	r3, r3, #3
 8001f56:	f043 0301 	orr.w	r3, r3, #1
 8001f5a:	81a3      	strh	r3, [r4, #12]
 8001f5c:	89a0      	ldrh	r0, [r4, #12]
 8001f5e:	4305      	orrs	r5, r0
 8001f60:	81a5      	strh	r5, [r4, #12]
 8001f62:	e7cd      	b.n	8001f00 <__smakebuf_r+0x18>
 8001f64:	08001cf9 	.word	0x08001cf9

08001f68 <_free_r>:
 8001f68:	b538      	push	{r3, r4, r5, lr}
 8001f6a:	4605      	mov	r5, r0
 8001f6c:	2900      	cmp	r1, #0
 8001f6e:	d043      	beq.n	8001ff8 <_free_r+0x90>
 8001f70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001f74:	1f0c      	subs	r4, r1, #4
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	bfb8      	it	lt
 8001f7a:	18e4      	addlt	r4, r4, r3
 8001f7c:	f000 fc40 	bl	8002800 <__malloc_lock>
 8001f80:	4a1e      	ldr	r2, [pc, #120]	; (8001ffc <_free_r+0x94>)
 8001f82:	6813      	ldr	r3, [r2, #0]
 8001f84:	4610      	mov	r0, r2
 8001f86:	b933      	cbnz	r3, 8001f96 <_free_r+0x2e>
 8001f88:	6063      	str	r3, [r4, #4]
 8001f8a:	6014      	str	r4, [r2, #0]
 8001f8c:	4628      	mov	r0, r5
 8001f8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001f92:	f000 bc3b 	b.w	800280c <__malloc_unlock>
 8001f96:	42a3      	cmp	r3, r4
 8001f98:	d90a      	bls.n	8001fb0 <_free_r+0x48>
 8001f9a:	6821      	ldr	r1, [r4, #0]
 8001f9c:	1862      	adds	r2, r4, r1
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	bf01      	itttt	eq
 8001fa2:	681a      	ldreq	r2, [r3, #0]
 8001fa4:	685b      	ldreq	r3, [r3, #4]
 8001fa6:	1852      	addeq	r2, r2, r1
 8001fa8:	6022      	streq	r2, [r4, #0]
 8001faa:	6063      	str	r3, [r4, #4]
 8001fac:	6004      	str	r4, [r0, #0]
 8001fae:	e7ed      	b.n	8001f8c <_free_r+0x24>
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	b10b      	cbz	r3, 8001fba <_free_r+0x52>
 8001fb6:	42a3      	cmp	r3, r4
 8001fb8:	d9fa      	bls.n	8001fb0 <_free_r+0x48>
 8001fba:	6811      	ldr	r1, [r2, #0]
 8001fbc:	1850      	adds	r0, r2, r1
 8001fbe:	42a0      	cmp	r0, r4
 8001fc0:	d10b      	bne.n	8001fda <_free_r+0x72>
 8001fc2:	6820      	ldr	r0, [r4, #0]
 8001fc4:	4401      	add	r1, r0
 8001fc6:	1850      	adds	r0, r2, r1
 8001fc8:	4283      	cmp	r3, r0
 8001fca:	6011      	str	r1, [r2, #0]
 8001fcc:	d1de      	bne.n	8001f8c <_free_r+0x24>
 8001fce:	6818      	ldr	r0, [r3, #0]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	4401      	add	r1, r0
 8001fd4:	6011      	str	r1, [r2, #0]
 8001fd6:	6053      	str	r3, [r2, #4]
 8001fd8:	e7d8      	b.n	8001f8c <_free_r+0x24>
 8001fda:	d902      	bls.n	8001fe2 <_free_r+0x7a>
 8001fdc:	230c      	movs	r3, #12
 8001fde:	602b      	str	r3, [r5, #0]
 8001fe0:	e7d4      	b.n	8001f8c <_free_r+0x24>
 8001fe2:	6820      	ldr	r0, [r4, #0]
 8001fe4:	1821      	adds	r1, r4, r0
 8001fe6:	428b      	cmp	r3, r1
 8001fe8:	bf01      	itttt	eq
 8001fea:	6819      	ldreq	r1, [r3, #0]
 8001fec:	685b      	ldreq	r3, [r3, #4]
 8001fee:	1809      	addeq	r1, r1, r0
 8001ff0:	6021      	streq	r1, [r4, #0]
 8001ff2:	6063      	str	r3, [r4, #4]
 8001ff4:	6054      	str	r4, [r2, #4]
 8001ff6:	e7c9      	b.n	8001f8c <_free_r+0x24>
 8001ff8:	bd38      	pop	{r3, r4, r5, pc}
 8001ffa:	bf00      	nop
 8001ffc:	20000090 	.word	0x20000090

08002000 <_malloc_r>:
 8002000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002002:	1ccd      	adds	r5, r1, #3
 8002004:	f025 0503 	bic.w	r5, r5, #3
 8002008:	3508      	adds	r5, #8
 800200a:	2d0c      	cmp	r5, #12
 800200c:	bf38      	it	cc
 800200e:	250c      	movcc	r5, #12
 8002010:	2d00      	cmp	r5, #0
 8002012:	4606      	mov	r6, r0
 8002014:	db01      	blt.n	800201a <_malloc_r+0x1a>
 8002016:	42a9      	cmp	r1, r5
 8002018:	d903      	bls.n	8002022 <_malloc_r+0x22>
 800201a:	230c      	movs	r3, #12
 800201c:	6033      	str	r3, [r6, #0]
 800201e:	2000      	movs	r0, #0
 8002020:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002022:	f000 fbed 	bl	8002800 <__malloc_lock>
 8002026:	4921      	ldr	r1, [pc, #132]	; (80020ac <_malloc_r+0xac>)
 8002028:	680a      	ldr	r2, [r1, #0]
 800202a:	4614      	mov	r4, r2
 800202c:	b99c      	cbnz	r4, 8002056 <_malloc_r+0x56>
 800202e:	4f20      	ldr	r7, [pc, #128]	; (80020b0 <_malloc_r+0xb0>)
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	b923      	cbnz	r3, 800203e <_malloc_r+0x3e>
 8002034:	4621      	mov	r1, r4
 8002036:	4630      	mov	r0, r6
 8002038:	f000 fb2a 	bl	8002690 <_sbrk_r>
 800203c:	6038      	str	r0, [r7, #0]
 800203e:	4629      	mov	r1, r5
 8002040:	4630      	mov	r0, r6
 8002042:	f000 fb25 	bl	8002690 <_sbrk_r>
 8002046:	1c43      	adds	r3, r0, #1
 8002048:	d123      	bne.n	8002092 <_malloc_r+0x92>
 800204a:	230c      	movs	r3, #12
 800204c:	4630      	mov	r0, r6
 800204e:	6033      	str	r3, [r6, #0]
 8002050:	f000 fbdc 	bl	800280c <__malloc_unlock>
 8002054:	e7e3      	b.n	800201e <_malloc_r+0x1e>
 8002056:	6823      	ldr	r3, [r4, #0]
 8002058:	1b5b      	subs	r3, r3, r5
 800205a:	d417      	bmi.n	800208c <_malloc_r+0x8c>
 800205c:	2b0b      	cmp	r3, #11
 800205e:	d903      	bls.n	8002068 <_malloc_r+0x68>
 8002060:	6023      	str	r3, [r4, #0]
 8002062:	441c      	add	r4, r3
 8002064:	6025      	str	r5, [r4, #0]
 8002066:	e004      	b.n	8002072 <_malloc_r+0x72>
 8002068:	6863      	ldr	r3, [r4, #4]
 800206a:	42a2      	cmp	r2, r4
 800206c:	bf0c      	ite	eq
 800206e:	600b      	streq	r3, [r1, #0]
 8002070:	6053      	strne	r3, [r2, #4]
 8002072:	4630      	mov	r0, r6
 8002074:	f000 fbca 	bl	800280c <__malloc_unlock>
 8002078:	f104 000b 	add.w	r0, r4, #11
 800207c:	1d23      	adds	r3, r4, #4
 800207e:	f020 0007 	bic.w	r0, r0, #7
 8002082:	1ac2      	subs	r2, r0, r3
 8002084:	d0cc      	beq.n	8002020 <_malloc_r+0x20>
 8002086:	1a1b      	subs	r3, r3, r0
 8002088:	50a3      	str	r3, [r4, r2]
 800208a:	e7c9      	b.n	8002020 <_malloc_r+0x20>
 800208c:	4622      	mov	r2, r4
 800208e:	6864      	ldr	r4, [r4, #4]
 8002090:	e7cc      	b.n	800202c <_malloc_r+0x2c>
 8002092:	1cc4      	adds	r4, r0, #3
 8002094:	f024 0403 	bic.w	r4, r4, #3
 8002098:	42a0      	cmp	r0, r4
 800209a:	d0e3      	beq.n	8002064 <_malloc_r+0x64>
 800209c:	1a21      	subs	r1, r4, r0
 800209e:	4630      	mov	r0, r6
 80020a0:	f000 faf6 	bl	8002690 <_sbrk_r>
 80020a4:	3001      	adds	r0, #1
 80020a6:	d1dd      	bne.n	8002064 <_malloc_r+0x64>
 80020a8:	e7cf      	b.n	800204a <_malloc_r+0x4a>
 80020aa:	bf00      	nop
 80020ac:	20000090 	.word	0x20000090
 80020b0:	20000094 	.word	0x20000094

080020b4 <__sfputc_r>:
 80020b4:	6893      	ldr	r3, [r2, #8]
 80020b6:	b410      	push	{r4}
 80020b8:	3b01      	subs	r3, #1
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	6093      	str	r3, [r2, #8]
 80020be:	da07      	bge.n	80020d0 <__sfputc_r+0x1c>
 80020c0:	6994      	ldr	r4, [r2, #24]
 80020c2:	42a3      	cmp	r3, r4
 80020c4:	db01      	blt.n	80020ca <__sfputc_r+0x16>
 80020c6:	290a      	cmp	r1, #10
 80020c8:	d102      	bne.n	80020d0 <__sfputc_r+0x1c>
 80020ca:	bc10      	pop	{r4}
 80020cc:	f7ff bc6e 	b.w	80019ac <__swbuf_r>
 80020d0:	6813      	ldr	r3, [r2, #0]
 80020d2:	1c58      	adds	r0, r3, #1
 80020d4:	6010      	str	r0, [r2, #0]
 80020d6:	7019      	strb	r1, [r3, #0]
 80020d8:	4608      	mov	r0, r1
 80020da:	bc10      	pop	{r4}
 80020dc:	4770      	bx	lr

080020de <__sfputs_r>:
 80020de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020e0:	4606      	mov	r6, r0
 80020e2:	460f      	mov	r7, r1
 80020e4:	4614      	mov	r4, r2
 80020e6:	18d5      	adds	r5, r2, r3
 80020e8:	42ac      	cmp	r4, r5
 80020ea:	d101      	bne.n	80020f0 <__sfputs_r+0x12>
 80020ec:	2000      	movs	r0, #0
 80020ee:	e007      	b.n	8002100 <__sfputs_r+0x22>
 80020f0:	463a      	mov	r2, r7
 80020f2:	4630      	mov	r0, r6
 80020f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80020f8:	f7ff ffdc 	bl	80020b4 <__sfputc_r>
 80020fc:	1c43      	adds	r3, r0, #1
 80020fe:	d1f3      	bne.n	80020e8 <__sfputs_r+0xa>
 8002100:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002104 <_vfiprintf_r>:
 8002104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002108:	460d      	mov	r5, r1
 800210a:	4614      	mov	r4, r2
 800210c:	4698      	mov	r8, r3
 800210e:	4606      	mov	r6, r0
 8002110:	b09d      	sub	sp, #116	; 0x74
 8002112:	b118      	cbz	r0, 800211c <_vfiprintf_r+0x18>
 8002114:	6983      	ldr	r3, [r0, #24]
 8002116:	b90b      	cbnz	r3, 800211c <_vfiprintf_r+0x18>
 8002118:	f7ff fe22 	bl	8001d60 <__sinit>
 800211c:	4b89      	ldr	r3, [pc, #548]	; (8002344 <_vfiprintf_r+0x240>)
 800211e:	429d      	cmp	r5, r3
 8002120:	d11b      	bne.n	800215a <_vfiprintf_r+0x56>
 8002122:	6875      	ldr	r5, [r6, #4]
 8002124:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002126:	07d9      	lsls	r1, r3, #31
 8002128:	d405      	bmi.n	8002136 <_vfiprintf_r+0x32>
 800212a:	89ab      	ldrh	r3, [r5, #12]
 800212c:	059a      	lsls	r2, r3, #22
 800212e:	d402      	bmi.n	8002136 <_vfiprintf_r+0x32>
 8002130:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002132:	f7ff feb3 	bl	8001e9c <__retarget_lock_acquire_recursive>
 8002136:	89ab      	ldrh	r3, [r5, #12]
 8002138:	071b      	lsls	r3, r3, #28
 800213a:	d501      	bpl.n	8002140 <_vfiprintf_r+0x3c>
 800213c:	692b      	ldr	r3, [r5, #16]
 800213e:	b9eb      	cbnz	r3, 800217c <_vfiprintf_r+0x78>
 8002140:	4629      	mov	r1, r5
 8002142:	4630      	mov	r0, r6
 8002144:	f7ff fc84 	bl	8001a50 <__swsetup_r>
 8002148:	b1c0      	cbz	r0, 800217c <_vfiprintf_r+0x78>
 800214a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800214c:	07dc      	lsls	r4, r3, #31
 800214e:	d50e      	bpl.n	800216e <_vfiprintf_r+0x6a>
 8002150:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002154:	b01d      	add	sp, #116	; 0x74
 8002156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800215a:	4b7b      	ldr	r3, [pc, #492]	; (8002348 <_vfiprintf_r+0x244>)
 800215c:	429d      	cmp	r5, r3
 800215e:	d101      	bne.n	8002164 <_vfiprintf_r+0x60>
 8002160:	68b5      	ldr	r5, [r6, #8]
 8002162:	e7df      	b.n	8002124 <_vfiprintf_r+0x20>
 8002164:	4b79      	ldr	r3, [pc, #484]	; (800234c <_vfiprintf_r+0x248>)
 8002166:	429d      	cmp	r5, r3
 8002168:	bf08      	it	eq
 800216a:	68f5      	ldreq	r5, [r6, #12]
 800216c:	e7da      	b.n	8002124 <_vfiprintf_r+0x20>
 800216e:	89ab      	ldrh	r3, [r5, #12]
 8002170:	0598      	lsls	r0, r3, #22
 8002172:	d4ed      	bmi.n	8002150 <_vfiprintf_r+0x4c>
 8002174:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002176:	f7ff fe92 	bl	8001e9e <__retarget_lock_release_recursive>
 800217a:	e7e9      	b.n	8002150 <_vfiprintf_r+0x4c>
 800217c:	2300      	movs	r3, #0
 800217e:	9309      	str	r3, [sp, #36]	; 0x24
 8002180:	2320      	movs	r3, #32
 8002182:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002186:	2330      	movs	r3, #48	; 0x30
 8002188:	f04f 0901 	mov.w	r9, #1
 800218c:	f8cd 800c 	str.w	r8, [sp, #12]
 8002190:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8002350 <_vfiprintf_r+0x24c>
 8002194:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002198:	4623      	mov	r3, r4
 800219a:	469a      	mov	sl, r3
 800219c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80021a0:	b10a      	cbz	r2, 80021a6 <_vfiprintf_r+0xa2>
 80021a2:	2a25      	cmp	r2, #37	; 0x25
 80021a4:	d1f9      	bne.n	800219a <_vfiprintf_r+0x96>
 80021a6:	ebba 0b04 	subs.w	fp, sl, r4
 80021aa:	d00b      	beq.n	80021c4 <_vfiprintf_r+0xc0>
 80021ac:	465b      	mov	r3, fp
 80021ae:	4622      	mov	r2, r4
 80021b0:	4629      	mov	r1, r5
 80021b2:	4630      	mov	r0, r6
 80021b4:	f7ff ff93 	bl	80020de <__sfputs_r>
 80021b8:	3001      	adds	r0, #1
 80021ba:	f000 80aa 	beq.w	8002312 <_vfiprintf_r+0x20e>
 80021be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80021c0:	445a      	add	r2, fp
 80021c2:	9209      	str	r2, [sp, #36]	; 0x24
 80021c4:	f89a 3000 	ldrb.w	r3, [sl]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	f000 80a2 	beq.w	8002312 <_vfiprintf_r+0x20e>
 80021ce:	2300      	movs	r3, #0
 80021d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80021d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80021d8:	f10a 0a01 	add.w	sl, sl, #1
 80021dc:	9304      	str	r3, [sp, #16]
 80021de:	9307      	str	r3, [sp, #28]
 80021e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80021e4:	931a      	str	r3, [sp, #104]	; 0x68
 80021e6:	4654      	mov	r4, sl
 80021e8:	2205      	movs	r2, #5
 80021ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80021ee:	4858      	ldr	r0, [pc, #352]	; (8002350 <_vfiprintf_r+0x24c>)
 80021f0:	f000 faf8 	bl	80027e4 <memchr>
 80021f4:	9a04      	ldr	r2, [sp, #16]
 80021f6:	b9d8      	cbnz	r0, 8002230 <_vfiprintf_r+0x12c>
 80021f8:	06d1      	lsls	r1, r2, #27
 80021fa:	bf44      	itt	mi
 80021fc:	2320      	movmi	r3, #32
 80021fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002202:	0713      	lsls	r3, r2, #28
 8002204:	bf44      	itt	mi
 8002206:	232b      	movmi	r3, #43	; 0x2b
 8002208:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800220c:	f89a 3000 	ldrb.w	r3, [sl]
 8002210:	2b2a      	cmp	r3, #42	; 0x2a
 8002212:	d015      	beq.n	8002240 <_vfiprintf_r+0x13c>
 8002214:	4654      	mov	r4, sl
 8002216:	2000      	movs	r0, #0
 8002218:	f04f 0c0a 	mov.w	ip, #10
 800221c:	9a07      	ldr	r2, [sp, #28]
 800221e:	4621      	mov	r1, r4
 8002220:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002224:	3b30      	subs	r3, #48	; 0x30
 8002226:	2b09      	cmp	r3, #9
 8002228:	d94e      	bls.n	80022c8 <_vfiprintf_r+0x1c4>
 800222a:	b1b0      	cbz	r0, 800225a <_vfiprintf_r+0x156>
 800222c:	9207      	str	r2, [sp, #28]
 800222e:	e014      	b.n	800225a <_vfiprintf_r+0x156>
 8002230:	eba0 0308 	sub.w	r3, r0, r8
 8002234:	fa09 f303 	lsl.w	r3, r9, r3
 8002238:	4313      	orrs	r3, r2
 800223a:	46a2      	mov	sl, r4
 800223c:	9304      	str	r3, [sp, #16]
 800223e:	e7d2      	b.n	80021e6 <_vfiprintf_r+0xe2>
 8002240:	9b03      	ldr	r3, [sp, #12]
 8002242:	1d19      	adds	r1, r3, #4
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	9103      	str	r1, [sp, #12]
 8002248:	2b00      	cmp	r3, #0
 800224a:	bfbb      	ittet	lt
 800224c:	425b      	neglt	r3, r3
 800224e:	f042 0202 	orrlt.w	r2, r2, #2
 8002252:	9307      	strge	r3, [sp, #28]
 8002254:	9307      	strlt	r3, [sp, #28]
 8002256:	bfb8      	it	lt
 8002258:	9204      	strlt	r2, [sp, #16]
 800225a:	7823      	ldrb	r3, [r4, #0]
 800225c:	2b2e      	cmp	r3, #46	; 0x2e
 800225e:	d10c      	bne.n	800227a <_vfiprintf_r+0x176>
 8002260:	7863      	ldrb	r3, [r4, #1]
 8002262:	2b2a      	cmp	r3, #42	; 0x2a
 8002264:	d135      	bne.n	80022d2 <_vfiprintf_r+0x1ce>
 8002266:	9b03      	ldr	r3, [sp, #12]
 8002268:	3402      	adds	r4, #2
 800226a:	1d1a      	adds	r2, r3, #4
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	9203      	str	r2, [sp, #12]
 8002270:	2b00      	cmp	r3, #0
 8002272:	bfb8      	it	lt
 8002274:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002278:	9305      	str	r3, [sp, #20]
 800227a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8002360 <_vfiprintf_r+0x25c>
 800227e:	2203      	movs	r2, #3
 8002280:	4650      	mov	r0, sl
 8002282:	7821      	ldrb	r1, [r4, #0]
 8002284:	f000 faae 	bl	80027e4 <memchr>
 8002288:	b140      	cbz	r0, 800229c <_vfiprintf_r+0x198>
 800228a:	2340      	movs	r3, #64	; 0x40
 800228c:	eba0 000a 	sub.w	r0, r0, sl
 8002290:	fa03 f000 	lsl.w	r0, r3, r0
 8002294:	9b04      	ldr	r3, [sp, #16]
 8002296:	3401      	adds	r4, #1
 8002298:	4303      	orrs	r3, r0
 800229a:	9304      	str	r3, [sp, #16]
 800229c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80022a0:	2206      	movs	r2, #6
 80022a2:	482c      	ldr	r0, [pc, #176]	; (8002354 <_vfiprintf_r+0x250>)
 80022a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80022a8:	f000 fa9c 	bl	80027e4 <memchr>
 80022ac:	2800      	cmp	r0, #0
 80022ae:	d03f      	beq.n	8002330 <_vfiprintf_r+0x22c>
 80022b0:	4b29      	ldr	r3, [pc, #164]	; (8002358 <_vfiprintf_r+0x254>)
 80022b2:	bb1b      	cbnz	r3, 80022fc <_vfiprintf_r+0x1f8>
 80022b4:	9b03      	ldr	r3, [sp, #12]
 80022b6:	3307      	adds	r3, #7
 80022b8:	f023 0307 	bic.w	r3, r3, #7
 80022bc:	3308      	adds	r3, #8
 80022be:	9303      	str	r3, [sp, #12]
 80022c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80022c2:	443b      	add	r3, r7
 80022c4:	9309      	str	r3, [sp, #36]	; 0x24
 80022c6:	e767      	b.n	8002198 <_vfiprintf_r+0x94>
 80022c8:	460c      	mov	r4, r1
 80022ca:	2001      	movs	r0, #1
 80022cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80022d0:	e7a5      	b.n	800221e <_vfiprintf_r+0x11a>
 80022d2:	2300      	movs	r3, #0
 80022d4:	f04f 0c0a 	mov.w	ip, #10
 80022d8:	4619      	mov	r1, r3
 80022da:	3401      	adds	r4, #1
 80022dc:	9305      	str	r3, [sp, #20]
 80022de:	4620      	mov	r0, r4
 80022e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80022e4:	3a30      	subs	r2, #48	; 0x30
 80022e6:	2a09      	cmp	r2, #9
 80022e8:	d903      	bls.n	80022f2 <_vfiprintf_r+0x1ee>
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d0c5      	beq.n	800227a <_vfiprintf_r+0x176>
 80022ee:	9105      	str	r1, [sp, #20]
 80022f0:	e7c3      	b.n	800227a <_vfiprintf_r+0x176>
 80022f2:	4604      	mov	r4, r0
 80022f4:	2301      	movs	r3, #1
 80022f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80022fa:	e7f0      	b.n	80022de <_vfiprintf_r+0x1da>
 80022fc:	ab03      	add	r3, sp, #12
 80022fe:	9300      	str	r3, [sp, #0]
 8002300:	462a      	mov	r2, r5
 8002302:	4630      	mov	r0, r6
 8002304:	4b15      	ldr	r3, [pc, #84]	; (800235c <_vfiprintf_r+0x258>)
 8002306:	a904      	add	r1, sp, #16
 8002308:	f3af 8000 	nop.w
 800230c:	4607      	mov	r7, r0
 800230e:	1c78      	adds	r0, r7, #1
 8002310:	d1d6      	bne.n	80022c0 <_vfiprintf_r+0x1bc>
 8002312:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002314:	07d9      	lsls	r1, r3, #31
 8002316:	d405      	bmi.n	8002324 <_vfiprintf_r+0x220>
 8002318:	89ab      	ldrh	r3, [r5, #12]
 800231a:	059a      	lsls	r2, r3, #22
 800231c:	d402      	bmi.n	8002324 <_vfiprintf_r+0x220>
 800231e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002320:	f7ff fdbd 	bl	8001e9e <__retarget_lock_release_recursive>
 8002324:	89ab      	ldrh	r3, [r5, #12]
 8002326:	065b      	lsls	r3, r3, #25
 8002328:	f53f af12 	bmi.w	8002150 <_vfiprintf_r+0x4c>
 800232c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800232e:	e711      	b.n	8002154 <_vfiprintf_r+0x50>
 8002330:	ab03      	add	r3, sp, #12
 8002332:	9300      	str	r3, [sp, #0]
 8002334:	462a      	mov	r2, r5
 8002336:	4630      	mov	r0, r6
 8002338:	4b08      	ldr	r3, [pc, #32]	; (800235c <_vfiprintf_r+0x258>)
 800233a:	a904      	add	r1, sp, #16
 800233c:	f000 f882 	bl	8002444 <_printf_i>
 8002340:	e7e4      	b.n	800230c <_vfiprintf_r+0x208>
 8002342:	bf00      	nop
 8002344:	080028cc 	.word	0x080028cc
 8002348:	080028ec 	.word	0x080028ec
 800234c:	080028ac 	.word	0x080028ac
 8002350:	0800290c 	.word	0x0800290c
 8002354:	08002916 	.word	0x08002916
 8002358:	00000000 	.word	0x00000000
 800235c:	080020df 	.word	0x080020df
 8002360:	08002912 	.word	0x08002912

08002364 <_printf_common>:
 8002364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002368:	4616      	mov	r6, r2
 800236a:	4699      	mov	r9, r3
 800236c:	688a      	ldr	r2, [r1, #8]
 800236e:	690b      	ldr	r3, [r1, #16]
 8002370:	4607      	mov	r7, r0
 8002372:	4293      	cmp	r3, r2
 8002374:	bfb8      	it	lt
 8002376:	4613      	movlt	r3, r2
 8002378:	6033      	str	r3, [r6, #0]
 800237a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800237e:	460c      	mov	r4, r1
 8002380:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002384:	b10a      	cbz	r2, 800238a <_printf_common+0x26>
 8002386:	3301      	adds	r3, #1
 8002388:	6033      	str	r3, [r6, #0]
 800238a:	6823      	ldr	r3, [r4, #0]
 800238c:	0699      	lsls	r1, r3, #26
 800238e:	bf42      	ittt	mi
 8002390:	6833      	ldrmi	r3, [r6, #0]
 8002392:	3302      	addmi	r3, #2
 8002394:	6033      	strmi	r3, [r6, #0]
 8002396:	6825      	ldr	r5, [r4, #0]
 8002398:	f015 0506 	ands.w	r5, r5, #6
 800239c:	d106      	bne.n	80023ac <_printf_common+0x48>
 800239e:	f104 0a19 	add.w	sl, r4, #25
 80023a2:	68e3      	ldr	r3, [r4, #12]
 80023a4:	6832      	ldr	r2, [r6, #0]
 80023a6:	1a9b      	subs	r3, r3, r2
 80023a8:	42ab      	cmp	r3, r5
 80023aa:	dc28      	bgt.n	80023fe <_printf_common+0x9a>
 80023ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80023b0:	1e13      	subs	r3, r2, #0
 80023b2:	6822      	ldr	r2, [r4, #0]
 80023b4:	bf18      	it	ne
 80023b6:	2301      	movne	r3, #1
 80023b8:	0692      	lsls	r2, r2, #26
 80023ba:	d42d      	bmi.n	8002418 <_printf_common+0xb4>
 80023bc:	4649      	mov	r1, r9
 80023be:	4638      	mov	r0, r7
 80023c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80023c4:	47c0      	blx	r8
 80023c6:	3001      	adds	r0, #1
 80023c8:	d020      	beq.n	800240c <_printf_common+0xa8>
 80023ca:	6823      	ldr	r3, [r4, #0]
 80023cc:	68e5      	ldr	r5, [r4, #12]
 80023ce:	f003 0306 	and.w	r3, r3, #6
 80023d2:	2b04      	cmp	r3, #4
 80023d4:	bf18      	it	ne
 80023d6:	2500      	movne	r5, #0
 80023d8:	6832      	ldr	r2, [r6, #0]
 80023da:	f04f 0600 	mov.w	r6, #0
 80023de:	68a3      	ldr	r3, [r4, #8]
 80023e0:	bf08      	it	eq
 80023e2:	1aad      	subeq	r5, r5, r2
 80023e4:	6922      	ldr	r2, [r4, #16]
 80023e6:	bf08      	it	eq
 80023e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80023ec:	4293      	cmp	r3, r2
 80023ee:	bfc4      	itt	gt
 80023f0:	1a9b      	subgt	r3, r3, r2
 80023f2:	18ed      	addgt	r5, r5, r3
 80023f4:	341a      	adds	r4, #26
 80023f6:	42b5      	cmp	r5, r6
 80023f8:	d11a      	bne.n	8002430 <_printf_common+0xcc>
 80023fa:	2000      	movs	r0, #0
 80023fc:	e008      	b.n	8002410 <_printf_common+0xac>
 80023fe:	2301      	movs	r3, #1
 8002400:	4652      	mov	r2, sl
 8002402:	4649      	mov	r1, r9
 8002404:	4638      	mov	r0, r7
 8002406:	47c0      	blx	r8
 8002408:	3001      	adds	r0, #1
 800240a:	d103      	bne.n	8002414 <_printf_common+0xb0>
 800240c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002414:	3501      	adds	r5, #1
 8002416:	e7c4      	b.n	80023a2 <_printf_common+0x3e>
 8002418:	2030      	movs	r0, #48	; 0x30
 800241a:	18e1      	adds	r1, r4, r3
 800241c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002420:	1c5a      	adds	r2, r3, #1
 8002422:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002426:	4422      	add	r2, r4
 8002428:	3302      	adds	r3, #2
 800242a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800242e:	e7c5      	b.n	80023bc <_printf_common+0x58>
 8002430:	2301      	movs	r3, #1
 8002432:	4622      	mov	r2, r4
 8002434:	4649      	mov	r1, r9
 8002436:	4638      	mov	r0, r7
 8002438:	47c0      	blx	r8
 800243a:	3001      	adds	r0, #1
 800243c:	d0e6      	beq.n	800240c <_printf_common+0xa8>
 800243e:	3601      	adds	r6, #1
 8002440:	e7d9      	b.n	80023f6 <_printf_common+0x92>
	...

08002444 <_printf_i>:
 8002444:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002448:	460c      	mov	r4, r1
 800244a:	7e27      	ldrb	r7, [r4, #24]
 800244c:	4691      	mov	r9, r2
 800244e:	2f78      	cmp	r7, #120	; 0x78
 8002450:	4680      	mov	r8, r0
 8002452:	469a      	mov	sl, r3
 8002454:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002456:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800245a:	d807      	bhi.n	800246c <_printf_i+0x28>
 800245c:	2f62      	cmp	r7, #98	; 0x62
 800245e:	d80a      	bhi.n	8002476 <_printf_i+0x32>
 8002460:	2f00      	cmp	r7, #0
 8002462:	f000 80d9 	beq.w	8002618 <_printf_i+0x1d4>
 8002466:	2f58      	cmp	r7, #88	; 0x58
 8002468:	f000 80a4 	beq.w	80025b4 <_printf_i+0x170>
 800246c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002470:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002474:	e03a      	b.n	80024ec <_printf_i+0xa8>
 8002476:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800247a:	2b15      	cmp	r3, #21
 800247c:	d8f6      	bhi.n	800246c <_printf_i+0x28>
 800247e:	a001      	add	r0, pc, #4	; (adr r0, 8002484 <_printf_i+0x40>)
 8002480:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002484:	080024dd 	.word	0x080024dd
 8002488:	080024f1 	.word	0x080024f1
 800248c:	0800246d 	.word	0x0800246d
 8002490:	0800246d 	.word	0x0800246d
 8002494:	0800246d 	.word	0x0800246d
 8002498:	0800246d 	.word	0x0800246d
 800249c:	080024f1 	.word	0x080024f1
 80024a0:	0800246d 	.word	0x0800246d
 80024a4:	0800246d 	.word	0x0800246d
 80024a8:	0800246d 	.word	0x0800246d
 80024ac:	0800246d 	.word	0x0800246d
 80024b0:	080025ff 	.word	0x080025ff
 80024b4:	08002521 	.word	0x08002521
 80024b8:	080025e1 	.word	0x080025e1
 80024bc:	0800246d 	.word	0x0800246d
 80024c0:	0800246d 	.word	0x0800246d
 80024c4:	08002621 	.word	0x08002621
 80024c8:	0800246d 	.word	0x0800246d
 80024cc:	08002521 	.word	0x08002521
 80024d0:	0800246d 	.word	0x0800246d
 80024d4:	0800246d 	.word	0x0800246d
 80024d8:	080025e9 	.word	0x080025e9
 80024dc:	680b      	ldr	r3, [r1, #0]
 80024de:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80024e2:	1d1a      	adds	r2, r3, #4
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	600a      	str	r2, [r1, #0]
 80024e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80024ec:	2301      	movs	r3, #1
 80024ee:	e0a4      	b.n	800263a <_printf_i+0x1f6>
 80024f0:	6825      	ldr	r5, [r4, #0]
 80024f2:	6808      	ldr	r0, [r1, #0]
 80024f4:	062e      	lsls	r6, r5, #24
 80024f6:	f100 0304 	add.w	r3, r0, #4
 80024fa:	d50a      	bpl.n	8002512 <_printf_i+0xce>
 80024fc:	6805      	ldr	r5, [r0, #0]
 80024fe:	600b      	str	r3, [r1, #0]
 8002500:	2d00      	cmp	r5, #0
 8002502:	da03      	bge.n	800250c <_printf_i+0xc8>
 8002504:	232d      	movs	r3, #45	; 0x2d
 8002506:	426d      	negs	r5, r5
 8002508:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800250c:	230a      	movs	r3, #10
 800250e:	485e      	ldr	r0, [pc, #376]	; (8002688 <_printf_i+0x244>)
 8002510:	e019      	b.n	8002546 <_printf_i+0x102>
 8002512:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002516:	6805      	ldr	r5, [r0, #0]
 8002518:	600b      	str	r3, [r1, #0]
 800251a:	bf18      	it	ne
 800251c:	b22d      	sxthne	r5, r5
 800251e:	e7ef      	b.n	8002500 <_printf_i+0xbc>
 8002520:	680b      	ldr	r3, [r1, #0]
 8002522:	6825      	ldr	r5, [r4, #0]
 8002524:	1d18      	adds	r0, r3, #4
 8002526:	6008      	str	r0, [r1, #0]
 8002528:	0628      	lsls	r0, r5, #24
 800252a:	d501      	bpl.n	8002530 <_printf_i+0xec>
 800252c:	681d      	ldr	r5, [r3, #0]
 800252e:	e002      	b.n	8002536 <_printf_i+0xf2>
 8002530:	0669      	lsls	r1, r5, #25
 8002532:	d5fb      	bpl.n	800252c <_printf_i+0xe8>
 8002534:	881d      	ldrh	r5, [r3, #0]
 8002536:	2f6f      	cmp	r7, #111	; 0x6f
 8002538:	bf0c      	ite	eq
 800253a:	2308      	moveq	r3, #8
 800253c:	230a      	movne	r3, #10
 800253e:	4852      	ldr	r0, [pc, #328]	; (8002688 <_printf_i+0x244>)
 8002540:	2100      	movs	r1, #0
 8002542:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002546:	6866      	ldr	r6, [r4, #4]
 8002548:	2e00      	cmp	r6, #0
 800254a:	bfa8      	it	ge
 800254c:	6821      	ldrge	r1, [r4, #0]
 800254e:	60a6      	str	r6, [r4, #8]
 8002550:	bfa4      	itt	ge
 8002552:	f021 0104 	bicge.w	r1, r1, #4
 8002556:	6021      	strge	r1, [r4, #0]
 8002558:	b90d      	cbnz	r5, 800255e <_printf_i+0x11a>
 800255a:	2e00      	cmp	r6, #0
 800255c:	d04d      	beq.n	80025fa <_printf_i+0x1b6>
 800255e:	4616      	mov	r6, r2
 8002560:	fbb5 f1f3 	udiv	r1, r5, r3
 8002564:	fb03 5711 	mls	r7, r3, r1, r5
 8002568:	5dc7      	ldrb	r7, [r0, r7]
 800256a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800256e:	462f      	mov	r7, r5
 8002570:	42bb      	cmp	r3, r7
 8002572:	460d      	mov	r5, r1
 8002574:	d9f4      	bls.n	8002560 <_printf_i+0x11c>
 8002576:	2b08      	cmp	r3, #8
 8002578:	d10b      	bne.n	8002592 <_printf_i+0x14e>
 800257a:	6823      	ldr	r3, [r4, #0]
 800257c:	07df      	lsls	r7, r3, #31
 800257e:	d508      	bpl.n	8002592 <_printf_i+0x14e>
 8002580:	6923      	ldr	r3, [r4, #16]
 8002582:	6861      	ldr	r1, [r4, #4]
 8002584:	4299      	cmp	r1, r3
 8002586:	bfde      	ittt	le
 8002588:	2330      	movle	r3, #48	; 0x30
 800258a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800258e:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8002592:	1b92      	subs	r2, r2, r6
 8002594:	6122      	str	r2, [r4, #16]
 8002596:	464b      	mov	r3, r9
 8002598:	4621      	mov	r1, r4
 800259a:	4640      	mov	r0, r8
 800259c:	f8cd a000 	str.w	sl, [sp]
 80025a0:	aa03      	add	r2, sp, #12
 80025a2:	f7ff fedf 	bl	8002364 <_printf_common>
 80025a6:	3001      	adds	r0, #1
 80025a8:	d14c      	bne.n	8002644 <_printf_i+0x200>
 80025aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025ae:	b004      	add	sp, #16
 80025b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80025b4:	4834      	ldr	r0, [pc, #208]	; (8002688 <_printf_i+0x244>)
 80025b6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80025ba:	680e      	ldr	r6, [r1, #0]
 80025bc:	6823      	ldr	r3, [r4, #0]
 80025be:	f856 5b04 	ldr.w	r5, [r6], #4
 80025c2:	061f      	lsls	r7, r3, #24
 80025c4:	600e      	str	r6, [r1, #0]
 80025c6:	d514      	bpl.n	80025f2 <_printf_i+0x1ae>
 80025c8:	07d9      	lsls	r1, r3, #31
 80025ca:	bf44      	itt	mi
 80025cc:	f043 0320 	orrmi.w	r3, r3, #32
 80025d0:	6023      	strmi	r3, [r4, #0]
 80025d2:	b91d      	cbnz	r5, 80025dc <_printf_i+0x198>
 80025d4:	6823      	ldr	r3, [r4, #0]
 80025d6:	f023 0320 	bic.w	r3, r3, #32
 80025da:	6023      	str	r3, [r4, #0]
 80025dc:	2310      	movs	r3, #16
 80025de:	e7af      	b.n	8002540 <_printf_i+0xfc>
 80025e0:	6823      	ldr	r3, [r4, #0]
 80025e2:	f043 0320 	orr.w	r3, r3, #32
 80025e6:	6023      	str	r3, [r4, #0]
 80025e8:	2378      	movs	r3, #120	; 0x78
 80025ea:	4828      	ldr	r0, [pc, #160]	; (800268c <_printf_i+0x248>)
 80025ec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80025f0:	e7e3      	b.n	80025ba <_printf_i+0x176>
 80025f2:	065e      	lsls	r6, r3, #25
 80025f4:	bf48      	it	mi
 80025f6:	b2ad      	uxthmi	r5, r5
 80025f8:	e7e6      	b.n	80025c8 <_printf_i+0x184>
 80025fa:	4616      	mov	r6, r2
 80025fc:	e7bb      	b.n	8002576 <_printf_i+0x132>
 80025fe:	680b      	ldr	r3, [r1, #0]
 8002600:	6826      	ldr	r6, [r4, #0]
 8002602:	1d1d      	adds	r5, r3, #4
 8002604:	6960      	ldr	r0, [r4, #20]
 8002606:	600d      	str	r5, [r1, #0]
 8002608:	0635      	lsls	r5, r6, #24
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	d501      	bpl.n	8002612 <_printf_i+0x1ce>
 800260e:	6018      	str	r0, [r3, #0]
 8002610:	e002      	b.n	8002618 <_printf_i+0x1d4>
 8002612:	0671      	lsls	r1, r6, #25
 8002614:	d5fb      	bpl.n	800260e <_printf_i+0x1ca>
 8002616:	8018      	strh	r0, [r3, #0]
 8002618:	2300      	movs	r3, #0
 800261a:	4616      	mov	r6, r2
 800261c:	6123      	str	r3, [r4, #16]
 800261e:	e7ba      	b.n	8002596 <_printf_i+0x152>
 8002620:	680b      	ldr	r3, [r1, #0]
 8002622:	1d1a      	adds	r2, r3, #4
 8002624:	600a      	str	r2, [r1, #0]
 8002626:	681e      	ldr	r6, [r3, #0]
 8002628:	2100      	movs	r1, #0
 800262a:	4630      	mov	r0, r6
 800262c:	6862      	ldr	r2, [r4, #4]
 800262e:	f000 f8d9 	bl	80027e4 <memchr>
 8002632:	b108      	cbz	r0, 8002638 <_printf_i+0x1f4>
 8002634:	1b80      	subs	r0, r0, r6
 8002636:	6060      	str	r0, [r4, #4]
 8002638:	6863      	ldr	r3, [r4, #4]
 800263a:	6123      	str	r3, [r4, #16]
 800263c:	2300      	movs	r3, #0
 800263e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002642:	e7a8      	b.n	8002596 <_printf_i+0x152>
 8002644:	4632      	mov	r2, r6
 8002646:	4649      	mov	r1, r9
 8002648:	4640      	mov	r0, r8
 800264a:	6923      	ldr	r3, [r4, #16]
 800264c:	47d0      	blx	sl
 800264e:	3001      	adds	r0, #1
 8002650:	d0ab      	beq.n	80025aa <_printf_i+0x166>
 8002652:	6823      	ldr	r3, [r4, #0]
 8002654:	079b      	lsls	r3, r3, #30
 8002656:	d413      	bmi.n	8002680 <_printf_i+0x23c>
 8002658:	68e0      	ldr	r0, [r4, #12]
 800265a:	9b03      	ldr	r3, [sp, #12]
 800265c:	4298      	cmp	r0, r3
 800265e:	bfb8      	it	lt
 8002660:	4618      	movlt	r0, r3
 8002662:	e7a4      	b.n	80025ae <_printf_i+0x16a>
 8002664:	2301      	movs	r3, #1
 8002666:	4632      	mov	r2, r6
 8002668:	4649      	mov	r1, r9
 800266a:	4640      	mov	r0, r8
 800266c:	47d0      	blx	sl
 800266e:	3001      	adds	r0, #1
 8002670:	d09b      	beq.n	80025aa <_printf_i+0x166>
 8002672:	3501      	adds	r5, #1
 8002674:	68e3      	ldr	r3, [r4, #12]
 8002676:	9903      	ldr	r1, [sp, #12]
 8002678:	1a5b      	subs	r3, r3, r1
 800267a:	42ab      	cmp	r3, r5
 800267c:	dcf2      	bgt.n	8002664 <_printf_i+0x220>
 800267e:	e7eb      	b.n	8002658 <_printf_i+0x214>
 8002680:	2500      	movs	r5, #0
 8002682:	f104 0619 	add.w	r6, r4, #25
 8002686:	e7f5      	b.n	8002674 <_printf_i+0x230>
 8002688:	0800291d 	.word	0x0800291d
 800268c:	0800292e 	.word	0x0800292e

08002690 <_sbrk_r>:
 8002690:	b538      	push	{r3, r4, r5, lr}
 8002692:	2300      	movs	r3, #0
 8002694:	4d05      	ldr	r5, [pc, #20]	; (80026ac <_sbrk_r+0x1c>)
 8002696:	4604      	mov	r4, r0
 8002698:	4608      	mov	r0, r1
 800269a:	602b      	str	r3, [r5, #0]
 800269c:	f7fd ff72 	bl	8000584 <_sbrk>
 80026a0:	1c43      	adds	r3, r0, #1
 80026a2:	d102      	bne.n	80026aa <_sbrk_r+0x1a>
 80026a4:	682b      	ldr	r3, [r5, #0]
 80026a6:	b103      	cbz	r3, 80026aa <_sbrk_r+0x1a>
 80026a8:	6023      	str	r3, [r4, #0]
 80026aa:	bd38      	pop	{r3, r4, r5, pc}
 80026ac:	200000ec 	.word	0x200000ec

080026b0 <__sread>:
 80026b0:	b510      	push	{r4, lr}
 80026b2:	460c      	mov	r4, r1
 80026b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80026b8:	f000 f8ae 	bl	8002818 <_read_r>
 80026bc:	2800      	cmp	r0, #0
 80026be:	bfab      	itete	ge
 80026c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80026c2:	89a3      	ldrhlt	r3, [r4, #12]
 80026c4:	181b      	addge	r3, r3, r0
 80026c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80026ca:	bfac      	ite	ge
 80026cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80026ce:	81a3      	strhlt	r3, [r4, #12]
 80026d0:	bd10      	pop	{r4, pc}

080026d2 <__swrite>:
 80026d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80026d6:	461f      	mov	r7, r3
 80026d8:	898b      	ldrh	r3, [r1, #12]
 80026da:	4605      	mov	r5, r0
 80026dc:	05db      	lsls	r3, r3, #23
 80026de:	460c      	mov	r4, r1
 80026e0:	4616      	mov	r6, r2
 80026e2:	d505      	bpl.n	80026f0 <__swrite+0x1e>
 80026e4:	2302      	movs	r3, #2
 80026e6:	2200      	movs	r2, #0
 80026e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80026ec:	f000 f868 	bl	80027c0 <_lseek_r>
 80026f0:	89a3      	ldrh	r3, [r4, #12]
 80026f2:	4632      	mov	r2, r6
 80026f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80026f8:	81a3      	strh	r3, [r4, #12]
 80026fa:	4628      	mov	r0, r5
 80026fc:	463b      	mov	r3, r7
 80026fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002702:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002706:	f000 b817 	b.w	8002738 <_write_r>

0800270a <__sseek>:
 800270a:	b510      	push	{r4, lr}
 800270c:	460c      	mov	r4, r1
 800270e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002712:	f000 f855 	bl	80027c0 <_lseek_r>
 8002716:	1c43      	adds	r3, r0, #1
 8002718:	89a3      	ldrh	r3, [r4, #12]
 800271a:	bf15      	itete	ne
 800271c:	6560      	strne	r0, [r4, #84]	; 0x54
 800271e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002722:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002726:	81a3      	strheq	r3, [r4, #12]
 8002728:	bf18      	it	ne
 800272a:	81a3      	strhne	r3, [r4, #12]
 800272c:	bd10      	pop	{r4, pc}

0800272e <__sclose>:
 800272e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002732:	f000 b813 	b.w	800275c <_close_r>
	...

08002738 <_write_r>:
 8002738:	b538      	push	{r3, r4, r5, lr}
 800273a:	4604      	mov	r4, r0
 800273c:	4608      	mov	r0, r1
 800273e:	4611      	mov	r1, r2
 8002740:	2200      	movs	r2, #0
 8002742:	4d05      	ldr	r5, [pc, #20]	; (8002758 <_write_r+0x20>)
 8002744:	602a      	str	r2, [r5, #0]
 8002746:	461a      	mov	r2, r3
 8002748:	f7fd fed0 	bl	80004ec <_write>
 800274c:	1c43      	adds	r3, r0, #1
 800274e:	d102      	bne.n	8002756 <_write_r+0x1e>
 8002750:	682b      	ldr	r3, [r5, #0]
 8002752:	b103      	cbz	r3, 8002756 <_write_r+0x1e>
 8002754:	6023      	str	r3, [r4, #0]
 8002756:	bd38      	pop	{r3, r4, r5, pc}
 8002758:	200000ec 	.word	0x200000ec

0800275c <_close_r>:
 800275c:	b538      	push	{r3, r4, r5, lr}
 800275e:	2300      	movs	r3, #0
 8002760:	4d05      	ldr	r5, [pc, #20]	; (8002778 <_close_r+0x1c>)
 8002762:	4604      	mov	r4, r0
 8002764:	4608      	mov	r0, r1
 8002766:	602b      	str	r3, [r5, #0]
 8002768:	f7fd fedc 	bl	8000524 <_close>
 800276c:	1c43      	adds	r3, r0, #1
 800276e:	d102      	bne.n	8002776 <_close_r+0x1a>
 8002770:	682b      	ldr	r3, [r5, #0]
 8002772:	b103      	cbz	r3, 8002776 <_close_r+0x1a>
 8002774:	6023      	str	r3, [r4, #0]
 8002776:	bd38      	pop	{r3, r4, r5, pc}
 8002778:	200000ec 	.word	0x200000ec

0800277c <_fstat_r>:
 800277c:	b538      	push	{r3, r4, r5, lr}
 800277e:	2300      	movs	r3, #0
 8002780:	4d06      	ldr	r5, [pc, #24]	; (800279c <_fstat_r+0x20>)
 8002782:	4604      	mov	r4, r0
 8002784:	4608      	mov	r0, r1
 8002786:	4611      	mov	r1, r2
 8002788:	602b      	str	r3, [r5, #0]
 800278a:	f7fd fed6 	bl	800053a <_fstat>
 800278e:	1c43      	adds	r3, r0, #1
 8002790:	d102      	bne.n	8002798 <_fstat_r+0x1c>
 8002792:	682b      	ldr	r3, [r5, #0]
 8002794:	b103      	cbz	r3, 8002798 <_fstat_r+0x1c>
 8002796:	6023      	str	r3, [r4, #0]
 8002798:	bd38      	pop	{r3, r4, r5, pc}
 800279a:	bf00      	nop
 800279c:	200000ec 	.word	0x200000ec

080027a0 <_isatty_r>:
 80027a0:	b538      	push	{r3, r4, r5, lr}
 80027a2:	2300      	movs	r3, #0
 80027a4:	4d05      	ldr	r5, [pc, #20]	; (80027bc <_isatty_r+0x1c>)
 80027a6:	4604      	mov	r4, r0
 80027a8:	4608      	mov	r0, r1
 80027aa:	602b      	str	r3, [r5, #0]
 80027ac:	f7fd fed4 	bl	8000558 <_isatty>
 80027b0:	1c43      	adds	r3, r0, #1
 80027b2:	d102      	bne.n	80027ba <_isatty_r+0x1a>
 80027b4:	682b      	ldr	r3, [r5, #0]
 80027b6:	b103      	cbz	r3, 80027ba <_isatty_r+0x1a>
 80027b8:	6023      	str	r3, [r4, #0]
 80027ba:	bd38      	pop	{r3, r4, r5, pc}
 80027bc:	200000ec 	.word	0x200000ec

080027c0 <_lseek_r>:
 80027c0:	b538      	push	{r3, r4, r5, lr}
 80027c2:	4604      	mov	r4, r0
 80027c4:	4608      	mov	r0, r1
 80027c6:	4611      	mov	r1, r2
 80027c8:	2200      	movs	r2, #0
 80027ca:	4d05      	ldr	r5, [pc, #20]	; (80027e0 <_lseek_r+0x20>)
 80027cc:	602a      	str	r2, [r5, #0]
 80027ce:	461a      	mov	r2, r3
 80027d0:	f7fd fecc 	bl	800056c <_lseek>
 80027d4:	1c43      	adds	r3, r0, #1
 80027d6:	d102      	bne.n	80027de <_lseek_r+0x1e>
 80027d8:	682b      	ldr	r3, [r5, #0]
 80027da:	b103      	cbz	r3, 80027de <_lseek_r+0x1e>
 80027dc:	6023      	str	r3, [r4, #0]
 80027de:	bd38      	pop	{r3, r4, r5, pc}
 80027e0:	200000ec 	.word	0x200000ec

080027e4 <memchr>:
 80027e4:	4603      	mov	r3, r0
 80027e6:	b510      	push	{r4, lr}
 80027e8:	b2c9      	uxtb	r1, r1
 80027ea:	4402      	add	r2, r0
 80027ec:	4293      	cmp	r3, r2
 80027ee:	4618      	mov	r0, r3
 80027f0:	d101      	bne.n	80027f6 <memchr+0x12>
 80027f2:	2000      	movs	r0, #0
 80027f4:	e003      	b.n	80027fe <memchr+0x1a>
 80027f6:	7804      	ldrb	r4, [r0, #0]
 80027f8:	3301      	adds	r3, #1
 80027fa:	428c      	cmp	r4, r1
 80027fc:	d1f6      	bne.n	80027ec <memchr+0x8>
 80027fe:	bd10      	pop	{r4, pc}

08002800 <__malloc_lock>:
 8002800:	4801      	ldr	r0, [pc, #4]	; (8002808 <__malloc_lock+0x8>)
 8002802:	f7ff bb4b 	b.w	8001e9c <__retarget_lock_acquire_recursive>
 8002806:	bf00      	nop
 8002808:	200000e4 	.word	0x200000e4

0800280c <__malloc_unlock>:
 800280c:	4801      	ldr	r0, [pc, #4]	; (8002814 <__malloc_unlock+0x8>)
 800280e:	f7ff bb46 	b.w	8001e9e <__retarget_lock_release_recursive>
 8002812:	bf00      	nop
 8002814:	200000e4 	.word	0x200000e4

08002818 <_read_r>:
 8002818:	b538      	push	{r3, r4, r5, lr}
 800281a:	4604      	mov	r4, r0
 800281c:	4608      	mov	r0, r1
 800281e:	4611      	mov	r1, r2
 8002820:	2200      	movs	r2, #0
 8002822:	4d05      	ldr	r5, [pc, #20]	; (8002838 <_read_r+0x20>)
 8002824:	602a      	str	r2, [r5, #0]
 8002826:	461a      	mov	r2, r3
 8002828:	f7fd fe43 	bl	80004b2 <_read>
 800282c:	1c43      	adds	r3, r0, #1
 800282e:	d102      	bne.n	8002836 <_read_r+0x1e>
 8002830:	682b      	ldr	r3, [r5, #0]
 8002832:	b103      	cbz	r3, 8002836 <_read_r+0x1e>
 8002834:	6023      	str	r3, [r4, #0]
 8002836:	bd38      	pop	{r3, r4, r5, pc}
 8002838:	200000ec 	.word	0x200000ec

0800283c <_init>:
 800283c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800283e:	bf00      	nop
 8002840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002842:	bc08      	pop	{r3}
 8002844:	469e      	mov	lr, r3
 8002846:	4770      	bx	lr

08002848 <_fini>:
 8002848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800284a:	bf00      	nop
 800284c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800284e:	bc08      	pop	{r3}
 8002850:	469e      	mov	lr, r3
 8002852:	4770      	bx	lr
