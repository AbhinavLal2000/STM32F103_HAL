
F103_HAL_BL_Application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08010000  08010000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002608  0801010c  0801010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08012714  08012714  00012714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080127ec  080127ec  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080127ec  080127ec  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080127ec  080127ec  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080127ec  080127ec  000127ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080127f0  080127f0  000127f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080127f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000080  20000070  08012864  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f0  08012864  000200f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000074d2  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016c4  00000000  00000000  0002756b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006b8  00000000  00000000  00028c30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000630  00000000  00000000  000292e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a2a  00000000  00000000  00029918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006db0  00000000  00000000  00041342  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083852  00000000  00000000  000480f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cb944  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002194  00000000  00000000  000cb998  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0801010c <__do_global_dtors_aux>:
 801010c:	b510      	push	{r4, lr}
 801010e:	4c05      	ldr	r4, [pc, #20]	; (8010124 <__do_global_dtors_aux+0x18>)
 8010110:	7823      	ldrb	r3, [r4, #0]
 8010112:	b933      	cbnz	r3, 8010122 <__do_global_dtors_aux+0x16>
 8010114:	4b04      	ldr	r3, [pc, #16]	; (8010128 <__do_global_dtors_aux+0x1c>)
 8010116:	b113      	cbz	r3, 801011e <__do_global_dtors_aux+0x12>
 8010118:	4804      	ldr	r0, [pc, #16]	; (801012c <__do_global_dtors_aux+0x20>)
 801011a:	f3af 8000 	nop.w
 801011e:	2301      	movs	r3, #1
 8010120:	7023      	strb	r3, [r4, #0]
 8010122:	bd10      	pop	{r4, pc}
 8010124:	20000070 	.word	0x20000070
 8010128:	00000000 	.word	0x00000000
 801012c:	080126fc 	.word	0x080126fc

08010130 <frame_dummy>:
 8010130:	b508      	push	{r3, lr}
 8010132:	4b03      	ldr	r3, [pc, #12]	; (8010140 <frame_dummy+0x10>)
 8010134:	b11b      	cbz	r3, 801013e <frame_dummy+0xe>
 8010136:	4903      	ldr	r1, [pc, #12]	; (8010144 <frame_dummy+0x14>)
 8010138:	4803      	ldr	r0, [pc, #12]	; (8010148 <frame_dummy+0x18>)
 801013a:	f3af 8000 	nop.w
 801013e:	bd08      	pop	{r3, pc}
 8010140:	00000000 	.word	0x00000000
 8010144:	20000074 	.word	0x20000074
 8010148:	080126fc 	.word	0x080126fc

0801014c <__io_putchar>:
#ifdef __GNUC__
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif
{
 801014c:	b580      	push	{r7, lr}
 801014e:	b082      	sub	sp, #8
 8010150:	af00      	add	r7, sp, #0
 8010152:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8010154:	1d39      	adds	r1, r7, #4
 8010156:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801015a:	2201      	movs	r2, #1
 801015c:	4803      	ldr	r0, [pc, #12]	; (801016c <__io_putchar+0x20>)
 801015e:	f001 f9d0 	bl	8011502 <HAL_UART_Transmit>
	return ch;
 8010162:	687b      	ldr	r3, [r7, #4]
}
 8010164:	4618      	mov	r0, r3
 8010166:	3708      	adds	r7, #8
 8010168:	46bd      	mov	sp, r7
 801016a:	bd80      	pop	{r7, pc}
 801016c:	20000098 	.word	0x20000098

08010170 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8010170:	b580      	push	{r7, lr}
 8010172:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8010174:	f000 fa3e 	bl	80105f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8010178:	f000 f818 	bl	80101ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 801017c:	f000 f87c 	bl	8010278 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8010180:	f000 f850 	bl	8010224 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  printf("Application v%d.%d\r\n", APP_V_MAJOR, APP_V_MINOR);
 8010184:	2200      	movs	r2, #0
 8010186:	2101      	movs	r1, #1
 8010188:	4806      	ldr	r0, [pc, #24]	; (80101a4 <main+0x34>)
 801018a:	f001 fb57 	bl	801183c <iprintf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 801018e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8010192:	4805      	ldr	r0, [pc, #20]	; (80101a8 <main+0x38>)
 8010194:	f000 fd34 	bl	8010c00 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8010198:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801019c:	f000 fa8c 	bl	80106b8 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80101a0:	e7f5      	b.n	801018e <main+0x1e>
 80101a2:	bf00      	nop
 80101a4:	08012714 	.word	0x08012714
 80101a8:	40011000 	.word	0x40011000

080101ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80101ac:	b580      	push	{r7, lr}
 80101ae:	b090      	sub	sp, #64	; 0x40
 80101b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80101b2:	f107 0318 	add.w	r3, r7, #24
 80101b6:	2228      	movs	r2, #40	; 0x28
 80101b8:	2100      	movs	r1, #0
 80101ba:	4618      	mov	r0, r3
 80101bc:	f001 fb36 	bl	801182c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80101c0:	1d3b      	adds	r3, r7, #4
 80101c2:	2200      	movs	r2, #0
 80101c4:	601a      	str	r2, [r3, #0]
 80101c6:	605a      	str	r2, [r3, #4]
 80101c8:	609a      	str	r2, [r3, #8]
 80101ca:	60da      	str	r2, [r3, #12]
 80101cc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80101ce:	2302      	movs	r3, #2
 80101d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80101d2:	2301      	movs	r3, #1
 80101d4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80101d6:	2310      	movs	r3, #16
 80101d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80101da:	2300      	movs	r3, #0
 80101dc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80101de:	f107 0318 	add.w	r3, r7, #24
 80101e2:	4618      	mov	r0, r3
 80101e4:	f000 fd26 	bl	8010c34 <HAL_RCC_OscConfig>
 80101e8:	4603      	mov	r3, r0
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d001      	beq.n	80101f2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80101ee:	f000 f883 	bl	80102f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80101f2:	230f      	movs	r3, #15
 80101f4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80101f6:	2300      	movs	r3, #0
 80101f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80101fa:	2300      	movs	r3, #0
 80101fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80101fe:	2300      	movs	r3, #0
 8010200:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8010202:	2300      	movs	r3, #0
 8010204:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8010206:	1d3b      	adds	r3, r7, #4
 8010208:	2100      	movs	r1, #0
 801020a:	4618      	mov	r0, r3
 801020c:	f000 ff92 	bl	8011134 <HAL_RCC_ClockConfig>
 8010210:	4603      	mov	r3, r0
 8010212:	2b00      	cmp	r3, #0
 8010214:	d001      	beq.n	801021a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8010216:	f000 f86f 	bl	80102f8 <Error_Handler>
  }
}
 801021a:	bf00      	nop
 801021c:	3740      	adds	r7, #64	; 0x40
 801021e:	46bd      	mov	sp, r7
 8010220:	bd80      	pop	{r7, pc}
	...

08010224 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8010224:	b580      	push	{r7, lr}
 8010226:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8010228:	4b11      	ldr	r3, [pc, #68]	; (8010270 <MX_USART1_UART_Init+0x4c>)
 801022a:	4a12      	ldr	r2, [pc, #72]	; (8010274 <MX_USART1_UART_Init+0x50>)
 801022c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 801022e:	4b10      	ldr	r3, [pc, #64]	; (8010270 <MX_USART1_UART_Init+0x4c>)
 8010230:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8010234:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8010236:	4b0e      	ldr	r3, [pc, #56]	; (8010270 <MX_USART1_UART_Init+0x4c>)
 8010238:	2200      	movs	r2, #0
 801023a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 801023c:	4b0c      	ldr	r3, [pc, #48]	; (8010270 <MX_USART1_UART_Init+0x4c>)
 801023e:	2200      	movs	r2, #0
 8010240:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8010242:	4b0b      	ldr	r3, [pc, #44]	; (8010270 <MX_USART1_UART_Init+0x4c>)
 8010244:	2200      	movs	r2, #0
 8010246:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8010248:	4b09      	ldr	r3, [pc, #36]	; (8010270 <MX_USART1_UART_Init+0x4c>)
 801024a:	220c      	movs	r2, #12
 801024c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801024e:	4b08      	ldr	r3, [pc, #32]	; (8010270 <MX_USART1_UART_Init+0x4c>)
 8010250:	2200      	movs	r2, #0
 8010252:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8010254:	4b06      	ldr	r3, [pc, #24]	; (8010270 <MX_USART1_UART_Init+0x4c>)
 8010256:	2200      	movs	r2, #0
 8010258:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 801025a:	4805      	ldr	r0, [pc, #20]	; (8010270 <MX_USART1_UART_Init+0x4c>)
 801025c:	f001 f904 	bl	8011468 <HAL_UART_Init>
 8010260:	4603      	mov	r3, r0
 8010262:	2b00      	cmp	r3, #0
 8010264:	d001      	beq.n	801026a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8010266:	f000 f847 	bl	80102f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 801026a:	bf00      	nop
 801026c:	bd80      	pop	{r7, pc}
 801026e:	bf00      	nop
 8010270:	20000098 	.word	0x20000098
 8010274:	40013800 	.word	0x40013800

08010278 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8010278:	b580      	push	{r7, lr}
 801027a:	b086      	sub	sp, #24
 801027c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801027e:	f107 0308 	add.w	r3, r7, #8
 8010282:	2200      	movs	r2, #0
 8010284:	601a      	str	r2, [r3, #0]
 8010286:	605a      	str	r2, [r3, #4]
 8010288:	609a      	str	r2, [r3, #8]
 801028a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 801028c:	4b18      	ldr	r3, [pc, #96]	; (80102f0 <MX_GPIO_Init+0x78>)
 801028e:	699b      	ldr	r3, [r3, #24]
 8010290:	4a17      	ldr	r2, [pc, #92]	; (80102f0 <MX_GPIO_Init+0x78>)
 8010292:	f043 0310 	orr.w	r3, r3, #16
 8010296:	6193      	str	r3, [r2, #24]
 8010298:	4b15      	ldr	r3, [pc, #84]	; (80102f0 <MX_GPIO_Init+0x78>)
 801029a:	699b      	ldr	r3, [r3, #24]
 801029c:	f003 0310 	and.w	r3, r3, #16
 80102a0:	607b      	str	r3, [r7, #4]
 80102a2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80102a4:	4b12      	ldr	r3, [pc, #72]	; (80102f0 <MX_GPIO_Init+0x78>)
 80102a6:	699b      	ldr	r3, [r3, #24]
 80102a8:	4a11      	ldr	r2, [pc, #68]	; (80102f0 <MX_GPIO_Init+0x78>)
 80102aa:	f043 0304 	orr.w	r3, r3, #4
 80102ae:	6193      	str	r3, [r2, #24]
 80102b0:	4b0f      	ldr	r3, [pc, #60]	; (80102f0 <MX_GPIO_Init+0x78>)
 80102b2:	699b      	ldr	r3, [r3, #24]
 80102b4:	f003 0304 	and.w	r3, r3, #4
 80102b8:	603b      	str	r3, [r7, #0]
 80102ba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80102bc:	2200      	movs	r2, #0
 80102be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80102c2:	480c      	ldr	r0, [pc, #48]	; (80102f4 <MX_GPIO_Init+0x7c>)
 80102c4:	f000 fc84 	bl	8010bd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80102c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80102cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80102ce:	2301      	movs	r3, #1
 80102d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80102d2:	2300      	movs	r3, #0
 80102d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80102d6:	2302      	movs	r3, #2
 80102d8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80102da:	f107 0308 	add.w	r3, r7, #8
 80102de:	4619      	mov	r1, r3
 80102e0:	4804      	ldr	r0, [pc, #16]	; (80102f4 <MX_GPIO_Init+0x7c>)
 80102e2:	f000 faf1 	bl	80108c8 <HAL_GPIO_Init>

}
 80102e6:	bf00      	nop
 80102e8:	3718      	adds	r7, #24
 80102ea:	46bd      	mov	sp, r7
 80102ec:	bd80      	pop	{r7, pc}
 80102ee:	bf00      	nop
 80102f0:	40021000 	.word	0x40021000
 80102f4:	40011000 	.word	0x40011000

080102f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80102f8:	b480      	push	{r7}
 80102fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80102fc:	b672      	cpsid	i
}
 80102fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8010300:	e7fe      	b.n	8010300 <Error_Handler+0x8>
	...

08010304 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8010304:	b480      	push	{r7}
 8010306:	b085      	sub	sp, #20
 8010308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 801030a:	4b15      	ldr	r3, [pc, #84]	; (8010360 <HAL_MspInit+0x5c>)
 801030c:	699b      	ldr	r3, [r3, #24]
 801030e:	4a14      	ldr	r2, [pc, #80]	; (8010360 <HAL_MspInit+0x5c>)
 8010310:	f043 0301 	orr.w	r3, r3, #1
 8010314:	6193      	str	r3, [r2, #24]
 8010316:	4b12      	ldr	r3, [pc, #72]	; (8010360 <HAL_MspInit+0x5c>)
 8010318:	699b      	ldr	r3, [r3, #24]
 801031a:	f003 0301 	and.w	r3, r3, #1
 801031e:	60bb      	str	r3, [r7, #8]
 8010320:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8010322:	4b0f      	ldr	r3, [pc, #60]	; (8010360 <HAL_MspInit+0x5c>)
 8010324:	69db      	ldr	r3, [r3, #28]
 8010326:	4a0e      	ldr	r2, [pc, #56]	; (8010360 <HAL_MspInit+0x5c>)
 8010328:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801032c:	61d3      	str	r3, [r2, #28]
 801032e:	4b0c      	ldr	r3, [pc, #48]	; (8010360 <HAL_MspInit+0x5c>)
 8010330:	69db      	ldr	r3, [r3, #28]
 8010332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010336:	607b      	str	r3, [r7, #4]
 8010338:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 801033a:	4b0a      	ldr	r3, [pc, #40]	; (8010364 <HAL_MspInit+0x60>)
 801033c:	685b      	ldr	r3, [r3, #4]
 801033e:	60fb      	str	r3, [r7, #12]
 8010340:	68fb      	ldr	r3, [r7, #12]
 8010342:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8010346:	60fb      	str	r3, [r7, #12]
 8010348:	68fb      	ldr	r3, [r7, #12]
 801034a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 801034e:	60fb      	str	r3, [r7, #12]
 8010350:	4a04      	ldr	r2, [pc, #16]	; (8010364 <HAL_MspInit+0x60>)
 8010352:	68fb      	ldr	r3, [r7, #12]
 8010354:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8010356:	bf00      	nop
 8010358:	3714      	adds	r7, #20
 801035a:	46bd      	mov	sp, r7
 801035c:	bc80      	pop	{r7}
 801035e:	4770      	bx	lr
 8010360:	40021000 	.word	0x40021000
 8010364:	40010000 	.word	0x40010000

08010368 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8010368:	b580      	push	{r7, lr}
 801036a:	b088      	sub	sp, #32
 801036c:	af00      	add	r7, sp, #0
 801036e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010370:	f107 0310 	add.w	r3, r7, #16
 8010374:	2200      	movs	r2, #0
 8010376:	601a      	str	r2, [r3, #0]
 8010378:	605a      	str	r2, [r3, #4]
 801037a:	609a      	str	r2, [r3, #8]
 801037c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	681b      	ldr	r3, [r3, #0]
 8010382:	4a1c      	ldr	r2, [pc, #112]	; (80103f4 <HAL_UART_MspInit+0x8c>)
 8010384:	4293      	cmp	r3, r2
 8010386:	d131      	bne.n	80103ec <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8010388:	4b1b      	ldr	r3, [pc, #108]	; (80103f8 <HAL_UART_MspInit+0x90>)
 801038a:	699b      	ldr	r3, [r3, #24]
 801038c:	4a1a      	ldr	r2, [pc, #104]	; (80103f8 <HAL_UART_MspInit+0x90>)
 801038e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010392:	6193      	str	r3, [r2, #24]
 8010394:	4b18      	ldr	r3, [pc, #96]	; (80103f8 <HAL_UART_MspInit+0x90>)
 8010396:	699b      	ldr	r3, [r3, #24]
 8010398:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801039c:	60fb      	str	r3, [r7, #12]
 801039e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80103a0:	4b15      	ldr	r3, [pc, #84]	; (80103f8 <HAL_UART_MspInit+0x90>)
 80103a2:	699b      	ldr	r3, [r3, #24]
 80103a4:	4a14      	ldr	r2, [pc, #80]	; (80103f8 <HAL_UART_MspInit+0x90>)
 80103a6:	f043 0304 	orr.w	r3, r3, #4
 80103aa:	6193      	str	r3, [r2, #24]
 80103ac:	4b12      	ldr	r3, [pc, #72]	; (80103f8 <HAL_UART_MspInit+0x90>)
 80103ae:	699b      	ldr	r3, [r3, #24]
 80103b0:	f003 0304 	and.w	r3, r3, #4
 80103b4:	60bb      	str	r3, [r7, #8]
 80103b6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80103b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80103bc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80103be:	2302      	movs	r3, #2
 80103c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80103c2:	2303      	movs	r3, #3
 80103c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80103c6:	f107 0310 	add.w	r3, r7, #16
 80103ca:	4619      	mov	r1, r3
 80103cc:	480b      	ldr	r0, [pc, #44]	; (80103fc <HAL_UART_MspInit+0x94>)
 80103ce:	f000 fa7b 	bl	80108c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80103d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80103d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80103d8:	2300      	movs	r3, #0
 80103da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80103dc:	2300      	movs	r3, #0
 80103de:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80103e0:	f107 0310 	add.w	r3, r7, #16
 80103e4:	4619      	mov	r1, r3
 80103e6:	4805      	ldr	r0, [pc, #20]	; (80103fc <HAL_UART_MspInit+0x94>)
 80103e8:	f000 fa6e 	bl	80108c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80103ec:	bf00      	nop
 80103ee:	3720      	adds	r7, #32
 80103f0:	46bd      	mov	sp, r7
 80103f2:	bd80      	pop	{r7, pc}
 80103f4:	40013800 	.word	0x40013800
 80103f8:	40021000 	.word	0x40021000
 80103fc:	40010800 	.word	0x40010800

08010400 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8010400:	b480      	push	{r7}
 8010402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8010404:	e7fe      	b.n	8010404 <NMI_Handler+0x4>

08010406 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8010406:	b480      	push	{r7}
 8010408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 801040a:	e7fe      	b.n	801040a <HardFault_Handler+0x4>

0801040c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 801040c:	b480      	push	{r7}
 801040e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8010410:	e7fe      	b.n	8010410 <MemManage_Handler+0x4>

08010412 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8010412:	b480      	push	{r7}
 8010414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8010416:	e7fe      	b.n	8010416 <BusFault_Handler+0x4>

08010418 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8010418:	b480      	push	{r7}
 801041a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 801041c:	e7fe      	b.n	801041c <UsageFault_Handler+0x4>

0801041e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 801041e:	b480      	push	{r7}
 8010420:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8010422:	bf00      	nop
 8010424:	46bd      	mov	sp, r7
 8010426:	bc80      	pop	{r7}
 8010428:	4770      	bx	lr

0801042a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 801042a:	b480      	push	{r7}
 801042c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 801042e:	bf00      	nop
 8010430:	46bd      	mov	sp, r7
 8010432:	bc80      	pop	{r7}
 8010434:	4770      	bx	lr

08010436 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8010436:	b480      	push	{r7}
 8010438:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 801043a:	bf00      	nop
 801043c:	46bd      	mov	sp, r7
 801043e:	bc80      	pop	{r7}
 8010440:	4770      	bx	lr

08010442 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8010442:	b580      	push	{r7, lr}
 8010444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8010446:	f000 f91b 	bl	8010680 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 801044a:	bf00      	nop
 801044c:	bd80      	pop	{r7, pc}

0801044e <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 801044e:	b580      	push	{r7, lr}
 8010450:	b086      	sub	sp, #24
 8010452:	af00      	add	r7, sp, #0
 8010454:	60f8      	str	r0, [r7, #12]
 8010456:	60b9      	str	r1, [r7, #8]
 8010458:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801045a:	2300      	movs	r3, #0
 801045c:	617b      	str	r3, [r7, #20]
 801045e:	e00a      	b.n	8010476 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8010460:	f3af 8000 	nop.w
 8010464:	4601      	mov	r1, r0
 8010466:	68bb      	ldr	r3, [r7, #8]
 8010468:	1c5a      	adds	r2, r3, #1
 801046a:	60ba      	str	r2, [r7, #8]
 801046c:	b2ca      	uxtb	r2, r1
 801046e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010470:	697b      	ldr	r3, [r7, #20]
 8010472:	3301      	adds	r3, #1
 8010474:	617b      	str	r3, [r7, #20]
 8010476:	697a      	ldr	r2, [r7, #20]
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	429a      	cmp	r2, r3
 801047c:	dbf0      	blt.n	8010460 <_read+0x12>
	}

return len;
 801047e:	687b      	ldr	r3, [r7, #4]
}
 8010480:	4618      	mov	r0, r3
 8010482:	3718      	adds	r7, #24
 8010484:	46bd      	mov	sp, r7
 8010486:	bd80      	pop	{r7, pc}

08010488 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8010488:	b580      	push	{r7, lr}
 801048a:	b086      	sub	sp, #24
 801048c:	af00      	add	r7, sp, #0
 801048e:	60f8      	str	r0, [r7, #12]
 8010490:	60b9      	str	r1, [r7, #8]
 8010492:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010494:	2300      	movs	r3, #0
 8010496:	617b      	str	r3, [r7, #20]
 8010498:	e009      	b.n	80104ae <_write+0x26>
	{
		__io_putchar(*ptr++);
 801049a:	68bb      	ldr	r3, [r7, #8]
 801049c:	1c5a      	adds	r2, r3, #1
 801049e:	60ba      	str	r2, [r7, #8]
 80104a0:	781b      	ldrb	r3, [r3, #0]
 80104a2:	4618      	mov	r0, r3
 80104a4:	f7ff fe52 	bl	801014c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80104a8:	697b      	ldr	r3, [r7, #20]
 80104aa:	3301      	adds	r3, #1
 80104ac:	617b      	str	r3, [r7, #20]
 80104ae:	697a      	ldr	r2, [r7, #20]
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	429a      	cmp	r2, r3
 80104b4:	dbf1      	blt.n	801049a <_write+0x12>
	}
	return len;
 80104b6:	687b      	ldr	r3, [r7, #4]
}
 80104b8:	4618      	mov	r0, r3
 80104ba:	3718      	adds	r7, #24
 80104bc:	46bd      	mov	sp, r7
 80104be:	bd80      	pop	{r7, pc}

080104c0 <_close>:

int _close(int file)
{
 80104c0:	b480      	push	{r7}
 80104c2:	b083      	sub	sp, #12
 80104c4:	af00      	add	r7, sp, #0
 80104c6:	6078      	str	r0, [r7, #4]
	return -1;
 80104c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80104cc:	4618      	mov	r0, r3
 80104ce:	370c      	adds	r7, #12
 80104d0:	46bd      	mov	sp, r7
 80104d2:	bc80      	pop	{r7}
 80104d4:	4770      	bx	lr

080104d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80104d6:	b480      	push	{r7}
 80104d8:	b083      	sub	sp, #12
 80104da:	af00      	add	r7, sp, #0
 80104dc:	6078      	str	r0, [r7, #4]
 80104de:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80104e0:	683b      	ldr	r3, [r7, #0]
 80104e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80104e6:	605a      	str	r2, [r3, #4]
	return 0;
 80104e8:	2300      	movs	r3, #0
}
 80104ea:	4618      	mov	r0, r3
 80104ec:	370c      	adds	r7, #12
 80104ee:	46bd      	mov	sp, r7
 80104f0:	bc80      	pop	{r7}
 80104f2:	4770      	bx	lr

080104f4 <_isatty>:

int _isatty(int file)
{
 80104f4:	b480      	push	{r7}
 80104f6:	b083      	sub	sp, #12
 80104f8:	af00      	add	r7, sp, #0
 80104fa:	6078      	str	r0, [r7, #4]
	return 1;
 80104fc:	2301      	movs	r3, #1
}
 80104fe:	4618      	mov	r0, r3
 8010500:	370c      	adds	r7, #12
 8010502:	46bd      	mov	sp, r7
 8010504:	bc80      	pop	{r7}
 8010506:	4770      	bx	lr

08010508 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8010508:	b480      	push	{r7}
 801050a:	b085      	sub	sp, #20
 801050c:	af00      	add	r7, sp, #0
 801050e:	60f8      	str	r0, [r7, #12]
 8010510:	60b9      	str	r1, [r7, #8]
 8010512:	607a      	str	r2, [r7, #4]
	return 0;
 8010514:	2300      	movs	r3, #0
}
 8010516:	4618      	mov	r0, r3
 8010518:	3714      	adds	r7, #20
 801051a:	46bd      	mov	sp, r7
 801051c:	bc80      	pop	{r7}
 801051e:	4770      	bx	lr

08010520 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8010520:	b580      	push	{r7, lr}
 8010522:	b086      	sub	sp, #24
 8010524:	af00      	add	r7, sp, #0
 8010526:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8010528:	4a14      	ldr	r2, [pc, #80]	; (801057c <_sbrk+0x5c>)
 801052a:	4b15      	ldr	r3, [pc, #84]	; (8010580 <_sbrk+0x60>)
 801052c:	1ad3      	subs	r3, r2, r3
 801052e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8010530:	697b      	ldr	r3, [r7, #20]
 8010532:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8010534:	4b13      	ldr	r3, [pc, #76]	; (8010584 <_sbrk+0x64>)
 8010536:	681b      	ldr	r3, [r3, #0]
 8010538:	2b00      	cmp	r3, #0
 801053a:	d102      	bne.n	8010542 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 801053c:	4b11      	ldr	r3, [pc, #68]	; (8010584 <_sbrk+0x64>)
 801053e:	4a12      	ldr	r2, [pc, #72]	; (8010588 <_sbrk+0x68>)
 8010540:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8010542:	4b10      	ldr	r3, [pc, #64]	; (8010584 <_sbrk+0x64>)
 8010544:	681a      	ldr	r2, [r3, #0]
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	4413      	add	r3, r2
 801054a:	693a      	ldr	r2, [r7, #16]
 801054c:	429a      	cmp	r2, r3
 801054e:	d207      	bcs.n	8010560 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8010550:	f001 f942 	bl	80117d8 <__errno>
 8010554:	4603      	mov	r3, r0
 8010556:	220c      	movs	r2, #12
 8010558:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 801055a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801055e:	e009      	b.n	8010574 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8010560:	4b08      	ldr	r3, [pc, #32]	; (8010584 <_sbrk+0x64>)
 8010562:	681b      	ldr	r3, [r3, #0]
 8010564:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8010566:	4b07      	ldr	r3, [pc, #28]	; (8010584 <_sbrk+0x64>)
 8010568:	681a      	ldr	r2, [r3, #0]
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	4413      	add	r3, r2
 801056e:	4a05      	ldr	r2, [pc, #20]	; (8010584 <_sbrk+0x64>)
 8010570:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8010572:	68fb      	ldr	r3, [r7, #12]
}
 8010574:	4618      	mov	r0, r3
 8010576:	3718      	adds	r7, #24
 8010578:	46bd      	mov	sp, r7
 801057a:	bd80      	pop	{r7, pc}
 801057c:	20005000 	.word	0x20005000
 8010580:	00000400 	.word	0x00000400
 8010584:	2000008c 	.word	0x2000008c
 8010588:	200000f0 	.word	0x200000f0

0801058c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 801058c:	b480      	push	{r7}
 801058e:	af00      	add	r7, sp, #0
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
 8010590:	4b03      	ldr	r3, [pc, #12]	; (80105a0 <SystemInit+0x14>)
 8010592:	4a04      	ldr	r2, [pc, #16]	; (80105a4 <SystemInit+0x18>)
 8010594:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8010596:	bf00      	nop
 8010598:	46bd      	mov	sp, r7
 801059a:	bc80      	pop	{r7}
 801059c:	4770      	bx	lr
 801059e:	bf00      	nop
 80105a0:	e000ed00 	.word	0xe000ed00
 80105a4:	08010000 	.word	0x08010000

080105a8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80105a8:	480c      	ldr	r0, [pc, #48]	; (80105dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80105aa:	490d      	ldr	r1, [pc, #52]	; (80105e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80105ac:	4a0d      	ldr	r2, [pc, #52]	; (80105e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80105ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80105b0:	e002      	b.n	80105b8 <LoopCopyDataInit>

080105b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80105b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80105b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80105b6:	3304      	adds	r3, #4

080105b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80105b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80105ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80105bc:	d3f9      	bcc.n	80105b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80105be:	4a0a      	ldr	r2, [pc, #40]	; (80105e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80105c0:	4c0a      	ldr	r4, [pc, #40]	; (80105ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80105c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80105c4:	e001      	b.n	80105ca <LoopFillZerobss>

080105c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80105c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80105c8:	3204      	adds	r2, #4

080105ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80105ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80105cc:	d3fb      	bcc.n	80105c6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80105ce:	f7ff ffdd 	bl	801058c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80105d2:	f001 f907 	bl	80117e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80105d6:	f7ff fdcb 	bl	8010170 <main>
  bx lr
 80105da:	4770      	bx	lr
  ldr r0, =_sdata
 80105dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80105e0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80105e4:	080127f4 	.word	0x080127f4
  ldr r2, =_sbss
 80105e8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80105ec:	200000f0 	.word	0x200000f0

080105f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80105f0:	e7fe      	b.n	80105f0 <ADC1_2_IRQHandler>
	...

080105f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80105f4:	b580      	push	{r7, lr}
 80105f6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80105f8:	4b08      	ldr	r3, [pc, #32]	; (801061c <HAL_Init+0x28>)
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	4a07      	ldr	r2, [pc, #28]	; (801061c <HAL_Init+0x28>)
 80105fe:	f043 0310 	orr.w	r3, r3, #16
 8010602:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8010604:	2003      	movs	r0, #3
 8010606:	f000 f92b 	bl	8010860 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 801060a:	200f      	movs	r0, #15
 801060c:	f000 f808 	bl	8010620 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8010610:	f7ff fe78 	bl	8010304 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8010614:	2300      	movs	r3, #0
}
 8010616:	4618      	mov	r0, r3
 8010618:	bd80      	pop	{r7, pc}
 801061a:	bf00      	nop
 801061c:	40022000 	.word	0x40022000

08010620 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8010620:	b580      	push	{r7, lr}
 8010622:	b082      	sub	sp, #8
 8010624:	af00      	add	r7, sp, #0
 8010626:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8010628:	4b12      	ldr	r3, [pc, #72]	; (8010674 <HAL_InitTick+0x54>)
 801062a:	681a      	ldr	r2, [r3, #0]
 801062c:	4b12      	ldr	r3, [pc, #72]	; (8010678 <HAL_InitTick+0x58>)
 801062e:	781b      	ldrb	r3, [r3, #0]
 8010630:	4619      	mov	r1, r3
 8010632:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010636:	fbb3 f3f1 	udiv	r3, r3, r1
 801063a:	fbb2 f3f3 	udiv	r3, r2, r3
 801063e:	4618      	mov	r0, r3
 8010640:	f000 f935 	bl	80108ae <HAL_SYSTICK_Config>
 8010644:	4603      	mov	r3, r0
 8010646:	2b00      	cmp	r3, #0
 8010648:	d001      	beq.n	801064e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 801064a:	2301      	movs	r3, #1
 801064c:	e00e      	b.n	801066c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	2b0f      	cmp	r3, #15
 8010652:	d80a      	bhi.n	801066a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8010654:	2200      	movs	r2, #0
 8010656:	6879      	ldr	r1, [r7, #4]
 8010658:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801065c:	f000 f90b 	bl	8010876 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8010660:	4a06      	ldr	r2, [pc, #24]	; (801067c <HAL_InitTick+0x5c>)
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8010666:	2300      	movs	r3, #0
 8010668:	e000      	b.n	801066c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 801066a:	2301      	movs	r3, #1
}
 801066c:	4618      	mov	r0, r3
 801066e:	3708      	adds	r7, #8
 8010670:	46bd      	mov	sp, r7
 8010672:	bd80      	pop	{r7, pc}
 8010674:	20000000 	.word	0x20000000
 8010678:	20000008 	.word	0x20000008
 801067c:	20000004 	.word	0x20000004

08010680 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8010680:	b480      	push	{r7}
 8010682:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8010684:	4b05      	ldr	r3, [pc, #20]	; (801069c <HAL_IncTick+0x1c>)
 8010686:	781b      	ldrb	r3, [r3, #0]
 8010688:	461a      	mov	r2, r3
 801068a:	4b05      	ldr	r3, [pc, #20]	; (80106a0 <HAL_IncTick+0x20>)
 801068c:	681b      	ldr	r3, [r3, #0]
 801068e:	4413      	add	r3, r2
 8010690:	4a03      	ldr	r2, [pc, #12]	; (80106a0 <HAL_IncTick+0x20>)
 8010692:	6013      	str	r3, [r2, #0]
}
 8010694:	bf00      	nop
 8010696:	46bd      	mov	sp, r7
 8010698:	bc80      	pop	{r7}
 801069a:	4770      	bx	lr
 801069c:	20000008 	.word	0x20000008
 80106a0:	200000dc 	.word	0x200000dc

080106a4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80106a4:	b480      	push	{r7}
 80106a6:	af00      	add	r7, sp, #0
  return uwTick;
 80106a8:	4b02      	ldr	r3, [pc, #8]	; (80106b4 <HAL_GetTick+0x10>)
 80106aa:	681b      	ldr	r3, [r3, #0]
}
 80106ac:	4618      	mov	r0, r3
 80106ae:	46bd      	mov	sp, r7
 80106b0:	bc80      	pop	{r7}
 80106b2:	4770      	bx	lr
 80106b4:	200000dc 	.word	0x200000dc

080106b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80106b8:	b580      	push	{r7, lr}
 80106ba:	b084      	sub	sp, #16
 80106bc:	af00      	add	r7, sp, #0
 80106be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80106c0:	f7ff fff0 	bl	80106a4 <HAL_GetTick>
 80106c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80106ca:	68fb      	ldr	r3, [r7, #12]
 80106cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80106d0:	d005      	beq.n	80106de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80106d2:	4b0a      	ldr	r3, [pc, #40]	; (80106fc <HAL_Delay+0x44>)
 80106d4:	781b      	ldrb	r3, [r3, #0]
 80106d6:	461a      	mov	r2, r3
 80106d8:	68fb      	ldr	r3, [r7, #12]
 80106da:	4413      	add	r3, r2
 80106dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80106de:	bf00      	nop
 80106e0:	f7ff ffe0 	bl	80106a4 <HAL_GetTick>
 80106e4:	4602      	mov	r2, r0
 80106e6:	68bb      	ldr	r3, [r7, #8]
 80106e8:	1ad3      	subs	r3, r2, r3
 80106ea:	68fa      	ldr	r2, [r7, #12]
 80106ec:	429a      	cmp	r2, r3
 80106ee:	d8f7      	bhi.n	80106e0 <HAL_Delay+0x28>
  {
  }
}
 80106f0:	bf00      	nop
 80106f2:	bf00      	nop
 80106f4:	3710      	adds	r7, #16
 80106f6:	46bd      	mov	sp, r7
 80106f8:	bd80      	pop	{r7, pc}
 80106fa:	bf00      	nop
 80106fc:	20000008 	.word	0x20000008

08010700 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8010700:	b480      	push	{r7}
 8010702:	b085      	sub	sp, #20
 8010704:	af00      	add	r7, sp, #0
 8010706:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	f003 0307 	and.w	r3, r3, #7
 801070e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8010710:	4b0c      	ldr	r3, [pc, #48]	; (8010744 <__NVIC_SetPriorityGrouping+0x44>)
 8010712:	68db      	ldr	r3, [r3, #12]
 8010714:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8010716:	68ba      	ldr	r2, [r7, #8]
 8010718:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 801071c:	4013      	ands	r3, r2
 801071e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8010724:	68bb      	ldr	r3, [r7, #8]
 8010726:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8010728:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 801072c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010730:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8010732:	4a04      	ldr	r2, [pc, #16]	; (8010744 <__NVIC_SetPriorityGrouping+0x44>)
 8010734:	68bb      	ldr	r3, [r7, #8]
 8010736:	60d3      	str	r3, [r2, #12]
}
 8010738:	bf00      	nop
 801073a:	3714      	adds	r7, #20
 801073c:	46bd      	mov	sp, r7
 801073e:	bc80      	pop	{r7}
 8010740:	4770      	bx	lr
 8010742:	bf00      	nop
 8010744:	e000ed00 	.word	0xe000ed00

08010748 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8010748:	b480      	push	{r7}
 801074a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 801074c:	4b04      	ldr	r3, [pc, #16]	; (8010760 <__NVIC_GetPriorityGrouping+0x18>)
 801074e:	68db      	ldr	r3, [r3, #12]
 8010750:	0a1b      	lsrs	r3, r3, #8
 8010752:	f003 0307 	and.w	r3, r3, #7
}
 8010756:	4618      	mov	r0, r3
 8010758:	46bd      	mov	sp, r7
 801075a:	bc80      	pop	{r7}
 801075c:	4770      	bx	lr
 801075e:	bf00      	nop
 8010760:	e000ed00 	.word	0xe000ed00

08010764 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8010764:	b480      	push	{r7}
 8010766:	b083      	sub	sp, #12
 8010768:	af00      	add	r7, sp, #0
 801076a:	4603      	mov	r3, r0
 801076c:	6039      	str	r1, [r7, #0]
 801076e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010770:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010774:	2b00      	cmp	r3, #0
 8010776:	db0a      	blt.n	801078e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010778:	683b      	ldr	r3, [r7, #0]
 801077a:	b2da      	uxtb	r2, r3
 801077c:	490c      	ldr	r1, [pc, #48]	; (80107b0 <__NVIC_SetPriority+0x4c>)
 801077e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010782:	0112      	lsls	r2, r2, #4
 8010784:	b2d2      	uxtb	r2, r2
 8010786:	440b      	add	r3, r1
 8010788:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 801078c:	e00a      	b.n	80107a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801078e:	683b      	ldr	r3, [r7, #0]
 8010790:	b2da      	uxtb	r2, r3
 8010792:	4908      	ldr	r1, [pc, #32]	; (80107b4 <__NVIC_SetPriority+0x50>)
 8010794:	79fb      	ldrb	r3, [r7, #7]
 8010796:	f003 030f 	and.w	r3, r3, #15
 801079a:	3b04      	subs	r3, #4
 801079c:	0112      	lsls	r2, r2, #4
 801079e:	b2d2      	uxtb	r2, r2
 80107a0:	440b      	add	r3, r1
 80107a2:	761a      	strb	r2, [r3, #24]
}
 80107a4:	bf00      	nop
 80107a6:	370c      	adds	r7, #12
 80107a8:	46bd      	mov	sp, r7
 80107aa:	bc80      	pop	{r7}
 80107ac:	4770      	bx	lr
 80107ae:	bf00      	nop
 80107b0:	e000e100 	.word	0xe000e100
 80107b4:	e000ed00 	.word	0xe000ed00

080107b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80107b8:	b480      	push	{r7}
 80107ba:	b089      	sub	sp, #36	; 0x24
 80107bc:	af00      	add	r7, sp, #0
 80107be:	60f8      	str	r0, [r7, #12]
 80107c0:	60b9      	str	r1, [r7, #8]
 80107c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80107c4:	68fb      	ldr	r3, [r7, #12]
 80107c6:	f003 0307 	and.w	r3, r3, #7
 80107ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80107cc:	69fb      	ldr	r3, [r7, #28]
 80107ce:	f1c3 0307 	rsb	r3, r3, #7
 80107d2:	2b04      	cmp	r3, #4
 80107d4:	bf28      	it	cs
 80107d6:	2304      	movcs	r3, #4
 80107d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80107da:	69fb      	ldr	r3, [r7, #28]
 80107dc:	3304      	adds	r3, #4
 80107de:	2b06      	cmp	r3, #6
 80107e0:	d902      	bls.n	80107e8 <NVIC_EncodePriority+0x30>
 80107e2:	69fb      	ldr	r3, [r7, #28]
 80107e4:	3b03      	subs	r3, #3
 80107e6:	e000      	b.n	80107ea <NVIC_EncodePriority+0x32>
 80107e8:	2300      	movs	r3, #0
 80107ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80107ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80107f0:	69bb      	ldr	r3, [r7, #24]
 80107f2:	fa02 f303 	lsl.w	r3, r2, r3
 80107f6:	43da      	mvns	r2, r3
 80107f8:	68bb      	ldr	r3, [r7, #8]
 80107fa:	401a      	ands	r2, r3
 80107fc:	697b      	ldr	r3, [r7, #20]
 80107fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8010800:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8010804:	697b      	ldr	r3, [r7, #20]
 8010806:	fa01 f303 	lsl.w	r3, r1, r3
 801080a:	43d9      	mvns	r1, r3
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010810:	4313      	orrs	r3, r2
         );
}
 8010812:	4618      	mov	r0, r3
 8010814:	3724      	adds	r7, #36	; 0x24
 8010816:	46bd      	mov	sp, r7
 8010818:	bc80      	pop	{r7}
 801081a:	4770      	bx	lr

0801081c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 801081c:	b580      	push	{r7, lr}
 801081e:	b082      	sub	sp, #8
 8010820:	af00      	add	r7, sp, #0
 8010822:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	3b01      	subs	r3, #1
 8010828:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801082c:	d301      	bcc.n	8010832 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 801082e:	2301      	movs	r3, #1
 8010830:	e00f      	b.n	8010852 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8010832:	4a0a      	ldr	r2, [pc, #40]	; (801085c <SysTick_Config+0x40>)
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	3b01      	subs	r3, #1
 8010838:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 801083a:	210f      	movs	r1, #15
 801083c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010840:	f7ff ff90 	bl	8010764 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8010844:	4b05      	ldr	r3, [pc, #20]	; (801085c <SysTick_Config+0x40>)
 8010846:	2200      	movs	r2, #0
 8010848:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801084a:	4b04      	ldr	r3, [pc, #16]	; (801085c <SysTick_Config+0x40>)
 801084c:	2207      	movs	r2, #7
 801084e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8010850:	2300      	movs	r3, #0
}
 8010852:	4618      	mov	r0, r3
 8010854:	3708      	adds	r7, #8
 8010856:	46bd      	mov	sp, r7
 8010858:	bd80      	pop	{r7, pc}
 801085a:	bf00      	nop
 801085c:	e000e010 	.word	0xe000e010

08010860 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8010860:	b580      	push	{r7, lr}
 8010862:	b082      	sub	sp, #8
 8010864:	af00      	add	r7, sp, #0
 8010866:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8010868:	6878      	ldr	r0, [r7, #4]
 801086a:	f7ff ff49 	bl	8010700 <__NVIC_SetPriorityGrouping>
}
 801086e:	bf00      	nop
 8010870:	3708      	adds	r7, #8
 8010872:	46bd      	mov	sp, r7
 8010874:	bd80      	pop	{r7, pc}

08010876 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8010876:	b580      	push	{r7, lr}
 8010878:	b086      	sub	sp, #24
 801087a:	af00      	add	r7, sp, #0
 801087c:	4603      	mov	r3, r0
 801087e:	60b9      	str	r1, [r7, #8]
 8010880:	607a      	str	r2, [r7, #4]
 8010882:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8010884:	2300      	movs	r3, #0
 8010886:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8010888:	f7ff ff5e 	bl	8010748 <__NVIC_GetPriorityGrouping>
 801088c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 801088e:	687a      	ldr	r2, [r7, #4]
 8010890:	68b9      	ldr	r1, [r7, #8]
 8010892:	6978      	ldr	r0, [r7, #20]
 8010894:	f7ff ff90 	bl	80107b8 <NVIC_EncodePriority>
 8010898:	4602      	mov	r2, r0
 801089a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801089e:	4611      	mov	r1, r2
 80108a0:	4618      	mov	r0, r3
 80108a2:	f7ff ff5f 	bl	8010764 <__NVIC_SetPriority>
}
 80108a6:	bf00      	nop
 80108a8:	3718      	adds	r7, #24
 80108aa:	46bd      	mov	sp, r7
 80108ac:	bd80      	pop	{r7, pc}

080108ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80108ae:	b580      	push	{r7, lr}
 80108b0:	b082      	sub	sp, #8
 80108b2:	af00      	add	r7, sp, #0
 80108b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80108b6:	6878      	ldr	r0, [r7, #4]
 80108b8:	f7ff ffb0 	bl	801081c <SysTick_Config>
 80108bc:	4603      	mov	r3, r0
}
 80108be:	4618      	mov	r0, r3
 80108c0:	3708      	adds	r7, #8
 80108c2:	46bd      	mov	sp, r7
 80108c4:	bd80      	pop	{r7, pc}
	...

080108c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80108c8:	b480      	push	{r7}
 80108ca:	b08b      	sub	sp, #44	; 0x2c
 80108cc:	af00      	add	r7, sp, #0
 80108ce:	6078      	str	r0, [r7, #4]
 80108d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80108d2:	2300      	movs	r3, #0
 80108d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80108d6:	2300      	movs	r3, #0
 80108d8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80108da:	e169      	b.n	8010bb0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80108dc:	2201      	movs	r2, #1
 80108de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108e0:	fa02 f303 	lsl.w	r3, r2, r3
 80108e4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80108e6:	683b      	ldr	r3, [r7, #0]
 80108e8:	681b      	ldr	r3, [r3, #0]
 80108ea:	69fa      	ldr	r2, [r7, #28]
 80108ec:	4013      	ands	r3, r2
 80108ee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80108f0:	69ba      	ldr	r2, [r7, #24]
 80108f2:	69fb      	ldr	r3, [r7, #28]
 80108f4:	429a      	cmp	r2, r3
 80108f6:	f040 8158 	bne.w	8010baa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80108fa:	683b      	ldr	r3, [r7, #0]
 80108fc:	685b      	ldr	r3, [r3, #4]
 80108fe:	4a9a      	ldr	r2, [pc, #616]	; (8010b68 <HAL_GPIO_Init+0x2a0>)
 8010900:	4293      	cmp	r3, r2
 8010902:	d05e      	beq.n	80109c2 <HAL_GPIO_Init+0xfa>
 8010904:	4a98      	ldr	r2, [pc, #608]	; (8010b68 <HAL_GPIO_Init+0x2a0>)
 8010906:	4293      	cmp	r3, r2
 8010908:	d875      	bhi.n	80109f6 <HAL_GPIO_Init+0x12e>
 801090a:	4a98      	ldr	r2, [pc, #608]	; (8010b6c <HAL_GPIO_Init+0x2a4>)
 801090c:	4293      	cmp	r3, r2
 801090e:	d058      	beq.n	80109c2 <HAL_GPIO_Init+0xfa>
 8010910:	4a96      	ldr	r2, [pc, #600]	; (8010b6c <HAL_GPIO_Init+0x2a4>)
 8010912:	4293      	cmp	r3, r2
 8010914:	d86f      	bhi.n	80109f6 <HAL_GPIO_Init+0x12e>
 8010916:	4a96      	ldr	r2, [pc, #600]	; (8010b70 <HAL_GPIO_Init+0x2a8>)
 8010918:	4293      	cmp	r3, r2
 801091a:	d052      	beq.n	80109c2 <HAL_GPIO_Init+0xfa>
 801091c:	4a94      	ldr	r2, [pc, #592]	; (8010b70 <HAL_GPIO_Init+0x2a8>)
 801091e:	4293      	cmp	r3, r2
 8010920:	d869      	bhi.n	80109f6 <HAL_GPIO_Init+0x12e>
 8010922:	4a94      	ldr	r2, [pc, #592]	; (8010b74 <HAL_GPIO_Init+0x2ac>)
 8010924:	4293      	cmp	r3, r2
 8010926:	d04c      	beq.n	80109c2 <HAL_GPIO_Init+0xfa>
 8010928:	4a92      	ldr	r2, [pc, #584]	; (8010b74 <HAL_GPIO_Init+0x2ac>)
 801092a:	4293      	cmp	r3, r2
 801092c:	d863      	bhi.n	80109f6 <HAL_GPIO_Init+0x12e>
 801092e:	4a92      	ldr	r2, [pc, #584]	; (8010b78 <HAL_GPIO_Init+0x2b0>)
 8010930:	4293      	cmp	r3, r2
 8010932:	d046      	beq.n	80109c2 <HAL_GPIO_Init+0xfa>
 8010934:	4a90      	ldr	r2, [pc, #576]	; (8010b78 <HAL_GPIO_Init+0x2b0>)
 8010936:	4293      	cmp	r3, r2
 8010938:	d85d      	bhi.n	80109f6 <HAL_GPIO_Init+0x12e>
 801093a:	2b12      	cmp	r3, #18
 801093c:	d82a      	bhi.n	8010994 <HAL_GPIO_Init+0xcc>
 801093e:	2b12      	cmp	r3, #18
 8010940:	d859      	bhi.n	80109f6 <HAL_GPIO_Init+0x12e>
 8010942:	a201      	add	r2, pc, #4	; (adr r2, 8010948 <HAL_GPIO_Init+0x80>)
 8010944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010948:	080109c3 	.word	0x080109c3
 801094c:	0801099d 	.word	0x0801099d
 8010950:	080109af 	.word	0x080109af
 8010954:	080109f1 	.word	0x080109f1
 8010958:	080109f7 	.word	0x080109f7
 801095c:	080109f7 	.word	0x080109f7
 8010960:	080109f7 	.word	0x080109f7
 8010964:	080109f7 	.word	0x080109f7
 8010968:	080109f7 	.word	0x080109f7
 801096c:	080109f7 	.word	0x080109f7
 8010970:	080109f7 	.word	0x080109f7
 8010974:	080109f7 	.word	0x080109f7
 8010978:	080109f7 	.word	0x080109f7
 801097c:	080109f7 	.word	0x080109f7
 8010980:	080109f7 	.word	0x080109f7
 8010984:	080109f7 	.word	0x080109f7
 8010988:	080109f7 	.word	0x080109f7
 801098c:	080109a5 	.word	0x080109a5
 8010990:	080109b9 	.word	0x080109b9
 8010994:	4a79      	ldr	r2, [pc, #484]	; (8010b7c <HAL_GPIO_Init+0x2b4>)
 8010996:	4293      	cmp	r3, r2
 8010998:	d013      	beq.n	80109c2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 801099a:	e02c      	b.n	80109f6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 801099c:	683b      	ldr	r3, [r7, #0]
 801099e:	68db      	ldr	r3, [r3, #12]
 80109a0:	623b      	str	r3, [r7, #32]
          break;
 80109a2:	e029      	b.n	80109f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80109a4:	683b      	ldr	r3, [r7, #0]
 80109a6:	68db      	ldr	r3, [r3, #12]
 80109a8:	3304      	adds	r3, #4
 80109aa:	623b      	str	r3, [r7, #32]
          break;
 80109ac:	e024      	b.n	80109f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80109ae:	683b      	ldr	r3, [r7, #0]
 80109b0:	68db      	ldr	r3, [r3, #12]
 80109b2:	3308      	adds	r3, #8
 80109b4:	623b      	str	r3, [r7, #32]
          break;
 80109b6:	e01f      	b.n	80109f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80109b8:	683b      	ldr	r3, [r7, #0]
 80109ba:	68db      	ldr	r3, [r3, #12]
 80109bc:	330c      	adds	r3, #12
 80109be:	623b      	str	r3, [r7, #32]
          break;
 80109c0:	e01a      	b.n	80109f8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80109c2:	683b      	ldr	r3, [r7, #0]
 80109c4:	689b      	ldr	r3, [r3, #8]
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d102      	bne.n	80109d0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80109ca:	2304      	movs	r3, #4
 80109cc:	623b      	str	r3, [r7, #32]
          break;
 80109ce:	e013      	b.n	80109f8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80109d0:	683b      	ldr	r3, [r7, #0]
 80109d2:	689b      	ldr	r3, [r3, #8]
 80109d4:	2b01      	cmp	r3, #1
 80109d6:	d105      	bne.n	80109e4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80109d8:	2308      	movs	r3, #8
 80109da:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	69fa      	ldr	r2, [r7, #28]
 80109e0:	611a      	str	r2, [r3, #16]
          break;
 80109e2:	e009      	b.n	80109f8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80109e4:	2308      	movs	r3, #8
 80109e6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	69fa      	ldr	r2, [r7, #28]
 80109ec:	615a      	str	r2, [r3, #20]
          break;
 80109ee:	e003      	b.n	80109f8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80109f0:	2300      	movs	r3, #0
 80109f2:	623b      	str	r3, [r7, #32]
          break;
 80109f4:	e000      	b.n	80109f8 <HAL_GPIO_Init+0x130>
          break;
 80109f6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80109f8:	69bb      	ldr	r3, [r7, #24]
 80109fa:	2bff      	cmp	r3, #255	; 0xff
 80109fc:	d801      	bhi.n	8010a02 <HAL_GPIO_Init+0x13a>
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	e001      	b.n	8010a06 <HAL_GPIO_Init+0x13e>
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	3304      	adds	r3, #4
 8010a06:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8010a08:	69bb      	ldr	r3, [r7, #24]
 8010a0a:	2bff      	cmp	r3, #255	; 0xff
 8010a0c:	d802      	bhi.n	8010a14 <HAL_GPIO_Init+0x14c>
 8010a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a10:	009b      	lsls	r3, r3, #2
 8010a12:	e002      	b.n	8010a1a <HAL_GPIO_Init+0x152>
 8010a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a16:	3b08      	subs	r3, #8
 8010a18:	009b      	lsls	r3, r3, #2
 8010a1a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8010a1c:	697b      	ldr	r3, [r7, #20]
 8010a1e:	681a      	ldr	r2, [r3, #0]
 8010a20:	210f      	movs	r1, #15
 8010a22:	693b      	ldr	r3, [r7, #16]
 8010a24:	fa01 f303 	lsl.w	r3, r1, r3
 8010a28:	43db      	mvns	r3, r3
 8010a2a:	401a      	ands	r2, r3
 8010a2c:	6a39      	ldr	r1, [r7, #32]
 8010a2e:	693b      	ldr	r3, [r7, #16]
 8010a30:	fa01 f303 	lsl.w	r3, r1, r3
 8010a34:	431a      	orrs	r2, r3
 8010a36:	697b      	ldr	r3, [r7, #20]
 8010a38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8010a3a:	683b      	ldr	r3, [r7, #0]
 8010a3c:	685b      	ldr	r3, [r3, #4]
 8010a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	f000 80b1 	beq.w	8010baa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8010a48:	4b4d      	ldr	r3, [pc, #308]	; (8010b80 <HAL_GPIO_Init+0x2b8>)
 8010a4a:	699b      	ldr	r3, [r3, #24]
 8010a4c:	4a4c      	ldr	r2, [pc, #304]	; (8010b80 <HAL_GPIO_Init+0x2b8>)
 8010a4e:	f043 0301 	orr.w	r3, r3, #1
 8010a52:	6193      	str	r3, [r2, #24]
 8010a54:	4b4a      	ldr	r3, [pc, #296]	; (8010b80 <HAL_GPIO_Init+0x2b8>)
 8010a56:	699b      	ldr	r3, [r3, #24]
 8010a58:	f003 0301 	and.w	r3, r3, #1
 8010a5c:	60bb      	str	r3, [r7, #8]
 8010a5e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8010a60:	4a48      	ldr	r2, [pc, #288]	; (8010b84 <HAL_GPIO_Init+0x2bc>)
 8010a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a64:	089b      	lsrs	r3, r3, #2
 8010a66:	3302      	adds	r3, #2
 8010a68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010a6c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8010a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a70:	f003 0303 	and.w	r3, r3, #3
 8010a74:	009b      	lsls	r3, r3, #2
 8010a76:	220f      	movs	r2, #15
 8010a78:	fa02 f303 	lsl.w	r3, r2, r3
 8010a7c:	43db      	mvns	r3, r3
 8010a7e:	68fa      	ldr	r2, [r7, #12]
 8010a80:	4013      	ands	r3, r2
 8010a82:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	4a40      	ldr	r2, [pc, #256]	; (8010b88 <HAL_GPIO_Init+0x2c0>)
 8010a88:	4293      	cmp	r3, r2
 8010a8a:	d013      	beq.n	8010ab4 <HAL_GPIO_Init+0x1ec>
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	4a3f      	ldr	r2, [pc, #252]	; (8010b8c <HAL_GPIO_Init+0x2c4>)
 8010a90:	4293      	cmp	r3, r2
 8010a92:	d00d      	beq.n	8010ab0 <HAL_GPIO_Init+0x1e8>
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	4a3e      	ldr	r2, [pc, #248]	; (8010b90 <HAL_GPIO_Init+0x2c8>)
 8010a98:	4293      	cmp	r3, r2
 8010a9a:	d007      	beq.n	8010aac <HAL_GPIO_Init+0x1e4>
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	4a3d      	ldr	r2, [pc, #244]	; (8010b94 <HAL_GPIO_Init+0x2cc>)
 8010aa0:	4293      	cmp	r3, r2
 8010aa2:	d101      	bne.n	8010aa8 <HAL_GPIO_Init+0x1e0>
 8010aa4:	2303      	movs	r3, #3
 8010aa6:	e006      	b.n	8010ab6 <HAL_GPIO_Init+0x1ee>
 8010aa8:	2304      	movs	r3, #4
 8010aaa:	e004      	b.n	8010ab6 <HAL_GPIO_Init+0x1ee>
 8010aac:	2302      	movs	r3, #2
 8010aae:	e002      	b.n	8010ab6 <HAL_GPIO_Init+0x1ee>
 8010ab0:	2301      	movs	r3, #1
 8010ab2:	e000      	b.n	8010ab6 <HAL_GPIO_Init+0x1ee>
 8010ab4:	2300      	movs	r3, #0
 8010ab6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010ab8:	f002 0203 	and.w	r2, r2, #3
 8010abc:	0092      	lsls	r2, r2, #2
 8010abe:	4093      	lsls	r3, r2
 8010ac0:	68fa      	ldr	r2, [r7, #12]
 8010ac2:	4313      	orrs	r3, r2
 8010ac4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8010ac6:	492f      	ldr	r1, [pc, #188]	; (8010b84 <HAL_GPIO_Init+0x2bc>)
 8010ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010aca:	089b      	lsrs	r3, r3, #2
 8010acc:	3302      	adds	r3, #2
 8010ace:	68fa      	ldr	r2, [r7, #12]
 8010ad0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8010ad4:	683b      	ldr	r3, [r7, #0]
 8010ad6:	685b      	ldr	r3, [r3, #4]
 8010ad8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	d006      	beq.n	8010aee <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8010ae0:	4b2d      	ldr	r3, [pc, #180]	; (8010b98 <HAL_GPIO_Init+0x2d0>)
 8010ae2:	681a      	ldr	r2, [r3, #0]
 8010ae4:	492c      	ldr	r1, [pc, #176]	; (8010b98 <HAL_GPIO_Init+0x2d0>)
 8010ae6:	69bb      	ldr	r3, [r7, #24]
 8010ae8:	4313      	orrs	r3, r2
 8010aea:	600b      	str	r3, [r1, #0]
 8010aec:	e006      	b.n	8010afc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8010aee:	4b2a      	ldr	r3, [pc, #168]	; (8010b98 <HAL_GPIO_Init+0x2d0>)
 8010af0:	681a      	ldr	r2, [r3, #0]
 8010af2:	69bb      	ldr	r3, [r7, #24]
 8010af4:	43db      	mvns	r3, r3
 8010af6:	4928      	ldr	r1, [pc, #160]	; (8010b98 <HAL_GPIO_Init+0x2d0>)
 8010af8:	4013      	ands	r3, r2
 8010afa:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8010afc:	683b      	ldr	r3, [r7, #0]
 8010afe:	685b      	ldr	r3, [r3, #4]
 8010b00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d006      	beq.n	8010b16 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8010b08:	4b23      	ldr	r3, [pc, #140]	; (8010b98 <HAL_GPIO_Init+0x2d0>)
 8010b0a:	685a      	ldr	r2, [r3, #4]
 8010b0c:	4922      	ldr	r1, [pc, #136]	; (8010b98 <HAL_GPIO_Init+0x2d0>)
 8010b0e:	69bb      	ldr	r3, [r7, #24]
 8010b10:	4313      	orrs	r3, r2
 8010b12:	604b      	str	r3, [r1, #4]
 8010b14:	e006      	b.n	8010b24 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8010b16:	4b20      	ldr	r3, [pc, #128]	; (8010b98 <HAL_GPIO_Init+0x2d0>)
 8010b18:	685a      	ldr	r2, [r3, #4]
 8010b1a:	69bb      	ldr	r3, [r7, #24]
 8010b1c:	43db      	mvns	r3, r3
 8010b1e:	491e      	ldr	r1, [pc, #120]	; (8010b98 <HAL_GPIO_Init+0x2d0>)
 8010b20:	4013      	ands	r3, r2
 8010b22:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8010b24:	683b      	ldr	r3, [r7, #0]
 8010b26:	685b      	ldr	r3, [r3, #4]
 8010b28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d006      	beq.n	8010b3e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8010b30:	4b19      	ldr	r3, [pc, #100]	; (8010b98 <HAL_GPIO_Init+0x2d0>)
 8010b32:	689a      	ldr	r2, [r3, #8]
 8010b34:	4918      	ldr	r1, [pc, #96]	; (8010b98 <HAL_GPIO_Init+0x2d0>)
 8010b36:	69bb      	ldr	r3, [r7, #24]
 8010b38:	4313      	orrs	r3, r2
 8010b3a:	608b      	str	r3, [r1, #8]
 8010b3c:	e006      	b.n	8010b4c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8010b3e:	4b16      	ldr	r3, [pc, #88]	; (8010b98 <HAL_GPIO_Init+0x2d0>)
 8010b40:	689a      	ldr	r2, [r3, #8]
 8010b42:	69bb      	ldr	r3, [r7, #24]
 8010b44:	43db      	mvns	r3, r3
 8010b46:	4914      	ldr	r1, [pc, #80]	; (8010b98 <HAL_GPIO_Init+0x2d0>)
 8010b48:	4013      	ands	r3, r2
 8010b4a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8010b4c:	683b      	ldr	r3, [r7, #0]
 8010b4e:	685b      	ldr	r3, [r3, #4]
 8010b50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d021      	beq.n	8010b9c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8010b58:	4b0f      	ldr	r3, [pc, #60]	; (8010b98 <HAL_GPIO_Init+0x2d0>)
 8010b5a:	68da      	ldr	r2, [r3, #12]
 8010b5c:	490e      	ldr	r1, [pc, #56]	; (8010b98 <HAL_GPIO_Init+0x2d0>)
 8010b5e:	69bb      	ldr	r3, [r7, #24]
 8010b60:	4313      	orrs	r3, r2
 8010b62:	60cb      	str	r3, [r1, #12]
 8010b64:	e021      	b.n	8010baa <HAL_GPIO_Init+0x2e2>
 8010b66:	bf00      	nop
 8010b68:	10320000 	.word	0x10320000
 8010b6c:	10310000 	.word	0x10310000
 8010b70:	10220000 	.word	0x10220000
 8010b74:	10210000 	.word	0x10210000
 8010b78:	10120000 	.word	0x10120000
 8010b7c:	10110000 	.word	0x10110000
 8010b80:	40021000 	.word	0x40021000
 8010b84:	40010000 	.word	0x40010000
 8010b88:	40010800 	.word	0x40010800
 8010b8c:	40010c00 	.word	0x40010c00
 8010b90:	40011000 	.word	0x40011000
 8010b94:	40011400 	.word	0x40011400
 8010b98:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8010b9c:	4b0b      	ldr	r3, [pc, #44]	; (8010bcc <HAL_GPIO_Init+0x304>)
 8010b9e:	68da      	ldr	r2, [r3, #12]
 8010ba0:	69bb      	ldr	r3, [r7, #24]
 8010ba2:	43db      	mvns	r3, r3
 8010ba4:	4909      	ldr	r1, [pc, #36]	; (8010bcc <HAL_GPIO_Init+0x304>)
 8010ba6:	4013      	ands	r3, r2
 8010ba8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8010baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bac:	3301      	adds	r3, #1
 8010bae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8010bb0:	683b      	ldr	r3, [r7, #0]
 8010bb2:	681a      	ldr	r2, [r3, #0]
 8010bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bb6:	fa22 f303 	lsr.w	r3, r2, r3
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	f47f ae8e 	bne.w	80108dc <HAL_GPIO_Init+0x14>
  }
}
 8010bc0:	bf00      	nop
 8010bc2:	bf00      	nop
 8010bc4:	372c      	adds	r7, #44	; 0x2c
 8010bc6:	46bd      	mov	sp, r7
 8010bc8:	bc80      	pop	{r7}
 8010bca:	4770      	bx	lr
 8010bcc:	40010400 	.word	0x40010400

08010bd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8010bd0:	b480      	push	{r7}
 8010bd2:	b083      	sub	sp, #12
 8010bd4:	af00      	add	r7, sp, #0
 8010bd6:	6078      	str	r0, [r7, #4]
 8010bd8:	460b      	mov	r3, r1
 8010bda:	807b      	strh	r3, [r7, #2]
 8010bdc:	4613      	mov	r3, r2
 8010bde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8010be0:	787b      	ldrb	r3, [r7, #1]
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	d003      	beq.n	8010bee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8010be6:	887a      	ldrh	r2, [r7, #2]
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8010bec:	e003      	b.n	8010bf6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8010bee:	887b      	ldrh	r3, [r7, #2]
 8010bf0:	041a      	lsls	r2, r3, #16
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	611a      	str	r2, [r3, #16]
}
 8010bf6:	bf00      	nop
 8010bf8:	370c      	adds	r7, #12
 8010bfa:	46bd      	mov	sp, r7
 8010bfc:	bc80      	pop	{r7}
 8010bfe:	4770      	bx	lr

08010c00 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8010c00:	b480      	push	{r7}
 8010c02:	b085      	sub	sp, #20
 8010c04:	af00      	add	r7, sp, #0
 8010c06:	6078      	str	r0, [r7, #4]
 8010c08:	460b      	mov	r3, r1
 8010c0a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	68db      	ldr	r3, [r3, #12]
 8010c10:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8010c12:	887a      	ldrh	r2, [r7, #2]
 8010c14:	68fb      	ldr	r3, [r7, #12]
 8010c16:	4013      	ands	r3, r2
 8010c18:	041a      	lsls	r2, r3, #16
 8010c1a:	68fb      	ldr	r3, [r7, #12]
 8010c1c:	43d9      	mvns	r1, r3
 8010c1e:	887b      	ldrh	r3, [r7, #2]
 8010c20:	400b      	ands	r3, r1
 8010c22:	431a      	orrs	r2, r3
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	611a      	str	r2, [r3, #16]
}
 8010c28:	bf00      	nop
 8010c2a:	3714      	adds	r7, #20
 8010c2c:	46bd      	mov	sp, r7
 8010c2e:	bc80      	pop	{r7}
 8010c30:	4770      	bx	lr
	...

08010c34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8010c34:	b580      	push	{r7, lr}
 8010c36:	b086      	sub	sp, #24
 8010c38:	af00      	add	r7, sp, #0
 8010c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d101      	bne.n	8010c46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8010c42:	2301      	movs	r3, #1
 8010c44:	e26c      	b.n	8011120 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	681b      	ldr	r3, [r3, #0]
 8010c4a:	f003 0301 	and.w	r3, r3, #1
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	f000 8087 	beq.w	8010d62 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8010c54:	4b92      	ldr	r3, [pc, #584]	; (8010ea0 <HAL_RCC_OscConfig+0x26c>)
 8010c56:	685b      	ldr	r3, [r3, #4]
 8010c58:	f003 030c 	and.w	r3, r3, #12
 8010c5c:	2b04      	cmp	r3, #4
 8010c5e:	d00c      	beq.n	8010c7a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8010c60:	4b8f      	ldr	r3, [pc, #572]	; (8010ea0 <HAL_RCC_OscConfig+0x26c>)
 8010c62:	685b      	ldr	r3, [r3, #4]
 8010c64:	f003 030c 	and.w	r3, r3, #12
 8010c68:	2b08      	cmp	r3, #8
 8010c6a:	d112      	bne.n	8010c92 <HAL_RCC_OscConfig+0x5e>
 8010c6c:	4b8c      	ldr	r3, [pc, #560]	; (8010ea0 <HAL_RCC_OscConfig+0x26c>)
 8010c6e:	685b      	ldr	r3, [r3, #4]
 8010c70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010c74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010c78:	d10b      	bne.n	8010c92 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010c7a:	4b89      	ldr	r3, [pc, #548]	; (8010ea0 <HAL_RCC_OscConfig+0x26c>)
 8010c7c:	681b      	ldr	r3, [r3, #0]
 8010c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010c82:	2b00      	cmp	r3, #0
 8010c84:	d06c      	beq.n	8010d60 <HAL_RCC_OscConfig+0x12c>
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	685b      	ldr	r3, [r3, #4]
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d168      	bne.n	8010d60 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8010c8e:	2301      	movs	r3, #1
 8010c90:	e246      	b.n	8011120 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	685b      	ldr	r3, [r3, #4]
 8010c96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010c9a:	d106      	bne.n	8010caa <HAL_RCC_OscConfig+0x76>
 8010c9c:	4b80      	ldr	r3, [pc, #512]	; (8010ea0 <HAL_RCC_OscConfig+0x26c>)
 8010c9e:	681b      	ldr	r3, [r3, #0]
 8010ca0:	4a7f      	ldr	r2, [pc, #508]	; (8010ea0 <HAL_RCC_OscConfig+0x26c>)
 8010ca2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010ca6:	6013      	str	r3, [r2, #0]
 8010ca8:	e02e      	b.n	8010d08 <HAL_RCC_OscConfig+0xd4>
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	685b      	ldr	r3, [r3, #4]
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d10c      	bne.n	8010ccc <HAL_RCC_OscConfig+0x98>
 8010cb2:	4b7b      	ldr	r3, [pc, #492]	; (8010ea0 <HAL_RCC_OscConfig+0x26c>)
 8010cb4:	681b      	ldr	r3, [r3, #0]
 8010cb6:	4a7a      	ldr	r2, [pc, #488]	; (8010ea0 <HAL_RCC_OscConfig+0x26c>)
 8010cb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010cbc:	6013      	str	r3, [r2, #0]
 8010cbe:	4b78      	ldr	r3, [pc, #480]	; (8010ea0 <HAL_RCC_OscConfig+0x26c>)
 8010cc0:	681b      	ldr	r3, [r3, #0]
 8010cc2:	4a77      	ldr	r2, [pc, #476]	; (8010ea0 <HAL_RCC_OscConfig+0x26c>)
 8010cc4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010cc8:	6013      	str	r3, [r2, #0]
 8010cca:	e01d      	b.n	8010d08 <HAL_RCC_OscConfig+0xd4>
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	685b      	ldr	r3, [r3, #4]
 8010cd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8010cd4:	d10c      	bne.n	8010cf0 <HAL_RCC_OscConfig+0xbc>
 8010cd6:	4b72      	ldr	r3, [pc, #456]	; (8010ea0 <HAL_RCC_OscConfig+0x26c>)
 8010cd8:	681b      	ldr	r3, [r3, #0]
 8010cda:	4a71      	ldr	r2, [pc, #452]	; (8010ea0 <HAL_RCC_OscConfig+0x26c>)
 8010cdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8010ce0:	6013      	str	r3, [r2, #0]
 8010ce2:	4b6f      	ldr	r3, [pc, #444]	; (8010ea0 <HAL_RCC_OscConfig+0x26c>)
 8010ce4:	681b      	ldr	r3, [r3, #0]
 8010ce6:	4a6e      	ldr	r2, [pc, #440]	; (8010ea0 <HAL_RCC_OscConfig+0x26c>)
 8010ce8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010cec:	6013      	str	r3, [r2, #0]
 8010cee:	e00b      	b.n	8010d08 <HAL_RCC_OscConfig+0xd4>
 8010cf0:	4b6b      	ldr	r3, [pc, #428]	; (8010ea0 <HAL_RCC_OscConfig+0x26c>)
 8010cf2:	681b      	ldr	r3, [r3, #0]
 8010cf4:	4a6a      	ldr	r2, [pc, #424]	; (8010ea0 <HAL_RCC_OscConfig+0x26c>)
 8010cf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010cfa:	6013      	str	r3, [r2, #0]
 8010cfc:	4b68      	ldr	r3, [pc, #416]	; (8010ea0 <HAL_RCC_OscConfig+0x26c>)
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	4a67      	ldr	r2, [pc, #412]	; (8010ea0 <HAL_RCC_OscConfig+0x26c>)
 8010d02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010d06:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	685b      	ldr	r3, [r3, #4]
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	d013      	beq.n	8010d38 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010d10:	f7ff fcc8 	bl	80106a4 <HAL_GetTick>
 8010d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010d16:	e008      	b.n	8010d2a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8010d18:	f7ff fcc4 	bl	80106a4 <HAL_GetTick>
 8010d1c:	4602      	mov	r2, r0
 8010d1e:	693b      	ldr	r3, [r7, #16]
 8010d20:	1ad3      	subs	r3, r2, r3
 8010d22:	2b64      	cmp	r3, #100	; 0x64
 8010d24:	d901      	bls.n	8010d2a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8010d26:	2303      	movs	r3, #3
 8010d28:	e1fa      	b.n	8011120 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010d2a:	4b5d      	ldr	r3, [pc, #372]	; (8010ea0 <HAL_RCC_OscConfig+0x26c>)
 8010d2c:	681b      	ldr	r3, [r3, #0]
 8010d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d0f0      	beq.n	8010d18 <HAL_RCC_OscConfig+0xe4>
 8010d36:	e014      	b.n	8010d62 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010d38:	f7ff fcb4 	bl	80106a4 <HAL_GetTick>
 8010d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8010d3e:	e008      	b.n	8010d52 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8010d40:	f7ff fcb0 	bl	80106a4 <HAL_GetTick>
 8010d44:	4602      	mov	r2, r0
 8010d46:	693b      	ldr	r3, [r7, #16]
 8010d48:	1ad3      	subs	r3, r2, r3
 8010d4a:	2b64      	cmp	r3, #100	; 0x64
 8010d4c:	d901      	bls.n	8010d52 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8010d4e:	2303      	movs	r3, #3
 8010d50:	e1e6      	b.n	8011120 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8010d52:	4b53      	ldr	r3, [pc, #332]	; (8010ea0 <HAL_RCC_OscConfig+0x26c>)
 8010d54:	681b      	ldr	r3, [r3, #0]
 8010d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	d1f0      	bne.n	8010d40 <HAL_RCC_OscConfig+0x10c>
 8010d5e:	e000      	b.n	8010d62 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010d60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	681b      	ldr	r3, [r3, #0]
 8010d66:	f003 0302 	and.w	r3, r3, #2
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	d063      	beq.n	8010e36 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8010d6e:	4b4c      	ldr	r3, [pc, #304]	; (8010ea0 <HAL_RCC_OscConfig+0x26c>)
 8010d70:	685b      	ldr	r3, [r3, #4]
 8010d72:	f003 030c 	and.w	r3, r3, #12
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	d00b      	beq.n	8010d92 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8010d7a:	4b49      	ldr	r3, [pc, #292]	; (8010ea0 <HAL_RCC_OscConfig+0x26c>)
 8010d7c:	685b      	ldr	r3, [r3, #4]
 8010d7e:	f003 030c 	and.w	r3, r3, #12
 8010d82:	2b08      	cmp	r3, #8
 8010d84:	d11c      	bne.n	8010dc0 <HAL_RCC_OscConfig+0x18c>
 8010d86:	4b46      	ldr	r3, [pc, #280]	; (8010ea0 <HAL_RCC_OscConfig+0x26c>)
 8010d88:	685b      	ldr	r3, [r3, #4]
 8010d8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d116      	bne.n	8010dc0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8010d92:	4b43      	ldr	r3, [pc, #268]	; (8010ea0 <HAL_RCC_OscConfig+0x26c>)
 8010d94:	681b      	ldr	r3, [r3, #0]
 8010d96:	f003 0302 	and.w	r3, r3, #2
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d005      	beq.n	8010daa <HAL_RCC_OscConfig+0x176>
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	691b      	ldr	r3, [r3, #16]
 8010da2:	2b01      	cmp	r3, #1
 8010da4:	d001      	beq.n	8010daa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8010da6:	2301      	movs	r3, #1
 8010da8:	e1ba      	b.n	8011120 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010daa:	4b3d      	ldr	r3, [pc, #244]	; (8010ea0 <HAL_RCC_OscConfig+0x26c>)
 8010dac:	681b      	ldr	r3, [r3, #0]
 8010dae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	695b      	ldr	r3, [r3, #20]
 8010db6:	00db      	lsls	r3, r3, #3
 8010db8:	4939      	ldr	r1, [pc, #228]	; (8010ea0 <HAL_RCC_OscConfig+0x26c>)
 8010dba:	4313      	orrs	r3, r2
 8010dbc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8010dbe:	e03a      	b.n	8010e36 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	691b      	ldr	r3, [r3, #16]
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	d020      	beq.n	8010e0a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8010dc8:	4b36      	ldr	r3, [pc, #216]	; (8010ea4 <HAL_RCC_OscConfig+0x270>)
 8010dca:	2201      	movs	r2, #1
 8010dcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010dce:	f7ff fc69 	bl	80106a4 <HAL_GetTick>
 8010dd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010dd4:	e008      	b.n	8010de8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8010dd6:	f7ff fc65 	bl	80106a4 <HAL_GetTick>
 8010dda:	4602      	mov	r2, r0
 8010ddc:	693b      	ldr	r3, [r7, #16]
 8010dde:	1ad3      	subs	r3, r2, r3
 8010de0:	2b02      	cmp	r3, #2
 8010de2:	d901      	bls.n	8010de8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8010de4:	2303      	movs	r3, #3
 8010de6:	e19b      	b.n	8011120 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010de8:	4b2d      	ldr	r3, [pc, #180]	; (8010ea0 <HAL_RCC_OscConfig+0x26c>)
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	f003 0302 	and.w	r3, r3, #2
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d0f0      	beq.n	8010dd6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010df4:	4b2a      	ldr	r3, [pc, #168]	; (8010ea0 <HAL_RCC_OscConfig+0x26c>)
 8010df6:	681b      	ldr	r3, [r3, #0]
 8010df8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	695b      	ldr	r3, [r3, #20]
 8010e00:	00db      	lsls	r3, r3, #3
 8010e02:	4927      	ldr	r1, [pc, #156]	; (8010ea0 <HAL_RCC_OscConfig+0x26c>)
 8010e04:	4313      	orrs	r3, r2
 8010e06:	600b      	str	r3, [r1, #0]
 8010e08:	e015      	b.n	8010e36 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8010e0a:	4b26      	ldr	r3, [pc, #152]	; (8010ea4 <HAL_RCC_OscConfig+0x270>)
 8010e0c:	2200      	movs	r2, #0
 8010e0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010e10:	f7ff fc48 	bl	80106a4 <HAL_GetTick>
 8010e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8010e16:	e008      	b.n	8010e2a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8010e18:	f7ff fc44 	bl	80106a4 <HAL_GetTick>
 8010e1c:	4602      	mov	r2, r0
 8010e1e:	693b      	ldr	r3, [r7, #16]
 8010e20:	1ad3      	subs	r3, r2, r3
 8010e22:	2b02      	cmp	r3, #2
 8010e24:	d901      	bls.n	8010e2a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8010e26:	2303      	movs	r3, #3
 8010e28:	e17a      	b.n	8011120 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8010e2a:	4b1d      	ldr	r3, [pc, #116]	; (8010ea0 <HAL_RCC_OscConfig+0x26c>)
 8010e2c:	681b      	ldr	r3, [r3, #0]
 8010e2e:	f003 0302 	and.w	r3, r3, #2
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d1f0      	bne.n	8010e18 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	681b      	ldr	r3, [r3, #0]
 8010e3a:	f003 0308 	and.w	r3, r3, #8
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d03a      	beq.n	8010eb8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	699b      	ldr	r3, [r3, #24]
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d019      	beq.n	8010e7e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8010e4a:	4b17      	ldr	r3, [pc, #92]	; (8010ea8 <HAL_RCC_OscConfig+0x274>)
 8010e4c:	2201      	movs	r2, #1
 8010e4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8010e50:	f7ff fc28 	bl	80106a4 <HAL_GetTick>
 8010e54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8010e56:	e008      	b.n	8010e6a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8010e58:	f7ff fc24 	bl	80106a4 <HAL_GetTick>
 8010e5c:	4602      	mov	r2, r0
 8010e5e:	693b      	ldr	r3, [r7, #16]
 8010e60:	1ad3      	subs	r3, r2, r3
 8010e62:	2b02      	cmp	r3, #2
 8010e64:	d901      	bls.n	8010e6a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8010e66:	2303      	movs	r3, #3
 8010e68:	e15a      	b.n	8011120 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8010e6a:	4b0d      	ldr	r3, [pc, #52]	; (8010ea0 <HAL_RCC_OscConfig+0x26c>)
 8010e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e6e:	f003 0302 	and.w	r3, r3, #2
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	d0f0      	beq.n	8010e58 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8010e76:	2001      	movs	r0, #1
 8010e78:	f000 fad8 	bl	801142c <RCC_Delay>
 8010e7c:	e01c      	b.n	8010eb8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8010e7e:	4b0a      	ldr	r3, [pc, #40]	; (8010ea8 <HAL_RCC_OscConfig+0x274>)
 8010e80:	2200      	movs	r2, #0
 8010e82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8010e84:	f7ff fc0e 	bl	80106a4 <HAL_GetTick>
 8010e88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8010e8a:	e00f      	b.n	8010eac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8010e8c:	f7ff fc0a 	bl	80106a4 <HAL_GetTick>
 8010e90:	4602      	mov	r2, r0
 8010e92:	693b      	ldr	r3, [r7, #16]
 8010e94:	1ad3      	subs	r3, r2, r3
 8010e96:	2b02      	cmp	r3, #2
 8010e98:	d908      	bls.n	8010eac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8010e9a:	2303      	movs	r3, #3
 8010e9c:	e140      	b.n	8011120 <HAL_RCC_OscConfig+0x4ec>
 8010e9e:	bf00      	nop
 8010ea0:	40021000 	.word	0x40021000
 8010ea4:	42420000 	.word	0x42420000
 8010ea8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8010eac:	4b9e      	ldr	r3, [pc, #632]	; (8011128 <HAL_RCC_OscConfig+0x4f4>)
 8010eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010eb0:	f003 0302 	and.w	r3, r3, #2
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	d1e9      	bne.n	8010e8c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	681b      	ldr	r3, [r3, #0]
 8010ebc:	f003 0304 	and.w	r3, r3, #4
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	f000 80a6 	beq.w	8011012 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8010ec6:	2300      	movs	r3, #0
 8010ec8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8010eca:	4b97      	ldr	r3, [pc, #604]	; (8011128 <HAL_RCC_OscConfig+0x4f4>)
 8010ecc:	69db      	ldr	r3, [r3, #28]
 8010ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d10d      	bne.n	8010ef2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8010ed6:	4b94      	ldr	r3, [pc, #592]	; (8011128 <HAL_RCC_OscConfig+0x4f4>)
 8010ed8:	69db      	ldr	r3, [r3, #28]
 8010eda:	4a93      	ldr	r2, [pc, #588]	; (8011128 <HAL_RCC_OscConfig+0x4f4>)
 8010edc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010ee0:	61d3      	str	r3, [r2, #28]
 8010ee2:	4b91      	ldr	r3, [pc, #580]	; (8011128 <HAL_RCC_OscConfig+0x4f4>)
 8010ee4:	69db      	ldr	r3, [r3, #28]
 8010ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010eea:	60bb      	str	r3, [r7, #8]
 8010eec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8010eee:	2301      	movs	r3, #1
 8010ef0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8010ef2:	4b8e      	ldr	r3, [pc, #568]	; (801112c <HAL_RCC_OscConfig+0x4f8>)
 8010ef4:	681b      	ldr	r3, [r3, #0]
 8010ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d118      	bne.n	8010f30 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8010efe:	4b8b      	ldr	r3, [pc, #556]	; (801112c <HAL_RCC_OscConfig+0x4f8>)
 8010f00:	681b      	ldr	r3, [r3, #0]
 8010f02:	4a8a      	ldr	r2, [pc, #552]	; (801112c <HAL_RCC_OscConfig+0x4f8>)
 8010f04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010f08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8010f0a:	f7ff fbcb 	bl	80106a4 <HAL_GetTick>
 8010f0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8010f10:	e008      	b.n	8010f24 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8010f12:	f7ff fbc7 	bl	80106a4 <HAL_GetTick>
 8010f16:	4602      	mov	r2, r0
 8010f18:	693b      	ldr	r3, [r7, #16]
 8010f1a:	1ad3      	subs	r3, r2, r3
 8010f1c:	2b64      	cmp	r3, #100	; 0x64
 8010f1e:	d901      	bls.n	8010f24 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8010f20:	2303      	movs	r3, #3
 8010f22:	e0fd      	b.n	8011120 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8010f24:	4b81      	ldr	r3, [pc, #516]	; (801112c <HAL_RCC_OscConfig+0x4f8>)
 8010f26:	681b      	ldr	r3, [r3, #0]
 8010f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	d0f0      	beq.n	8010f12 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	68db      	ldr	r3, [r3, #12]
 8010f34:	2b01      	cmp	r3, #1
 8010f36:	d106      	bne.n	8010f46 <HAL_RCC_OscConfig+0x312>
 8010f38:	4b7b      	ldr	r3, [pc, #492]	; (8011128 <HAL_RCC_OscConfig+0x4f4>)
 8010f3a:	6a1b      	ldr	r3, [r3, #32]
 8010f3c:	4a7a      	ldr	r2, [pc, #488]	; (8011128 <HAL_RCC_OscConfig+0x4f4>)
 8010f3e:	f043 0301 	orr.w	r3, r3, #1
 8010f42:	6213      	str	r3, [r2, #32]
 8010f44:	e02d      	b.n	8010fa2 <HAL_RCC_OscConfig+0x36e>
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	68db      	ldr	r3, [r3, #12]
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	d10c      	bne.n	8010f68 <HAL_RCC_OscConfig+0x334>
 8010f4e:	4b76      	ldr	r3, [pc, #472]	; (8011128 <HAL_RCC_OscConfig+0x4f4>)
 8010f50:	6a1b      	ldr	r3, [r3, #32]
 8010f52:	4a75      	ldr	r2, [pc, #468]	; (8011128 <HAL_RCC_OscConfig+0x4f4>)
 8010f54:	f023 0301 	bic.w	r3, r3, #1
 8010f58:	6213      	str	r3, [r2, #32]
 8010f5a:	4b73      	ldr	r3, [pc, #460]	; (8011128 <HAL_RCC_OscConfig+0x4f4>)
 8010f5c:	6a1b      	ldr	r3, [r3, #32]
 8010f5e:	4a72      	ldr	r2, [pc, #456]	; (8011128 <HAL_RCC_OscConfig+0x4f4>)
 8010f60:	f023 0304 	bic.w	r3, r3, #4
 8010f64:	6213      	str	r3, [r2, #32]
 8010f66:	e01c      	b.n	8010fa2 <HAL_RCC_OscConfig+0x36e>
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	68db      	ldr	r3, [r3, #12]
 8010f6c:	2b05      	cmp	r3, #5
 8010f6e:	d10c      	bne.n	8010f8a <HAL_RCC_OscConfig+0x356>
 8010f70:	4b6d      	ldr	r3, [pc, #436]	; (8011128 <HAL_RCC_OscConfig+0x4f4>)
 8010f72:	6a1b      	ldr	r3, [r3, #32]
 8010f74:	4a6c      	ldr	r2, [pc, #432]	; (8011128 <HAL_RCC_OscConfig+0x4f4>)
 8010f76:	f043 0304 	orr.w	r3, r3, #4
 8010f7a:	6213      	str	r3, [r2, #32]
 8010f7c:	4b6a      	ldr	r3, [pc, #424]	; (8011128 <HAL_RCC_OscConfig+0x4f4>)
 8010f7e:	6a1b      	ldr	r3, [r3, #32]
 8010f80:	4a69      	ldr	r2, [pc, #420]	; (8011128 <HAL_RCC_OscConfig+0x4f4>)
 8010f82:	f043 0301 	orr.w	r3, r3, #1
 8010f86:	6213      	str	r3, [r2, #32]
 8010f88:	e00b      	b.n	8010fa2 <HAL_RCC_OscConfig+0x36e>
 8010f8a:	4b67      	ldr	r3, [pc, #412]	; (8011128 <HAL_RCC_OscConfig+0x4f4>)
 8010f8c:	6a1b      	ldr	r3, [r3, #32]
 8010f8e:	4a66      	ldr	r2, [pc, #408]	; (8011128 <HAL_RCC_OscConfig+0x4f4>)
 8010f90:	f023 0301 	bic.w	r3, r3, #1
 8010f94:	6213      	str	r3, [r2, #32]
 8010f96:	4b64      	ldr	r3, [pc, #400]	; (8011128 <HAL_RCC_OscConfig+0x4f4>)
 8010f98:	6a1b      	ldr	r3, [r3, #32]
 8010f9a:	4a63      	ldr	r2, [pc, #396]	; (8011128 <HAL_RCC_OscConfig+0x4f4>)
 8010f9c:	f023 0304 	bic.w	r3, r3, #4
 8010fa0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	68db      	ldr	r3, [r3, #12]
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	d015      	beq.n	8010fd6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8010faa:	f7ff fb7b 	bl	80106a4 <HAL_GetTick>
 8010fae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8010fb0:	e00a      	b.n	8010fc8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8010fb2:	f7ff fb77 	bl	80106a4 <HAL_GetTick>
 8010fb6:	4602      	mov	r2, r0
 8010fb8:	693b      	ldr	r3, [r7, #16]
 8010fba:	1ad3      	subs	r3, r2, r3
 8010fbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8010fc0:	4293      	cmp	r3, r2
 8010fc2:	d901      	bls.n	8010fc8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8010fc4:	2303      	movs	r3, #3
 8010fc6:	e0ab      	b.n	8011120 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8010fc8:	4b57      	ldr	r3, [pc, #348]	; (8011128 <HAL_RCC_OscConfig+0x4f4>)
 8010fca:	6a1b      	ldr	r3, [r3, #32]
 8010fcc:	f003 0302 	and.w	r3, r3, #2
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d0ee      	beq.n	8010fb2 <HAL_RCC_OscConfig+0x37e>
 8010fd4:	e014      	b.n	8011000 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8010fd6:	f7ff fb65 	bl	80106a4 <HAL_GetTick>
 8010fda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8010fdc:	e00a      	b.n	8010ff4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8010fde:	f7ff fb61 	bl	80106a4 <HAL_GetTick>
 8010fe2:	4602      	mov	r2, r0
 8010fe4:	693b      	ldr	r3, [r7, #16]
 8010fe6:	1ad3      	subs	r3, r2, r3
 8010fe8:	f241 3288 	movw	r2, #5000	; 0x1388
 8010fec:	4293      	cmp	r3, r2
 8010fee:	d901      	bls.n	8010ff4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8010ff0:	2303      	movs	r3, #3
 8010ff2:	e095      	b.n	8011120 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8010ff4:	4b4c      	ldr	r3, [pc, #304]	; (8011128 <HAL_RCC_OscConfig+0x4f4>)
 8010ff6:	6a1b      	ldr	r3, [r3, #32]
 8010ff8:	f003 0302 	and.w	r3, r3, #2
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	d1ee      	bne.n	8010fde <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8011000:	7dfb      	ldrb	r3, [r7, #23]
 8011002:	2b01      	cmp	r3, #1
 8011004:	d105      	bne.n	8011012 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8011006:	4b48      	ldr	r3, [pc, #288]	; (8011128 <HAL_RCC_OscConfig+0x4f4>)
 8011008:	69db      	ldr	r3, [r3, #28]
 801100a:	4a47      	ldr	r2, [pc, #284]	; (8011128 <HAL_RCC_OscConfig+0x4f4>)
 801100c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011010:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	69db      	ldr	r3, [r3, #28]
 8011016:	2b00      	cmp	r3, #0
 8011018:	f000 8081 	beq.w	801111e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801101c:	4b42      	ldr	r3, [pc, #264]	; (8011128 <HAL_RCC_OscConfig+0x4f4>)
 801101e:	685b      	ldr	r3, [r3, #4]
 8011020:	f003 030c 	and.w	r3, r3, #12
 8011024:	2b08      	cmp	r3, #8
 8011026:	d061      	beq.n	80110ec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	69db      	ldr	r3, [r3, #28]
 801102c:	2b02      	cmp	r3, #2
 801102e:	d146      	bne.n	80110be <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8011030:	4b3f      	ldr	r3, [pc, #252]	; (8011130 <HAL_RCC_OscConfig+0x4fc>)
 8011032:	2200      	movs	r2, #0
 8011034:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011036:	f7ff fb35 	bl	80106a4 <HAL_GetTick>
 801103a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 801103c:	e008      	b.n	8011050 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801103e:	f7ff fb31 	bl	80106a4 <HAL_GetTick>
 8011042:	4602      	mov	r2, r0
 8011044:	693b      	ldr	r3, [r7, #16]
 8011046:	1ad3      	subs	r3, r2, r3
 8011048:	2b02      	cmp	r3, #2
 801104a:	d901      	bls.n	8011050 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 801104c:	2303      	movs	r3, #3
 801104e:	e067      	b.n	8011120 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8011050:	4b35      	ldr	r3, [pc, #212]	; (8011128 <HAL_RCC_OscConfig+0x4f4>)
 8011052:	681b      	ldr	r3, [r3, #0]
 8011054:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011058:	2b00      	cmp	r3, #0
 801105a:	d1f0      	bne.n	801103e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	6a1b      	ldr	r3, [r3, #32]
 8011060:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011064:	d108      	bne.n	8011078 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8011066:	4b30      	ldr	r3, [pc, #192]	; (8011128 <HAL_RCC_OscConfig+0x4f4>)
 8011068:	685b      	ldr	r3, [r3, #4]
 801106a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	689b      	ldr	r3, [r3, #8]
 8011072:	492d      	ldr	r1, [pc, #180]	; (8011128 <HAL_RCC_OscConfig+0x4f4>)
 8011074:	4313      	orrs	r3, r2
 8011076:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8011078:	4b2b      	ldr	r3, [pc, #172]	; (8011128 <HAL_RCC_OscConfig+0x4f4>)
 801107a:	685b      	ldr	r3, [r3, #4]
 801107c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	6a19      	ldr	r1, [r3, #32]
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011088:	430b      	orrs	r3, r1
 801108a:	4927      	ldr	r1, [pc, #156]	; (8011128 <HAL_RCC_OscConfig+0x4f4>)
 801108c:	4313      	orrs	r3, r2
 801108e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8011090:	4b27      	ldr	r3, [pc, #156]	; (8011130 <HAL_RCC_OscConfig+0x4fc>)
 8011092:	2201      	movs	r2, #1
 8011094:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011096:	f7ff fb05 	bl	80106a4 <HAL_GetTick>
 801109a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 801109c:	e008      	b.n	80110b0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801109e:	f7ff fb01 	bl	80106a4 <HAL_GetTick>
 80110a2:	4602      	mov	r2, r0
 80110a4:	693b      	ldr	r3, [r7, #16]
 80110a6:	1ad3      	subs	r3, r2, r3
 80110a8:	2b02      	cmp	r3, #2
 80110aa:	d901      	bls.n	80110b0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80110ac:	2303      	movs	r3, #3
 80110ae:	e037      	b.n	8011120 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80110b0:	4b1d      	ldr	r3, [pc, #116]	; (8011128 <HAL_RCC_OscConfig+0x4f4>)
 80110b2:	681b      	ldr	r3, [r3, #0]
 80110b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	d0f0      	beq.n	801109e <HAL_RCC_OscConfig+0x46a>
 80110bc:	e02f      	b.n	801111e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80110be:	4b1c      	ldr	r3, [pc, #112]	; (8011130 <HAL_RCC_OscConfig+0x4fc>)
 80110c0:	2200      	movs	r2, #0
 80110c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80110c4:	f7ff faee 	bl	80106a4 <HAL_GetTick>
 80110c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80110ca:	e008      	b.n	80110de <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80110cc:	f7ff faea 	bl	80106a4 <HAL_GetTick>
 80110d0:	4602      	mov	r2, r0
 80110d2:	693b      	ldr	r3, [r7, #16]
 80110d4:	1ad3      	subs	r3, r2, r3
 80110d6:	2b02      	cmp	r3, #2
 80110d8:	d901      	bls.n	80110de <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80110da:	2303      	movs	r3, #3
 80110dc:	e020      	b.n	8011120 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80110de:	4b12      	ldr	r3, [pc, #72]	; (8011128 <HAL_RCC_OscConfig+0x4f4>)
 80110e0:	681b      	ldr	r3, [r3, #0]
 80110e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d1f0      	bne.n	80110cc <HAL_RCC_OscConfig+0x498>
 80110ea:	e018      	b.n	801111e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	69db      	ldr	r3, [r3, #28]
 80110f0:	2b01      	cmp	r3, #1
 80110f2:	d101      	bne.n	80110f8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80110f4:	2301      	movs	r3, #1
 80110f6:	e013      	b.n	8011120 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80110f8:	4b0b      	ldr	r3, [pc, #44]	; (8011128 <HAL_RCC_OscConfig+0x4f4>)
 80110fa:	685b      	ldr	r3, [r3, #4]
 80110fc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80110fe:	68fb      	ldr	r3, [r7, #12]
 8011100:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	6a1b      	ldr	r3, [r3, #32]
 8011108:	429a      	cmp	r2, r3
 801110a:	d106      	bne.n	801111a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 801110c:	68fb      	ldr	r3, [r7, #12]
 801110e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8011116:	429a      	cmp	r2, r3
 8011118:	d001      	beq.n	801111e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 801111a:	2301      	movs	r3, #1
 801111c:	e000      	b.n	8011120 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 801111e:	2300      	movs	r3, #0
}
 8011120:	4618      	mov	r0, r3
 8011122:	3718      	adds	r7, #24
 8011124:	46bd      	mov	sp, r7
 8011126:	bd80      	pop	{r7, pc}
 8011128:	40021000 	.word	0x40021000
 801112c:	40007000 	.word	0x40007000
 8011130:	42420060 	.word	0x42420060

08011134 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8011134:	b580      	push	{r7, lr}
 8011136:	b084      	sub	sp, #16
 8011138:	af00      	add	r7, sp, #0
 801113a:	6078      	str	r0, [r7, #4]
 801113c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	2b00      	cmp	r3, #0
 8011142:	d101      	bne.n	8011148 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8011144:	2301      	movs	r3, #1
 8011146:	e0d0      	b.n	80112ea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8011148:	4b6a      	ldr	r3, [pc, #424]	; (80112f4 <HAL_RCC_ClockConfig+0x1c0>)
 801114a:	681b      	ldr	r3, [r3, #0]
 801114c:	f003 0307 	and.w	r3, r3, #7
 8011150:	683a      	ldr	r2, [r7, #0]
 8011152:	429a      	cmp	r2, r3
 8011154:	d910      	bls.n	8011178 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011156:	4b67      	ldr	r3, [pc, #412]	; (80112f4 <HAL_RCC_ClockConfig+0x1c0>)
 8011158:	681b      	ldr	r3, [r3, #0]
 801115a:	f023 0207 	bic.w	r2, r3, #7
 801115e:	4965      	ldr	r1, [pc, #404]	; (80112f4 <HAL_RCC_ClockConfig+0x1c0>)
 8011160:	683b      	ldr	r3, [r7, #0]
 8011162:	4313      	orrs	r3, r2
 8011164:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8011166:	4b63      	ldr	r3, [pc, #396]	; (80112f4 <HAL_RCC_ClockConfig+0x1c0>)
 8011168:	681b      	ldr	r3, [r3, #0]
 801116a:	f003 0307 	and.w	r3, r3, #7
 801116e:	683a      	ldr	r2, [r7, #0]
 8011170:	429a      	cmp	r2, r3
 8011172:	d001      	beq.n	8011178 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8011174:	2301      	movs	r3, #1
 8011176:	e0b8      	b.n	80112ea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	681b      	ldr	r3, [r3, #0]
 801117c:	f003 0302 	and.w	r3, r3, #2
 8011180:	2b00      	cmp	r3, #0
 8011182:	d020      	beq.n	80111c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	681b      	ldr	r3, [r3, #0]
 8011188:	f003 0304 	and.w	r3, r3, #4
 801118c:	2b00      	cmp	r3, #0
 801118e:	d005      	beq.n	801119c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8011190:	4b59      	ldr	r3, [pc, #356]	; (80112f8 <HAL_RCC_ClockConfig+0x1c4>)
 8011192:	685b      	ldr	r3, [r3, #4]
 8011194:	4a58      	ldr	r2, [pc, #352]	; (80112f8 <HAL_RCC_ClockConfig+0x1c4>)
 8011196:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 801119a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	681b      	ldr	r3, [r3, #0]
 80111a0:	f003 0308 	and.w	r3, r3, #8
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	d005      	beq.n	80111b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80111a8:	4b53      	ldr	r3, [pc, #332]	; (80112f8 <HAL_RCC_ClockConfig+0x1c4>)
 80111aa:	685b      	ldr	r3, [r3, #4]
 80111ac:	4a52      	ldr	r2, [pc, #328]	; (80112f8 <HAL_RCC_ClockConfig+0x1c4>)
 80111ae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80111b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80111b4:	4b50      	ldr	r3, [pc, #320]	; (80112f8 <HAL_RCC_ClockConfig+0x1c4>)
 80111b6:	685b      	ldr	r3, [r3, #4]
 80111b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	689b      	ldr	r3, [r3, #8]
 80111c0:	494d      	ldr	r1, [pc, #308]	; (80112f8 <HAL_RCC_ClockConfig+0x1c4>)
 80111c2:	4313      	orrs	r3, r2
 80111c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	681b      	ldr	r3, [r3, #0]
 80111ca:	f003 0301 	and.w	r3, r3, #1
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d040      	beq.n	8011254 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	685b      	ldr	r3, [r3, #4]
 80111d6:	2b01      	cmp	r3, #1
 80111d8:	d107      	bne.n	80111ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80111da:	4b47      	ldr	r3, [pc, #284]	; (80112f8 <HAL_RCC_ClockConfig+0x1c4>)
 80111dc:	681b      	ldr	r3, [r3, #0]
 80111de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	d115      	bne.n	8011212 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80111e6:	2301      	movs	r3, #1
 80111e8:	e07f      	b.n	80112ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	685b      	ldr	r3, [r3, #4]
 80111ee:	2b02      	cmp	r3, #2
 80111f0:	d107      	bne.n	8011202 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80111f2:	4b41      	ldr	r3, [pc, #260]	; (80112f8 <HAL_RCC_ClockConfig+0x1c4>)
 80111f4:	681b      	ldr	r3, [r3, #0]
 80111f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	d109      	bne.n	8011212 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80111fe:	2301      	movs	r3, #1
 8011200:	e073      	b.n	80112ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011202:	4b3d      	ldr	r3, [pc, #244]	; (80112f8 <HAL_RCC_ClockConfig+0x1c4>)
 8011204:	681b      	ldr	r3, [r3, #0]
 8011206:	f003 0302 	and.w	r3, r3, #2
 801120a:	2b00      	cmp	r3, #0
 801120c:	d101      	bne.n	8011212 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801120e:	2301      	movs	r3, #1
 8011210:	e06b      	b.n	80112ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8011212:	4b39      	ldr	r3, [pc, #228]	; (80112f8 <HAL_RCC_ClockConfig+0x1c4>)
 8011214:	685b      	ldr	r3, [r3, #4]
 8011216:	f023 0203 	bic.w	r2, r3, #3
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	685b      	ldr	r3, [r3, #4]
 801121e:	4936      	ldr	r1, [pc, #216]	; (80112f8 <HAL_RCC_ClockConfig+0x1c4>)
 8011220:	4313      	orrs	r3, r2
 8011222:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8011224:	f7ff fa3e 	bl	80106a4 <HAL_GetTick>
 8011228:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801122a:	e00a      	b.n	8011242 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801122c:	f7ff fa3a 	bl	80106a4 <HAL_GetTick>
 8011230:	4602      	mov	r2, r0
 8011232:	68fb      	ldr	r3, [r7, #12]
 8011234:	1ad3      	subs	r3, r2, r3
 8011236:	f241 3288 	movw	r2, #5000	; 0x1388
 801123a:	4293      	cmp	r3, r2
 801123c:	d901      	bls.n	8011242 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 801123e:	2303      	movs	r3, #3
 8011240:	e053      	b.n	80112ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8011242:	4b2d      	ldr	r3, [pc, #180]	; (80112f8 <HAL_RCC_ClockConfig+0x1c4>)
 8011244:	685b      	ldr	r3, [r3, #4]
 8011246:	f003 020c 	and.w	r2, r3, #12
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	685b      	ldr	r3, [r3, #4]
 801124e:	009b      	lsls	r3, r3, #2
 8011250:	429a      	cmp	r2, r3
 8011252:	d1eb      	bne.n	801122c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8011254:	4b27      	ldr	r3, [pc, #156]	; (80112f4 <HAL_RCC_ClockConfig+0x1c0>)
 8011256:	681b      	ldr	r3, [r3, #0]
 8011258:	f003 0307 	and.w	r3, r3, #7
 801125c:	683a      	ldr	r2, [r7, #0]
 801125e:	429a      	cmp	r2, r3
 8011260:	d210      	bcs.n	8011284 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011262:	4b24      	ldr	r3, [pc, #144]	; (80112f4 <HAL_RCC_ClockConfig+0x1c0>)
 8011264:	681b      	ldr	r3, [r3, #0]
 8011266:	f023 0207 	bic.w	r2, r3, #7
 801126a:	4922      	ldr	r1, [pc, #136]	; (80112f4 <HAL_RCC_ClockConfig+0x1c0>)
 801126c:	683b      	ldr	r3, [r7, #0]
 801126e:	4313      	orrs	r3, r2
 8011270:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8011272:	4b20      	ldr	r3, [pc, #128]	; (80112f4 <HAL_RCC_ClockConfig+0x1c0>)
 8011274:	681b      	ldr	r3, [r3, #0]
 8011276:	f003 0307 	and.w	r3, r3, #7
 801127a:	683a      	ldr	r2, [r7, #0]
 801127c:	429a      	cmp	r2, r3
 801127e:	d001      	beq.n	8011284 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8011280:	2301      	movs	r3, #1
 8011282:	e032      	b.n	80112ea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	681b      	ldr	r3, [r3, #0]
 8011288:	f003 0304 	and.w	r3, r3, #4
 801128c:	2b00      	cmp	r3, #0
 801128e:	d008      	beq.n	80112a2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8011290:	4b19      	ldr	r3, [pc, #100]	; (80112f8 <HAL_RCC_ClockConfig+0x1c4>)
 8011292:	685b      	ldr	r3, [r3, #4]
 8011294:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	68db      	ldr	r3, [r3, #12]
 801129c:	4916      	ldr	r1, [pc, #88]	; (80112f8 <HAL_RCC_ClockConfig+0x1c4>)
 801129e:	4313      	orrs	r3, r2
 80112a0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	681b      	ldr	r3, [r3, #0]
 80112a6:	f003 0308 	and.w	r3, r3, #8
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	d009      	beq.n	80112c2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80112ae:	4b12      	ldr	r3, [pc, #72]	; (80112f8 <HAL_RCC_ClockConfig+0x1c4>)
 80112b0:	685b      	ldr	r3, [r3, #4]
 80112b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	691b      	ldr	r3, [r3, #16]
 80112ba:	00db      	lsls	r3, r3, #3
 80112bc:	490e      	ldr	r1, [pc, #56]	; (80112f8 <HAL_RCC_ClockConfig+0x1c4>)
 80112be:	4313      	orrs	r3, r2
 80112c0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80112c2:	f000 f821 	bl	8011308 <HAL_RCC_GetSysClockFreq>
 80112c6:	4602      	mov	r2, r0
 80112c8:	4b0b      	ldr	r3, [pc, #44]	; (80112f8 <HAL_RCC_ClockConfig+0x1c4>)
 80112ca:	685b      	ldr	r3, [r3, #4]
 80112cc:	091b      	lsrs	r3, r3, #4
 80112ce:	f003 030f 	and.w	r3, r3, #15
 80112d2:	490a      	ldr	r1, [pc, #40]	; (80112fc <HAL_RCC_ClockConfig+0x1c8>)
 80112d4:	5ccb      	ldrb	r3, [r1, r3]
 80112d6:	fa22 f303 	lsr.w	r3, r2, r3
 80112da:	4a09      	ldr	r2, [pc, #36]	; (8011300 <HAL_RCC_ClockConfig+0x1cc>)
 80112dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80112de:	4b09      	ldr	r3, [pc, #36]	; (8011304 <HAL_RCC_ClockConfig+0x1d0>)
 80112e0:	681b      	ldr	r3, [r3, #0]
 80112e2:	4618      	mov	r0, r3
 80112e4:	f7ff f99c 	bl	8010620 <HAL_InitTick>

  return HAL_OK;
 80112e8:	2300      	movs	r3, #0
}
 80112ea:	4618      	mov	r0, r3
 80112ec:	3710      	adds	r7, #16
 80112ee:	46bd      	mov	sp, r7
 80112f0:	bd80      	pop	{r7, pc}
 80112f2:	bf00      	nop
 80112f4:	40022000 	.word	0x40022000
 80112f8:	40021000 	.word	0x40021000
 80112fc:	0801273c 	.word	0x0801273c
 8011300:	20000000 	.word	0x20000000
 8011304:	20000004 	.word	0x20000004

08011308 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8011308:	b490      	push	{r4, r7}
 801130a:	b08a      	sub	sp, #40	; 0x28
 801130c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 801130e:	4b2a      	ldr	r3, [pc, #168]	; (80113b8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8011310:	1d3c      	adds	r4, r7, #4
 8011312:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011314:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8011318:	f240 2301 	movw	r3, #513	; 0x201
 801131c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 801131e:	2300      	movs	r3, #0
 8011320:	61fb      	str	r3, [r7, #28]
 8011322:	2300      	movs	r3, #0
 8011324:	61bb      	str	r3, [r7, #24]
 8011326:	2300      	movs	r3, #0
 8011328:	627b      	str	r3, [r7, #36]	; 0x24
 801132a:	2300      	movs	r3, #0
 801132c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 801132e:	2300      	movs	r3, #0
 8011330:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8011332:	4b22      	ldr	r3, [pc, #136]	; (80113bc <HAL_RCC_GetSysClockFreq+0xb4>)
 8011334:	685b      	ldr	r3, [r3, #4]
 8011336:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8011338:	69fb      	ldr	r3, [r7, #28]
 801133a:	f003 030c 	and.w	r3, r3, #12
 801133e:	2b04      	cmp	r3, #4
 8011340:	d002      	beq.n	8011348 <HAL_RCC_GetSysClockFreq+0x40>
 8011342:	2b08      	cmp	r3, #8
 8011344:	d003      	beq.n	801134e <HAL_RCC_GetSysClockFreq+0x46>
 8011346:	e02d      	b.n	80113a4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8011348:	4b1d      	ldr	r3, [pc, #116]	; (80113c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 801134a:	623b      	str	r3, [r7, #32]
      break;
 801134c:	e02d      	b.n	80113aa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 801134e:	69fb      	ldr	r3, [r7, #28]
 8011350:	0c9b      	lsrs	r3, r3, #18
 8011352:	f003 030f 	and.w	r3, r3, #15
 8011356:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801135a:	4413      	add	r3, r2
 801135c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8011360:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8011362:	69fb      	ldr	r3, [r7, #28]
 8011364:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011368:	2b00      	cmp	r3, #0
 801136a:	d013      	beq.n	8011394 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 801136c:	4b13      	ldr	r3, [pc, #76]	; (80113bc <HAL_RCC_GetSysClockFreq+0xb4>)
 801136e:	685b      	ldr	r3, [r3, #4]
 8011370:	0c5b      	lsrs	r3, r3, #17
 8011372:	f003 0301 	and.w	r3, r3, #1
 8011376:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801137a:	4413      	add	r3, r2
 801137c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8011380:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8011382:	697b      	ldr	r3, [r7, #20]
 8011384:	4a0e      	ldr	r2, [pc, #56]	; (80113c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8011386:	fb02 f203 	mul.w	r2, r2, r3
 801138a:	69bb      	ldr	r3, [r7, #24]
 801138c:	fbb2 f3f3 	udiv	r3, r2, r3
 8011390:	627b      	str	r3, [r7, #36]	; 0x24
 8011392:	e004      	b.n	801139e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8011394:	697b      	ldr	r3, [r7, #20]
 8011396:	4a0b      	ldr	r2, [pc, #44]	; (80113c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8011398:	fb02 f303 	mul.w	r3, r2, r3
 801139c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 801139e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113a0:	623b      	str	r3, [r7, #32]
      break;
 80113a2:	e002      	b.n	80113aa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80113a4:	4b06      	ldr	r3, [pc, #24]	; (80113c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80113a6:	623b      	str	r3, [r7, #32]
      break;
 80113a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80113aa:	6a3b      	ldr	r3, [r7, #32]
}
 80113ac:	4618      	mov	r0, r3
 80113ae:	3728      	adds	r7, #40	; 0x28
 80113b0:	46bd      	mov	sp, r7
 80113b2:	bc90      	pop	{r4, r7}
 80113b4:	4770      	bx	lr
 80113b6:	bf00      	nop
 80113b8:	0801272c 	.word	0x0801272c
 80113bc:	40021000 	.word	0x40021000
 80113c0:	007a1200 	.word	0x007a1200
 80113c4:	003d0900 	.word	0x003d0900

080113c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80113c8:	b480      	push	{r7}
 80113ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80113cc:	4b02      	ldr	r3, [pc, #8]	; (80113d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80113ce:	681b      	ldr	r3, [r3, #0]
}
 80113d0:	4618      	mov	r0, r3
 80113d2:	46bd      	mov	sp, r7
 80113d4:	bc80      	pop	{r7}
 80113d6:	4770      	bx	lr
 80113d8:	20000000 	.word	0x20000000

080113dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80113dc:	b580      	push	{r7, lr}
 80113de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80113e0:	f7ff fff2 	bl	80113c8 <HAL_RCC_GetHCLKFreq>
 80113e4:	4602      	mov	r2, r0
 80113e6:	4b05      	ldr	r3, [pc, #20]	; (80113fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80113e8:	685b      	ldr	r3, [r3, #4]
 80113ea:	0a1b      	lsrs	r3, r3, #8
 80113ec:	f003 0307 	and.w	r3, r3, #7
 80113f0:	4903      	ldr	r1, [pc, #12]	; (8011400 <HAL_RCC_GetPCLK1Freq+0x24>)
 80113f2:	5ccb      	ldrb	r3, [r1, r3]
 80113f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80113f8:	4618      	mov	r0, r3
 80113fa:	bd80      	pop	{r7, pc}
 80113fc:	40021000 	.word	0x40021000
 8011400:	0801274c 	.word	0x0801274c

08011404 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8011404:	b580      	push	{r7, lr}
 8011406:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8011408:	f7ff ffde 	bl	80113c8 <HAL_RCC_GetHCLKFreq>
 801140c:	4602      	mov	r2, r0
 801140e:	4b05      	ldr	r3, [pc, #20]	; (8011424 <HAL_RCC_GetPCLK2Freq+0x20>)
 8011410:	685b      	ldr	r3, [r3, #4]
 8011412:	0adb      	lsrs	r3, r3, #11
 8011414:	f003 0307 	and.w	r3, r3, #7
 8011418:	4903      	ldr	r1, [pc, #12]	; (8011428 <HAL_RCC_GetPCLK2Freq+0x24>)
 801141a:	5ccb      	ldrb	r3, [r1, r3]
 801141c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8011420:	4618      	mov	r0, r3
 8011422:	bd80      	pop	{r7, pc}
 8011424:	40021000 	.word	0x40021000
 8011428:	0801274c 	.word	0x0801274c

0801142c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 801142c:	b480      	push	{r7}
 801142e:	b085      	sub	sp, #20
 8011430:	af00      	add	r7, sp, #0
 8011432:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8011434:	4b0a      	ldr	r3, [pc, #40]	; (8011460 <RCC_Delay+0x34>)
 8011436:	681b      	ldr	r3, [r3, #0]
 8011438:	4a0a      	ldr	r2, [pc, #40]	; (8011464 <RCC_Delay+0x38>)
 801143a:	fba2 2303 	umull	r2, r3, r2, r3
 801143e:	0a5b      	lsrs	r3, r3, #9
 8011440:	687a      	ldr	r2, [r7, #4]
 8011442:	fb02 f303 	mul.w	r3, r2, r3
 8011446:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8011448:	bf00      	nop
  }
  while (Delay --);
 801144a:	68fb      	ldr	r3, [r7, #12]
 801144c:	1e5a      	subs	r2, r3, #1
 801144e:	60fa      	str	r2, [r7, #12]
 8011450:	2b00      	cmp	r3, #0
 8011452:	d1f9      	bne.n	8011448 <RCC_Delay+0x1c>
}
 8011454:	bf00      	nop
 8011456:	bf00      	nop
 8011458:	3714      	adds	r7, #20
 801145a:	46bd      	mov	sp, r7
 801145c:	bc80      	pop	{r7}
 801145e:	4770      	bx	lr
 8011460:	20000000 	.word	0x20000000
 8011464:	10624dd3 	.word	0x10624dd3

08011468 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8011468:	b580      	push	{r7, lr}
 801146a:	b082      	sub	sp, #8
 801146c:	af00      	add	r7, sp, #0
 801146e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	2b00      	cmp	r3, #0
 8011474:	d101      	bne.n	801147a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8011476:	2301      	movs	r3, #1
 8011478:	e03f      	b.n	80114fa <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011480:	b2db      	uxtb	r3, r3
 8011482:	2b00      	cmp	r3, #0
 8011484:	d106      	bne.n	8011494 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	2200      	movs	r2, #0
 801148a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801148e:	6878      	ldr	r0, [r7, #4]
 8011490:	f7fe ff6a 	bl	8010368 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	2224      	movs	r2, #36	; 0x24
 8011498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	681b      	ldr	r3, [r3, #0]
 80114a0:	68da      	ldr	r2, [r3, #12]
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	681b      	ldr	r3, [r3, #0]
 80114a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80114aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80114ac:	6878      	ldr	r0, [r7, #4]
 80114ae:	f000 f905 	bl	80116bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	681b      	ldr	r3, [r3, #0]
 80114b6:	691a      	ldr	r2, [r3, #16]
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	681b      	ldr	r3, [r3, #0]
 80114bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80114c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	681b      	ldr	r3, [r3, #0]
 80114c6:	695a      	ldr	r2, [r3, #20]
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	681b      	ldr	r3, [r3, #0]
 80114cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80114d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	681b      	ldr	r3, [r3, #0]
 80114d6:	68da      	ldr	r2, [r3, #12]
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	681b      	ldr	r3, [r3, #0]
 80114dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80114e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	2200      	movs	r2, #0
 80114e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	2220      	movs	r2, #32
 80114ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	2220      	movs	r2, #32
 80114f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80114f8:	2300      	movs	r3, #0
}
 80114fa:	4618      	mov	r0, r3
 80114fc:	3708      	adds	r7, #8
 80114fe:	46bd      	mov	sp, r7
 8011500:	bd80      	pop	{r7, pc}

08011502 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011502:	b580      	push	{r7, lr}
 8011504:	b08a      	sub	sp, #40	; 0x28
 8011506:	af02      	add	r7, sp, #8
 8011508:	60f8      	str	r0, [r7, #12]
 801150a:	60b9      	str	r1, [r7, #8]
 801150c:	603b      	str	r3, [r7, #0]
 801150e:	4613      	mov	r3, r2
 8011510:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8011512:	2300      	movs	r3, #0
 8011514:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8011516:	68fb      	ldr	r3, [r7, #12]
 8011518:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801151c:	b2db      	uxtb	r3, r3
 801151e:	2b20      	cmp	r3, #32
 8011520:	d17c      	bne.n	801161c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8011522:	68bb      	ldr	r3, [r7, #8]
 8011524:	2b00      	cmp	r3, #0
 8011526:	d002      	beq.n	801152e <HAL_UART_Transmit+0x2c>
 8011528:	88fb      	ldrh	r3, [r7, #6]
 801152a:	2b00      	cmp	r3, #0
 801152c:	d101      	bne.n	8011532 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 801152e:	2301      	movs	r3, #1
 8011530:	e075      	b.n	801161e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8011532:	68fb      	ldr	r3, [r7, #12]
 8011534:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011538:	2b01      	cmp	r3, #1
 801153a:	d101      	bne.n	8011540 <HAL_UART_Transmit+0x3e>
 801153c:	2302      	movs	r3, #2
 801153e:	e06e      	b.n	801161e <HAL_UART_Transmit+0x11c>
 8011540:	68fb      	ldr	r3, [r7, #12]
 8011542:	2201      	movs	r2, #1
 8011544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011548:	68fb      	ldr	r3, [r7, #12]
 801154a:	2200      	movs	r2, #0
 801154c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801154e:	68fb      	ldr	r3, [r7, #12]
 8011550:	2221      	movs	r2, #33	; 0x21
 8011552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8011556:	f7ff f8a5 	bl	80106a4 <HAL_GetTick>
 801155a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 801155c:	68fb      	ldr	r3, [r7, #12]
 801155e:	88fa      	ldrh	r2, [r7, #6]
 8011560:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8011562:	68fb      	ldr	r3, [r7, #12]
 8011564:	88fa      	ldrh	r2, [r7, #6]
 8011566:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011568:	68fb      	ldr	r3, [r7, #12]
 801156a:	689b      	ldr	r3, [r3, #8]
 801156c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011570:	d108      	bne.n	8011584 <HAL_UART_Transmit+0x82>
 8011572:	68fb      	ldr	r3, [r7, #12]
 8011574:	691b      	ldr	r3, [r3, #16]
 8011576:	2b00      	cmp	r3, #0
 8011578:	d104      	bne.n	8011584 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 801157a:	2300      	movs	r3, #0
 801157c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 801157e:	68bb      	ldr	r3, [r7, #8]
 8011580:	61bb      	str	r3, [r7, #24]
 8011582:	e003      	b.n	801158c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8011584:	68bb      	ldr	r3, [r7, #8]
 8011586:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8011588:	2300      	movs	r3, #0
 801158a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 801158c:	68fb      	ldr	r3, [r7, #12]
 801158e:	2200      	movs	r2, #0
 8011590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8011594:	e02a      	b.n	80115ec <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8011596:	683b      	ldr	r3, [r7, #0]
 8011598:	9300      	str	r3, [sp, #0]
 801159a:	697b      	ldr	r3, [r7, #20]
 801159c:	2200      	movs	r2, #0
 801159e:	2180      	movs	r1, #128	; 0x80
 80115a0:	68f8      	ldr	r0, [r7, #12]
 80115a2:	f000 f840 	bl	8011626 <UART_WaitOnFlagUntilTimeout>
 80115a6:	4603      	mov	r3, r0
 80115a8:	2b00      	cmp	r3, #0
 80115aa:	d001      	beq.n	80115b0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80115ac:	2303      	movs	r3, #3
 80115ae:	e036      	b.n	801161e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80115b0:	69fb      	ldr	r3, [r7, #28]
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	d10b      	bne.n	80115ce <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80115b6:	69bb      	ldr	r3, [r7, #24]
 80115b8:	881b      	ldrh	r3, [r3, #0]
 80115ba:	461a      	mov	r2, r3
 80115bc:	68fb      	ldr	r3, [r7, #12]
 80115be:	681b      	ldr	r3, [r3, #0]
 80115c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80115c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80115c6:	69bb      	ldr	r3, [r7, #24]
 80115c8:	3302      	adds	r3, #2
 80115ca:	61bb      	str	r3, [r7, #24]
 80115cc:	e007      	b.n	80115de <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80115ce:	69fb      	ldr	r3, [r7, #28]
 80115d0:	781a      	ldrb	r2, [r3, #0]
 80115d2:	68fb      	ldr	r3, [r7, #12]
 80115d4:	681b      	ldr	r3, [r3, #0]
 80115d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80115d8:	69fb      	ldr	r3, [r7, #28]
 80115da:	3301      	adds	r3, #1
 80115dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80115de:	68fb      	ldr	r3, [r7, #12]
 80115e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80115e2:	b29b      	uxth	r3, r3
 80115e4:	3b01      	subs	r3, #1
 80115e6:	b29a      	uxth	r2, r3
 80115e8:	68fb      	ldr	r3, [r7, #12]
 80115ea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80115ec:	68fb      	ldr	r3, [r7, #12]
 80115ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80115f0:	b29b      	uxth	r3, r3
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	d1cf      	bne.n	8011596 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80115f6:	683b      	ldr	r3, [r7, #0]
 80115f8:	9300      	str	r3, [sp, #0]
 80115fa:	697b      	ldr	r3, [r7, #20]
 80115fc:	2200      	movs	r2, #0
 80115fe:	2140      	movs	r1, #64	; 0x40
 8011600:	68f8      	ldr	r0, [r7, #12]
 8011602:	f000 f810 	bl	8011626 <UART_WaitOnFlagUntilTimeout>
 8011606:	4603      	mov	r3, r0
 8011608:	2b00      	cmp	r3, #0
 801160a:	d001      	beq.n	8011610 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 801160c:	2303      	movs	r3, #3
 801160e:	e006      	b.n	801161e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8011610:	68fb      	ldr	r3, [r7, #12]
 8011612:	2220      	movs	r2, #32
 8011614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8011618:	2300      	movs	r3, #0
 801161a:	e000      	b.n	801161e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 801161c:	2302      	movs	r3, #2
  }
}
 801161e:	4618      	mov	r0, r3
 8011620:	3720      	adds	r7, #32
 8011622:	46bd      	mov	sp, r7
 8011624:	bd80      	pop	{r7, pc}

08011626 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8011626:	b580      	push	{r7, lr}
 8011628:	b084      	sub	sp, #16
 801162a:	af00      	add	r7, sp, #0
 801162c:	60f8      	str	r0, [r7, #12]
 801162e:	60b9      	str	r1, [r7, #8]
 8011630:	603b      	str	r3, [r7, #0]
 8011632:	4613      	mov	r3, r2
 8011634:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011636:	e02c      	b.n	8011692 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011638:	69bb      	ldr	r3, [r7, #24]
 801163a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801163e:	d028      	beq.n	8011692 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8011640:	69bb      	ldr	r3, [r7, #24]
 8011642:	2b00      	cmp	r3, #0
 8011644:	d007      	beq.n	8011656 <UART_WaitOnFlagUntilTimeout+0x30>
 8011646:	f7ff f82d 	bl	80106a4 <HAL_GetTick>
 801164a:	4602      	mov	r2, r0
 801164c:	683b      	ldr	r3, [r7, #0]
 801164e:	1ad3      	subs	r3, r2, r3
 8011650:	69ba      	ldr	r2, [r7, #24]
 8011652:	429a      	cmp	r2, r3
 8011654:	d21d      	bcs.n	8011692 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8011656:	68fb      	ldr	r3, [r7, #12]
 8011658:	681b      	ldr	r3, [r3, #0]
 801165a:	68da      	ldr	r2, [r3, #12]
 801165c:	68fb      	ldr	r3, [r7, #12]
 801165e:	681b      	ldr	r3, [r3, #0]
 8011660:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8011664:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011666:	68fb      	ldr	r3, [r7, #12]
 8011668:	681b      	ldr	r3, [r3, #0]
 801166a:	695a      	ldr	r2, [r3, #20]
 801166c:	68fb      	ldr	r3, [r7, #12]
 801166e:	681b      	ldr	r3, [r3, #0]
 8011670:	f022 0201 	bic.w	r2, r2, #1
 8011674:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8011676:	68fb      	ldr	r3, [r7, #12]
 8011678:	2220      	movs	r2, #32
 801167a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 801167e:	68fb      	ldr	r3, [r7, #12]
 8011680:	2220      	movs	r2, #32
 8011682:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8011686:	68fb      	ldr	r3, [r7, #12]
 8011688:	2200      	movs	r2, #0
 801168a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 801168e:	2303      	movs	r3, #3
 8011690:	e00f      	b.n	80116b2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011692:	68fb      	ldr	r3, [r7, #12]
 8011694:	681b      	ldr	r3, [r3, #0]
 8011696:	681a      	ldr	r2, [r3, #0]
 8011698:	68bb      	ldr	r3, [r7, #8]
 801169a:	4013      	ands	r3, r2
 801169c:	68ba      	ldr	r2, [r7, #8]
 801169e:	429a      	cmp	r2, r3
 80116a0:	bf0c      	ite	eq
 80116a2:	2301      	moveq	r3, #1
 80116a4:	2300      	movne	r3, #0
 80116a6:	b2db      	uxtb	r3, r3
 80116a8:	461a      	mov	r2, r3
 80116aa:	79fb      	ldrb	r3, [r7, #7]
 80116ac:	429a      	cmp	r2, r3
 80116ae:	d0c3      	beq.n	8011638 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80116b0:	2300      	movs	r3, #0
}
 80116b2:	4618      	mov	r0, r3
 80116b4:	3710      	adds	r7, #16
 80116b6:	46bd      	mov	sp, r7
 80116b8:	bd80      	pop	{r7, pc}
	...

080116bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80116bc:	b580      	push	{r7, lr}
 80116be:	b084      	sub	sp, #16
 80116c0:	af00      	add	r7, sp, #0
 80116c2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	681b      	ldr	r3, [r3, #0]
 80116c8:	691b      	ldr	r3, [r3, #16]
 80116ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	68da      	ldr	r2, [r3, #12]
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	681b      	ldr	r3, [r3, #0]
 80116d6:	430a      	orrs	r2, r1
 80116d8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	689a      	ldr	r2, [r3, #8]
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	691b      	ldr	r3, [r3, #16]
 80116e2:	431a      	orrs	r2, r3
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	695b      	ldr	r3, [r3, #20]
 80116e8:	4313      	orrs	r3, r2
 80116ea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	681b      	ldr	r3, [r3, #0]
 80116f0:	68db      	ldr	r3, [r3, #12]
 80116f2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80116f6:	f023 030c 	bic.w	r3, r3, #12
 80116fa:	687a      	ldr	r2, [r7, #4]
 80116fc:	6812      	ldr	r2, [r2, #0]
 80116fe:	68b9      	ldr	r1, [r7, #8]
 8011700:	430b      	orrs	r3, r1
 8011702:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	681b      	ldr	r3, [r3, #0]
 8011708:	695b      	ldr	r3, [r3, #20]
 801170a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	699a      	ldr	r2, [r3, #24]
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	681b      	ldr	r3, [r3, #0]
 8011716:	430a      	orrs	r2, r1
 8011718:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	681b      	ldr	r3, [r3, #0]
 801171e:	4a2c      	ldr	r2, [pc, #176]	; (80117d0 <UART_SetConfig+0x114>)
 8011720:	4293      	cmp	r3, r2
 8011722:	d103      	bne.n	801172c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8011724:	f7ff fe6e 	bl	8011404 <HAL_RCC_GetPCLK2Freq>
 8011728:	60f8      	str	r0, [r7, #12]
 801172a:	e002      	b.n	8011732 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 801172c:	f7ff fe56 	bl	80113dc <HAL_RCC_GetPCLK1Freq>
 8011730:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8011732:	68fa      	ldr	r2, [r7, #12]
 8011734:	4613      	mov	r3, r2
 8011736:	009b      	lsls	r3, r3, #2
 8011738:	4413      	add	r3, r2
 801173a:	009a      	lsls	r2, r3, #2
 801173c:	441a      	add	r2, r3
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	685b      	ldr	r3, [r3, #4]
 8011742:	009b      	lsls	r3, r3, #2
 8011744:	fbb2 f3f3 	udiv	r3, r2, r3
 8011748:	4a22      	ldr	r2, [pc, #136]	; (80117d4 <UART_SetConfig+0x118>)
 801174a:	fba2 2303 	umull	r2, r3, r2, r3
 801174e:	095b      	lsrs	r3, r3, #5
 8011750:	0119      	lsls	r1, r3, #4
 8011752:	68fa      	ldr	r2, [r7, #12]
 8011754:	4613      	mov	r3, r2
 8011756:	009b      	lsls	r3, r3, #2
 8011758:	4413      	add	r3, r2
 801175a:	009a      	lsls	r2, r3, #2
 801175c:	441a      	add	r2, r3
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	685b      	ldr	r3, [r3, #4]
 8011762:	009b      	lsls	r3, r3, #2
 8011764:	fbb2 f2f3 	udiv	r2, r2, r3
 8011768:	4b1a      	ldr	r3, [pc, #104]	; (80117d4 <UART_SetConfig+0x118>)
 801176a:	fba3 0302 	umull	r0, r3, r3, r2
 801176e:	095b      	lsrs	r3, r3, #5
 8011770:	2064      	movs	r0, #100	; 0x64
 8011772:	fb00 f303 	mul.w	r3, r0, r3
 8011776:	1ad3      	subs	r3, r2, r3
 8011778:	011b      	lsls	r3, r3, #4
 801177a:	3332      	adds	r3, #50	; 0x32
 801177c:	4a15      	ldr	r2, [pc, #84]	; (80117d4 <UART_SetConfig+0x118>)
 801177e:	fba2 2303 	umull	r2, r3, r2, r3
 8011782:	095b      	lsrs	r3, r3, #5
 8011784:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011788:	4419      	add	r1, r3
 801178a:	68fa      	ldr	r2, [r7, #12]
 801178c:	4613      	mov	r3, r2
 801178e:	009b      	lsls	r3, r3, #2
 8011790:	4413      	add	r3, r2
 8011792:	009a      	lsls	r2, r3, #2
 8011794:	441a      	add	r2, r3
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	685b      	ldr	r3, [r3, #4]
 801179a:	009b      	lsls	r3, r3, #2
 801179c:	fbb2 f2f3 	udiv	r2, r2, r3
 80117a0:	4b0c      	ldr	r3, [pc, #48]	; (80117d4 <UART_SetConfig+0x118>)
 80117a2:	fba3 0302 	umull	r0, r3, r3, r2
 80117a6:	095b      	lsrs	r3, r3, #5
 80117a8:	2064      	movs	r0, #100	; 0x64
 80117aa:	fb00 f303 	mul.w	r3, r0, r3
 80117ae:	1ad3      	subs	r3, r2, r3
 80117b0:	011b      	lsls	r3, r3, #4
 80117b2:	3332      	adds	r3, #50	; 0x32
 80117b4:	4a07      	ldr	r2, [pc, #28]	; (80117d4 <UART_SetConfig+0x118>)
 80117b6:	fba2 2303 	umull	r2, r3, r2, r3
 80117ba:	095b      	lsrs	r3, r3, #5
 80117bc:	f003 020f 	and.w	r2, r3, #15
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	681b      	ldr	r3, [r3, #0]
 80117c4:	440a      	add	r2, r1
 80117c6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80117c8:	bf00      	nop
 80117ca:	3710      	adds	r7, #16
 80117cc:	46bd      	mov	sp, r7
 80117ce:	bd80      	pop	{r7, pc}
 80117d0:	40013800 	.word	0x40013800
 80117d4:	51eb851f 	.word	0x51eb851f

080117d8 <__errno>:
 80117d8:	4b01      	ldr	r3, [pc, #4]	; (80117e0 <__errno+0x8>)
 80117da:	6818      	ldr	r0, [r3, #0]
 80117dc:	4770      	bx	lr
 80117de:	bf00      	nop
 80117e0:	2000000c 	.word	0x2000000c

080117e4 <__libc_init_array>:
 80117e4:	b570      	push	{r4, r5, r6, lr}
 80117e6:	2600      	movs	r6, #0
 80117e8:	4d0c      	ldr	r5, [pc, #48]	; (801181c <__libc_init_array+0x38>)
 80117ea:	4c0d      	ldr	r4, [pc, #52]	; (8011820 <__libc_init_array+0x3c>)
 80117ec:	1b64      	subs	r4, r4, r5
 80117ee:	10a4      	asrs	r4, r4, #2
 80117f0:	42a6      	cmp	r6, r4
 80117f2:	d109      	bne.n	8011808 <__libc_init_array+0x24>
 80117f4:	f000 ff82 	bl	80126fc <_init>
 80117f8:	2600      	movs	r6, #0
 80117fa:	4d0a      	ldr	r5, [pc, #40]	; (8011824 <__libc_init_array+0x40>)
 80117fc:	4c0a      	ldr	r4, [pc, #40]	; (8011828 <__libc_init_array+0x44>)
 80117fe:	1b64      	subs	r4, r4, r5
 8011800:	10a4      	asrs	r4, r4, #2
 8011802:	42a6      	cmp	r6, r4
 8011804:	d105      	bne.n	8011812 <__libc_init_array+0x2e>
 8011806:	bd70      	pop	{r4, r5, r6, pc}
 8011808:	f855 3b04 	ldr.w	r3, [r5], #4
 801180c:	4798      	blx	r3
 801180e:	3601      	adds	r6, #1
 8011810:	e7ee      	b.n	80117f0 <__libc_init_array+0xc>
 8011812:	f855 3b04 	ldr.w	r3, [r5], #4
 8011816:	4798      	blx	r3
 8011818:	3601      	adds	r6, #1
 801181a:	e7f2      	b.n	8011802 <__libc_init_array+0x1e>
 801181c:	080127ec 	.word	0x080127ec
 8011820:	080127ec 	.word	0x080127ec
 8011824:	080127ec 	.word	0x080127ec
 8011828:	080127f0 	.word	0x080127f0

0801182c <memset>:
 801182c:	4603      	mov	r3, r0
 801182e:	4402      	add	r2, r0
 8011830:	4293      	cmp	r3, r2
 8011832:	d100      	bne.n	8011836 <memset+0xa>
 8011834:	4770      	bx	lr
 8011836:	f803 1b01 	strb.w	r1, [r3], #1
 801183a:	e7f9      	b.n	8011830 <memset+0x4>

0801183c <iprintf>:
 801183c:	b40f      	push	{r0, r1, r2, r3}
 801183e:	4b0a      	ldr	r3, [pc, #40]	; (8011868 <iprintf+0x2c>)
 8011840:	b513      	push	{r0, r1, r4, lr}
 8011842:	681c      	ldr	r4, [r3, #0]
 8011844:	b124      	cbz	r4, 8011850 <iprintf+0x14>
 8011846:	69a3      	ldr	r3, [r4, #24]
 8011848:	b913      	cbnz	r3, 8011850 <iprintf+0x14>
 801184a:	4620      	mov	r0, r4
 801184c:	f000 f866 	bl	801191c <__sinit>
 8011850:	ab05      	add	r3, sp, #20
 8011852:	4620      	mov	r0, r4
 8011854:	9a04      	ldr	r2, [sp, #16]
 8011856:	68a1      	ldr	r1, [r4, #8]
 8011858:	9301      	str	r3, [sp, #4]
 801185a:	f000 f981 	bl	8011b60 <_vfiprintf_r>
 801185e:	b002      	add	sp, #8
 8011860:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011864:	b004      	add	sp, #16
 8011866:	4770      	bx	lr
 8011868:	2000000c 	.word	0x2000000c

0801186c <std>:
 801186c:	2300      	movs	r3, #0
 801186e:	b510      	push	{r4, lr}
 8011870:	4604      	mov	r4, r0
 8011872:	e9c0 3300 	strd	r3, r3, [r0]
 8011876:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801187a:	6083      	str	r3, [r0, #8]
 801187c:	8181      	strh	r1, [r0, #12]
 801187e:	6643      	str	r3, [r0, #100]	; 0x64
 8011880:	81c2      	strh	r2, [r0, #14]
 8011882:	6183      	str	r3, [r0, #24]
 8011884:	4619      	mov	r1, r3
 8011886:	2208      	movs	r2, #8
 8011888:	305c      	adds	r0, #92	; 0x5c
 801188a:	f7ff ffcf 	bl	801182c <memset>
 801188e:	4b05      	ldr	r3, [pc, #20]	; (80118a4 <std+0x38>)
 8011890:	6224      	str	r4, [r4, #32]
 8011892:	6263      	str	r3, [r4, #36]	; 0x24
 8011894:	4b04      	ldr	r3, [pc, #16]	; (80118a8 <std+0x3c>)
 8011896:	62a3      	str	r3, [r4, #40]	; 0x28
 8011898:	4b04      	ldr	r3, [pc, #16]	; (80118ac <std+0x40>)
 801189a:	62e3      	str	r3, [r4, #44]	; 0x2c
 801189c:	4b04      	ldr	r3, [pc, #16]	; (80118b0 <std+0x44>)
 801189e:	6323      	str	r3, [r4, #48]	; 0x30
 80118a0:	bd10      	pop	{r4, pc}
 80118a2:	bf00      	nop
 80118a4:	0801210d 	.word	0x0801210d
 80118a8:	0801212f 	.word	0x0801212f
 80118ac:	08012167 	.word	0x08012167
 80118b0:	0801218b 	.word	0x0801218b

080118b4 <_cleanup_r>:
 80118b4:	4901      	ldr	r1, [pc, #4]	; (80118bc <_cleanup_r+0x8>)
 80118b6:	f000 b8af 	b.w	8011a18 <_fwalk_reent>
 80118ba:	bf00      	nop
 80118bc:	08012465 	.word	0x08012465

080118c0 <__sfmoreglue>:
 80118c0:	b570      	push	{r4, r5, r6, lr}
 80118c2:	2568      	movs	r5, #104	; 0x68
 80118c4:	1e4a      	subs	r2, r1, #1
 80118c6:	4355      	muls	r5, r2
 80118c8:	460e      	mov	r6, r1
 80118ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80118ce:	f000 f8c5 	bl	8011a5c <_malloc_r>
 80118d2:	4604      	mov	r4, r0
 80118d4:	b140      	cbz	r0, 80118e8 <__sfmoreglue+0x28>
 80118d6:	2100      	movs	r1, #0
 80118d8:	e9c0 1600 	strd	r1, r6, [r0]
 80118dc:	300c      	adds	r0, #12
 80118de:	60a0      	str	r0, [r4, #8]
 80118e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80118e4:	f7ff ffa2 	bl	801182c <memset>
 80118e8:	4620      	mov	r0, r4
 80118ea:	bd70      	pop	{r4, r5, r6, pc}

080118ec <__sfp_lock_acquire>:
 80118ec:	4801      	ldr	r0, [pc, #4]	; (80118f4 <__sfp_lock_acquire+0x8>)
 80118ee:	f000 b8b3 	b.w	8011a58 <__retarget_lock_acquire_recursive>
 80118f2:	bf00      	nop
 80118f4:	200000e8 	.word	0x200000e8

080118f8 <__sfp_lock_release>:
 80118f8:	4801      	ldr	r0, [pc, #4]	; (8011900 <__sfp_lock_release+0x8>)
 80118fa:	f000 b8ae 	b.w	8011a5a <__retarget_lock_release_recursive>
 80118fe:	bf00      	nop
 8011900:	200000e8 	.word	0x200000e8

08011904 <__sinit_lock_acquire>:
 8011904:	4801      	ldr	r0, [pc, #4]	; (801190c <__sinit_lock_acquire+0x8>)
 8011906:	f000 b8a7 	b.w	8011a58 <__retarget_lock_acquire_recursive>
 801190a:	bf00      	nop
 801190c:	200000e3 	.word	0x200000e3

08011910 <__sinit_lock_release>:
 8011910:	4801      	ldr	r0, [pc, #4]	; (8011918 <__sinit_lock_release+0x8>)
 8011912:	f000 b8a2 	b.w	8011a5a <__retarget_lock_release_recursive>
 8011916:	bf00      	nop
 8011918:	200000e3 	.word	0x200000e3

0801191c <__sinit>:
 801191c:	b510      	push	{r4, lr}
 801191e:	4604      	mov	r4, r0
 8011920:	f7ff fff0 	bl	8011904 <__sinit_lock_acquire>
 8011924:	69a3      	ldr	r3, [r4, #24]
 8011926:	b11b      	cbz	r3, 8011930 <__sinit+0x14>
 8011928:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801192c:	f7ff bff0 	b.w	8011910 <__sinit_lock_release>
 8011930:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011934:	6523      	str	r3, [r4, #80]	; 0x50
 8011936:	4b13      	ldr	r3, [pc, #76]	; (8011984 <__sinit+0x68>)
 8011938:	4a13      	ldr	r2, [pc, #76]	; (8011988 <__sinit+0x6c>)
 801193a:	681b      	ldr	r3, [r3, #0]
 801193c:	62a2      	str	r2, [r4, #40]	; 0x28
 801193e:	42a3      	cmp	r3, r4
 8011940:	bf08      	it	eq
 8011942:	2301      	moveq	r3, #1
 8011944:	4620      	mov	r0, r4
 8011946:	bf08      	it	eq
 8011948:	61a3      	streq	r3, [r4, #24]
 801194a:	f000 f81f 	bl	801198c <__sfp>
 801194e:	6060      	str	r0, [r4, #4]
 8011950:	4620      	mov	r0, r4
 8011952:	f000 f81b 	bl	801198c <__sfp>
 8011956:	60a0      	str	r0, [r4, #8]
 8011958:	4620      	mov	r0, r4
 801195a:	f000 f817 	bl	801198c <__sfp>
 801195e:	2200      	movs	r2, #0
 8011960:	2104      	movs	r1, #4
 8011962:	60e0      	str	r0, [r4, #12]
 8011964:	6860      	ldr	r0, [r4, #4]
 8011966:	f7ff ff81 	bl	801186c <std>
 801196a:	2201      	movs	r2, #1
 801196c:	2109      	movs	r1, #9
 801196e:	68a0      	ldr	r0, [r4, #8]
 8011970:	f7ff ff7c 	bl	801186c <std>
 8011974:	2202      	movs	r2, #2
 8011976:	2112      	movs	r1, #18
 8011978:	68e0      	ldr	r0, [r4, #12]
 801197a:	f7ff ff77 	bl	801186c <std>
 801197e:	2301      	movs	r3, #1
 8011980:	61a3      	str	r3, [r4, #24]
 8011982:	e7d1      	b.n	8011928 <__sinit+0xc>
 8011984:	08012754 	.word	0x08012754
 8011988:	080118b5 	.word	0x080118b5

0801198c <__sfp>:
 801198c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801198e:	4607      	mov	r7, r0
 8011990:	f7ff ffac 	bl	80118ec <__sfp_lock_acquire>
 8011994:	4b1e      	ldr	r3, [pc, #120]	; (8011a10 <__sfp+0x84>)
 8011996:	681e      	ldr	r6, [r3, #0]
 8011998:	69b3      	ldr	r3, [r6, #24]
 801199a:	b913      	cbnz	r3, 80119a2 <__sfp+0x16>
 801199c:	4630      	mov	r0, r6
 801199e:	f7ff ffbd 	bl	801191c <__sinit>
 80119a2:	3648      	adds	r6, #72	; 0x48
 80119a4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80119a8:	3b01      	subs	r3, #1
 80119aa:	d503      	bpl.n	80119b4 <__sfp+0x28>
 80119ac:	6833      	ldr	r3, [r6, #0]
 80119ae:	b30b      	cbz	r3, 80119f4 <__sfp+0x68>
 80119b0:	6836      	ldr	r6, [r6, #0]
 80119b2:	e7f7      	b.n	80119a4 <__sfp+0x18>
 80119b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80119b8:	b9d5      	cbnz	r5, 80119f0 <__sfp+0x64>
 80119ba:	4b16      	ldr	r3, [pc, #88]	; (8011a14 <__sfp+0x88>)
 80119bc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80119c0:	60e3      	str	r3, [r4, #12]
 80119c2:	6665      	str	r5, [r4, #100]	; 0x64
 80119c4:	f000 f847 	bl	8011a56 <__retarget_lock_init_recursive>
 80119c8:	f7ff ff96 	bl	80118f8 <__sfp_lock_release>
 80119cc:	2208      	movs	r2, #8
 80119ce:	4629      	mov	r1, r5
 80119d0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80119d4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80119d8:	6025      	str	r5, [r4, #0]
 80119da:	61a5      	str	r5, [r4, #24]
 80119dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80119e0:	f7ff ff24 	bl	801182c <memset>
 80119e4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80119e8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80119ec:	4620      	mov	r0, r4
 80119ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80119f0:	3468      	adds	r4, #104	; 0x68
 80119f2:	e7d9      	b.n	80119a8 <__sfp+0x1c>
 80119f4:	2104      	movs	r1, #4
 80119f6:	4638      	mov	r0, r7
 80119f8:	f7ff ff62 	bl	80118c0 <__sfmoreglue>
 80119fc:	4604      	mov	r4, r0
 80119fe:	6030      	str	r0, [r6, #0]
 8011a00:	2800      	cmp	r0, #0
 8011a02:	d1d5      	bne.n	80119b0 <__sfp+0x24>
 8011a04:	f7ff ff78 	bl	80118f8 <__sfp_lock_release>
 8011a08:	230c      	movs	r3, #12
 8011a0a:	603b      	str	r3, [r7, #0]
 8011a0c:	e7ee      	b.n	80119ec <__sfp+0x60>
 8011a0e:	bf00      	nop
 8011a10:	08012754 	.word	0x08012754
 8011a14:	ffff0001 	.word	0xffff0001

08011a18 <_fwalk_reent>:
 8011a18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011a1c:	4606      	mov	r6, r0
 8011a1e:	4688      	mov	r8, r1
 8011a20:	2700      	movs	r7, #0
 8011a22:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011a26:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011a2a:	f1b9 0901 	subs.w	r9, r9, #1
 8011a2e:	d505      	bpl.n	8011a3c <_fwalk_reent+0x24>
 8011a30:	6824      	ldr	r4, [r4, #0]
 8011a32:	2c00      	cmp	r4, #0
 8011a34:	d1f7      	bne.n	8011a26 <_fwalk_reent+0xe>
 8011a36:	4638      	mov	r0, r7
 8011a38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011a3c:	89ab      	ldrh	r3, [r5, #12]
 8011a3e:	2b01      	cmp	r3, #1
 8011a40:	d907      	bls.n	8011a52 <_fwalk_reent+0x3a>
 8011a42:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011a46:	3301      	adds	r3, #1
 8011a48:	d003      	beq.n	8011a52 <_fwalk_reent+0x3a>
 8011a4a:	4629      	mov	r1, r5
 8011a4c:	4630      	mov	r0, r6
 8011a4e:	47c0      	blx	r8
 8011a50:	4307      	orrs	r7, r0
 8011a52:	3568      	adds	r5, #104	; 0x68
 8011a54:	e7e9      	b.n	8011a2a <_fwalk_reent+0x12>

08011a56 <__retarget_lock_init_recursive>:
 8011a56:	4770      	bx	lr

08011a58 <__retarget_lock_acquire_recursive>:
 8011a58:	4770      	bx	lr

08011a5a <__retarget_lock_release_recursive>:
 8011a5a:	4770      	bx	lr

08011a5c <_malloc_r>:
 8011a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a5e:	1ccd      	adds	r5, r1, #3
 8011a60:	f025 0503 	bic.w	r5, r5, #3
 8011a64:	3508      	adds	r5, #8
 8011a66:	2d0c      	cmp	r5, #12
 8011a68:	bf38      	it	cc
 8011a6a:	250c      	movcc	r5, #12
 8011a6c:	2d00      	cmp	r5, #0
 8011a6e:	4606      	mov	r6, r0
 8011a70:	db01      	blt.n	8011a76 <_malloc_r+0x1a>
 8011a72:	42a9      	cmp	r1, r5
 8011a74:	d903      	bls.n	8011a7e <_malloc_r+0x22>
 8011a76:	230c      	movs	r3, #12
 8011a78:	6033      	str	r3, [r6, #0]
 8011a7a:	2000      	movs	r0, #0
 8011a7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011a7e:	f000 fdb1 	bl	80125e4 <__malloc_lock>
 8011a82:	4921      	ldr	r1, [pc, #132]	; (8011b08 <_malloc_r+0xac>)
 8011a84:	680a      	ldr	r2, [r1, #0]
 8011a86:	4614      	mov	r4, r2
 8011a88:	b99c      	cbnz	r4, 8011ab2 <_malloc_r+0x56>
 8011a8a:	4f20      	ldr	r7, [pc, #128]	; (8011b0c <_malloc_r+0xb0>)
 8011a8c:	683b      	ldr	r3, [r7, #0]
 8011a8e:	b923      	cbnz	r3, 8011a9a <_malloc_r+0x3e>
 8011a90:	4621      	mov	r1, r4
 8011a92:	4630      	mov	r0, r6
 8011a94:	f000 fb2a 	bl	80120ec <_sbrk_r>
 8011a98:	6038      	str	r0, [r7, #0]
 8011a9a:	4629      	mov	r1, r5
 8011a9c:	4630      	mov	r0, r6
 8011a9e:	f000 fb25 	bl	80120ec <_sbrk_r>
 8011aa2:	1c43      	adds	r3, r0, #1
 8011aa4:	d123      	bne.n	8011aee <_malloc_r+0x92>
 8011aa6:	230c      	movs	r3, #12
 8011aa8:	4630      	mov	r0, r6
 8011aaa:	6033      	str	r3, [r6, #0]
 8011aac:	f000 fda0 	bl	80125f0 <__malloc_unlock>
 8011ab0:	e7e3      	b.n	8011a7a <_malloc_r+0x1e>
 8011ab2:	6823      	ldr	r3, [r4, #0]
 8011ab4:	1b5b      	subs	r3, r3, r5
 8011ab6:	d417      	bmi.n	8011ae8 <_malloc_r+0x8c>
 8011ab8:	2b0b      	cmp	r3, #11
 8011aba:	d903      	bls.n	8011ac4 <_malloc_r+0x68>
 8011abc:	6023      	str	r3, [r4, #0]
 8011abe:	441c      	add	r4, r3
 8011ac0:	6025      	str	r5, [r4, #0]
 8011ac2:	e004      	b.n	8011ace <_malloc_r+0x72>
 8011ac4:	6863      	ldr	r3, [r4, #4]
 8011ac6:	42a2      	cmp	r2, r4
 8011ac8:	bf0c      	ite	eq
 8011aca:	600b      	streq	r3, [r1, #0]
 8011acc:	6053      	strne	r3, [r2, #4]
 8011ace:	4630      	mov	r0, r6
 8011ad0:	f000 fd8e 	bl	80125f0 <__malloc_unlock>
 8011ad4:	f104 000b 	add.w	r0, r4, #11
 8011ad8:	1d23      	adds	r3, r4, #4
 8011ada:	f020 0007 	bic.w	r0, r0, #7
 8011ade:	1ac2      	subs	r2, r0, r3
 8011ae0:	d0cc      	beq.n	8011a7c <_malloc_r+0x20>
 8011ae2:	1a1b      	subs	r3, r3, r0
 8011ae4:	50a3      	str	r3, [r4, r2]
 8011ae6:	e7c9      	b.n	8011a7c <_malloc_r+0x20>
 8011ae8:	4622      	mov	r2, r4
 8011aea:	6864      	ldr	r4, [r4, #4]
 8011aec:	e7cc      	b.n	8011a88 <_malloc_r+0x2c>
 8011aee:	1cc4      	adds	r4, r0, #3
 8011af0:	f024 0403 	bic.w	r4, r4, #3
 8011af4:	42a0      	cmp	r0, r4
 8011af6:	d0e3      	beq.n	8011ac0 <_malloc_r+0x64>
 8011af8:	1a21      	subs	r1, r4, r0
 8011afa:	4630      	mov	r0, r6
 8011afc:	f000 faf6 	bl	80120ec <_sbrk_r>
 8011b00:	3001      	adds	r0, #1
 8011b02:	d1dd      	bne.n	8011ac0 <_malloc_r+0x64>
 8011b04:	e7cf      	b.n	8011aa6 <_malloc_r+0x4a>
 8011b06:	bf00      	nop
 8011b08:	20000090 	.word	0x20000090
 8011b0c:	20000094 	.word	0x20000094

08011b10 <__sfputc_r>:
 8011b10:	6893      	ldr	r3, [r2, #8]
 8011b12:	b410      	push	{r4}
 8011b14:	3b01      	subs	r3, #1
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	6093      	str	r3, [r2, #8]
 8011b1a:	da07      	bge.n	8011b2c <__sfputc_r+0x1c>
 8011b1c:	6994      	ldr	r4, [r2, #24]
 8011b1e:	42a3      	cmp	r3, r4
 8011b20:	db01      	blt.n	8011b26 <__sfputc_r+0x16>
 8011b22:	290a      	cmp	r1, #10
 8011b24:	d102      	bne.n	8011b2c <__sfputc_r+0x1c>
 8011b26:	bc10      	pop	{r4}
 8011b28:	f000 bb34 	b.w	8012194 <__swbuf_r>
 8011b2c:	6813      	ldr	r3, [r2, #0]
 8011b2e:	1c58      	adds	r0, r3, #1
 8011b30:	6010      	str	r0, [r2, #0]
 8011b32:	7019      	strb	r1, [r3, #0]
 8011b34:	4608      	mov	r0, r1
 8011b36:	bc10      	pop	{r4}
 8011b38:	4770      	bx	lr

08011b3a <__sfputs_r>:
 8011b3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b3c:	4606      	mov	r6, r0
 8011b3e:	460f      	mov	r7, r1
 8011b40:	4614      	mov	r4, r2
 8011b42:	18d5      	adds	r5, r2, r3
 8011b44:	42ac      	cmp	r4, r5
 8011b46:	d101      	bne.n	8011b4c <__sfputs_r+0x12>
 8011b48:	2000      	movs	r0, #0
 8011b4a:	e007      	b.n	8011b5c <__sfputs_r+0x22>
 8011b4c:	463a      	mov	r2, r7
 8011b4e:	4630      	mov	r0, r6
 8011b50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011b54:	f7ff ffdc 	bl	8011b10 <__sfputc_r>
 8011b58:	1c43      	adds	r3, r0, #1
 8011b5a:	d1f3      	bne.n	8011b44 <__sfputs_r+0xa>
 8011b5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011b60 <_vfiprintf_r>:
 8011b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b64:	460d      	mov	r5, r1
 8011b66:	4614      	mov	r4, r2
 8011b68:	4698      	mov	r8, r3
 8011b6a:	4606      	mov	r6, r0
 8011b6c:	b09d      	sub	sp, #116	; 0x74
 8011b6e:	b118      	cbz	r0, 8011b78 <_vfiprintf_r+0x18>
 8011b70:	6983      	ldr	r3, [r0, #24]
 8011b72:	b90b      	cbnz	r3, 8011b78 <_vfiprintf_r+0x18>
 8011b74:	f7ff fed2 	bl	801191c <__sinit>
 8011b78:	4b89      	ldr	r3, [pc, #548]	; (8011da0 <_vfiprintf_r+0x240>)
 8011b7a:	429d      	cmp	r5, r3
 8011b7c:	d11b      	bne.n	8011bb6 <_vfiprintf_r+0x56>
 8011b7e:	6875      	ldr	r5, [r6, #4]
 8011b80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011b82:	07d9      	lsls	r1, r3, #31
 8011b84:	d405      	bmi.n	8011b92 <_vfiprintf_r+0x32>
 8011b86:	89ab      	ldrh	r3, [r5, #12]
 8011b88:	059a      	lsls	r2, r3, #22
 8011b8a:	d402      	bmi.n	8011b92 <_vfiprintf_r+0x32>
 8011b8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011b8e:	f7ff ff63 	bl	8011a58 <__retarget_lock_acquire_recursive>
 8011b92:	89ab      	ldrh	r3, [r5, #12]
 8011b94:	071b      	lsls	r3, r3, #28
 8011b96:	d501      	bpl.n	8011b9c <_vfiprintf_r+0x3c>
 8011b98:	692b      	ldr	r3, [r5, #16]
 8011b9a:	b9eb      	cbnz	r3, 8011bd8 <_vfiprintf_r+0x78>
 8011b9c:	4629      	mov	r1, r5
 8011b9e:	4630      	mov	r0, r6
 8011ba0:	f000 fb5c 	bl	801225c <__swsetup_r>
 8011ba4:	b1c0      	cbz	r0, 8011bd8 <_vfiprintf_r+0x78>
 8011ba6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011ba8:	07dc      	lsls	r4, r3, #31
 8011baa:	d50e      	bpl.n	8011bca <_vfiprintf_r+0x6a>
 8011bac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011bb0:	b01d      	add	sp, #116	; 0x74
 8011bb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011bb6:	4b7b      	ldr	r3, [pc, #492]	; (8011da4 <_vfiprintf_r+0x244>)
 8011bb8:	429d      	cmp	r5, r3
 8011bba:	d101      	bne.n	8011bc0 <_vfiprintf_r+0x60>
 8011bbc:	68b5      	ldr	r5, [r6, #8]
 8011bbe:	e7df      	b.n	8011b80 <_vfiprintf_r+0x20>
 8011bc0:	4b79      	ldr	r3, [pc, #484]	; (8011da8 <_vfiprintf_r+0x248>)
 8011bc2:	429d      	cmp	r5, r3
 8011bc4:	bf08      	it	eq
 8011bc6:	68f5      	ldreq	r5, [r6, #12]
 8011bc8:	e7da      	b.n	8011b80 <_vfiprintf_r+0x20>
 8011bca:	89ab      	ldrh	r3, [r5, #12]
 8011bcc:	0598      	lsls	r0, r3, #22
 8011bce:	d4ed      	bmi.n	8011bac <_vfiprintf_r+0x4c>
 8011bd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011bd2:	f7ff ff42 	bl	8011a5a <__retarget_lock_release_recursive>
 8011bd6:	e7e9      	b.n	8011bac <_vfiprintf_r+0x4c>
 8011bd8:	2300      	movs	r3, #0
 8011bda:	9309      	str	r3, [sp, #36]	; 0x24
 8011bdc:	2320      	movs	r3, #32
 8011bde:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011be2:	2330      	movs	r3, #48	; 0x30
 8011be4:	f04f 0901 	mov.w	r9, #1
 8011be8:	f8cd 800c 	str.w	r8, [sp, #12]
 8011bec:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8011dac <_vfiprintf_r+0x24c>
 8011bf0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011bf4:	4623      	mov	r3, r4
 8011bf6:	469a      	mov	sl, r3
 8011bf8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011bfc:	b10a      	cbz	r2, 8011c02 <_vfiprintf_r+0xa2>
 8011bfe:	2a25      	cmp	r2, #37	; 0x25
 8011c00:	d1f9      	bne.n	8011bf6 <_vfiprintf_r+0x96>
 8011c02:	ebba 0b04 	subs.w	fp, sl, r4
 8011c06:	d00b      	beq.n	8011c20 <_vfiprintf_r+0xc0>
 8011c08:	465b      	mov	r3, fp
 8011c0a:	4622      	mov	r2, r4
 8011c0c:	4629      	mov	r1, r5
 8011c0e:	4630      	mov	r0, r6
 8011c10:	f7ff ff93 	bl	8011b3a <__sfputs_r>
 8011c14:	3001      	adds	r0, #1
 8011c16:	f000 80aa 	beq.w	8011d6e <_vfiprintf_r+0x20e>
 8011c1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011c1c:	445a      	add	r2, fp
 8011c1e:	9209      	str	r2, [sp, #36]	; 0x24
 8011c20:	f89a 3000 	ldrb.w	r3, [sl]
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	f000 80a2 	beq.w	8011d6e <_vfiprintf_r+0x20e>
 8011c2a:	2300      	movs	r3, #0
 8011c2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011c30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011c34:	f10a 0a01 	add.w	sl, sl, #1
 8011c38:	9304      	str	r3, [sp, #16]
 8011c3a:	9307      	str	r3, [sp, #28]
 8011c3c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011c40:	931a      	str	r3, [sp, #104]	; 0x68
 8011c42:	4654      	mov	r4, sl
 8011c44:	2205      	movs	r2, #5
 8011c46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011c4a:	4858      	ldr	r0, [pc, #352]	; (8011dac <_vfiprintf_r+0x24c>)
 8011c4c:	f000 fcbc 	bl	80125c8 <memchr>
 8011c50:	9a04      	ldr	r2, [sp, #16]
 8011c52:	b9d8      	cbnz	r0, 8011c8c <_vfiprintf_r+0x12c>
 8011c54:	06d1      	lsls	r1, r2, #27
 8011c56:	bf44      	itt	mi
 8011c58:	2320      	movmi	r3, #32
 8011c5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011c5e:	0713      	lsls	r3, r2, #28
 8011c60:	bf44      	itt	mi
 8011c62:	232b      	movmi	r3, #43	; 0x2b
 8011c64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011c68:	f89a 3000 	ldrb.w	r3, [sl]
 8011c6c:	2b2a      	cmp	r3, #42	; 0x2a
 8011c6e:	d015      	beq.n	8011c9c <_vfiprintf_r+0x13c>
 8011c70:	4654      	mov	r4, sl
 8011c72:	2000      	movs	r0, #0
 8011c74:	f04f 0c0a 	mov.w	ip, #10
 8011c78:	9a07      	ldr	r2, [sp, #28]
 8011c7a:	4621      	mov	r1, r4
 8011c7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011c80:	3b30      	subs	r3, #48	; 0x30
 8011c82:	2b09      	cmp	r3, #9
 8011c84:	d94e      	bls.n	8011d24 <_vfiprintf_r+0x1c4>
 8011c86:	b1b0      	cbz	r0, 8011cb6 <_vfiprintf_r+0x156>
 8011c88:	9207      	str	r2, [sp, #28]
 8011c8a:	e014      	b.n	8011cb6 <_vfiprintf_r+0x156>
 8011c8c:	eba0 0308 	sub.w	r3, r0, r8
 8011c90:	fa09 f303 	lsl.w	r3, r9, r3
 8011c94:	4313      	orrs	r3, r2
 8011c96:	46a2      	mov	sl, r4
 8011c98:	9304      	str	r3, [sp, #16]
 8011c9a:	e7d2      	b.n	8011c42 <_vfiprintf_r+0xe2>
 8011c9c:	9b03      	ldr	r3, [sp, #12]
 8011c9e:	1d19      	adds	r1, r3, #4
 8011ca0:	681b      	ldr	r3, [r3, #0]
 8011ca2:	9103      	str	r1, [sp, #12]
 8011ca4:	2b00      	cmp	r3, #0
 8011ca6:	bfbb      	ittet	lt
 8011ca8:	425b      	neglt	r3, r3
 8011caa:	f042 0202 	orrlt.w	r2, r2, #2
 8011cae:	9307      	strge	r3, [sp, #28]
 8011cb0:	9307      	strlt	r3, [sp, #28]
 8011cb2:	bfb8      	it	lt
 8011cb4:	9204      	strlt	r2, [sp, #16]
 8011cb6:	7823      	ldrb	r3, [r4, #0]
 8011cb8:	2b2e      	cmp	r3, #46	; 0x2e
 8011cba:	d10c      	bne.n	8011cd6 <_vfiprintf_r+0x176>
 8011cbc:	7863      	ldrb	r3, [r4, #1]
 8011cbe:	2b2a      	cmp	r3, #42	; 0x2a
 8011cc0:	d135      	bne.n	8011d2e <_vfiprintf_r+0x1ce>
 8011cc2:	9b03      	ldr	r3, [sp, #12]
 8011cc4:	3402      	adds	r4, #2
 8011cc6:	1d1a      	adds	r2, r3, #4
 8011cc8:	681b      	ldr	r3, [r3, #0]
 8011cca:	9203      	str	r2, [sp, #12]
 8011ccc:	2b00      	cmp	r3, #0
 8011cce:	bfb8      	it	lt
 8011cd0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8011cd4:	9305      	str	r3, [sp, #20]
 8011cd6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011dbc <_vfiprintf_r+0x25c>
 8011cda:	2203      	movs	r2, #3
 8011cdc:	4650      	mov	r0, sl
 8011cde:	7821      	ldrb	r1, [r4, #0]
 8011ce0:	f000 fc72 	bl	80125c8 <memchr>
 8011ce4:	b140      	cbz	r0, 8011cf8 <_vfiprintf_r+0x198>
 8011ce6:	2340      	movs	r3, #64	; 0x40
 8011ce8:	eba0 000a 	sub.w	r0, r0, sl
 8011cec:	fa03 f000 	lsl.w	r0, r3, r0
 8011cf0:	9b04      	ldr	r3, [sp, #16]
 8011cf2:	3401      	adds	r4, #1
 8011cf4:	4303      	orrs	r3, r0
 8011cf6:	9304      	str	r3, [sp, #16]
 8011cf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011cfc:	2206      	movs	r2, #6
 8011cfe:	482c      	ldr	r0, [pc, #176]	; (8011db0 <_vfiprintf_r+0x250>)
 8011d00:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011d04:	f000 fc60 	bl	80125c8 <memchr>
 8011d08:	2800      	cmp	r0, #0
 8011d0a:	d03f      	beq.n	8011d8c <_vfiprintf_r+0x22c>
 8011d0c:	4b29      	ldr	r3, [pc, #164]	; (8011db4 <_vfiprintf_r+0x254>)
 8011d0e:	bb1b      	cbnz	r3, 8011d58 <_vfiprintf_r+0x1f8>
 8011d10:	9b03      	ldr	r3, [sp, #12]
 8011d12:	3307      	adds	r3, #7
 8011d14:	f023 0307 	bic.w	r3, r3, #7
 8011d18:	3308      	adds	r3, #8
 8011d1a:	9303      	str	r3, [sp, #12]
 8011d1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011d1e:	443b      	add	r3, r7
 8011d20:	9309      	str	r3, [sp, #36]	; 0x24
 8011d22:	e767      	b.n	8011bf4 <_vfiprintf_r+0x94>
 8011d24:	460c      	mov	r4, r1
 8011d26:	2001      	movs	r0, #1
 8011d28:	fb0c 3202 	mla	r2, ip, r2, r3
 8011d2c:	e7a5      	b.n	8011c7a <_vfiprintf_r+0x11a>
 8011d2e:	2300      	movs	r3, #0
 8011d30:	f04f 0c0a 	mov.w	ip, #10
 8011d34:	4619      	mov	r1, r3
 8011d36:	3401      	adds	r4, #1
 8011d38:	9305      	str	r3, [sp, #20]
 8011d3a:	4620      	mov	r0, r4
 8011d3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011d40:	3a30      	subs	r2, #48	; 0x30
 8011d42:	2a09      	cmp	r2, #9
 8011d44:	d903      	bls.n	8011d4e <_vfiprintf_r+0x1ee>
 8011d46:	2b00      	cmp	r3, #0
 8011d48:	d0c5      	beq.n	8011cd6 <_vfiprintf_r+0x176>
 8011d4a:	9105      	str	r1, [sp, #20]
 8011d4c:	e7c3      	b.n	8011cd6 <_vfiprintf_r+0x176>
 8011d4e:	4604      	mov	r4, r0
 8011d50:	2301      	movs	r3, #1
 8011d52:	fb0c 2101 	mla	r1, ip, r1, r2
 8011d56:	e7f0      	b.n	8011d3a <_vfiprintf_r+0x1da>
 8011d58:	ab03      	add	r3, sp, #12
 8011d5a:	9300      	str	r3, [sp, #0]
 8011d5c:	462a      	mov	r2, r5
 8011d5e:	4630      	mov	r0, r6
 8011d60:	4b15      	ldr	r3, [pc, #84]	; (8011db8 <_vfiprintf_r+0x258>)
 8011d62:	a904      	add	r1, sp, #16
 8011d64:	f3af 8000 	nop.w
 8011d68:	4607      	mov	r7, r0
 8011d6a:	1c78      	adds	r0, r7, #1
 8011d6c:	d1d6      	bne.n	8011d1c <_vfiprintf_r+0x1bc>
 8011d6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011d70:	07d9      	lsls	r1, r3, #31
 8011d72:	d405      	bmi.n	8011d80 <_vfiprintf_r+0x220>
 8011d74:	89ab      	ldrh	r3, [r5, #12]
 8011d76:	059a      	lsls	r2, r3, #22
 8011d78:	d402      	bmi.n	8011d80 <_vfiprintf_r+0x220>
 8011d7a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011d7c:	f7ff fe6d 	bl	8011a5a <__retarget_lock_release_recursive>
 8011d80:	89ab      	ldrh	r3, [r5, #12]
 8011d82:	065b      	lsls	r3, r3, #25
 8011d84:	f53f af12 	bmi.w	8011bac <_vfiprintf_r+0x4c>
 8011d88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011d8a:	e711      	b.n	8011bb0 <_vfiprintf_r+0x50>
 8011d8c:	ab03      	add	r3, sp, #12
 8011d8e:	9300      	str	r3, [sp, #0]
 8011d90:	462a      	mov	r2, r5
 8011d92:	4630      	mov	r0, r6
 8011d94:	4b08      	ldr	r3, [pc, #32]	; (8011db8 <_vfiprintf_r+0x258>)
 8011d96:	a904      	add	r1, sp, #16
 8011d98:	f000 f882 	bl	8011ea0 <_printf_i>
 8011d9c:	e7e4      	b.n	8011d68 <_vfiprintf_r+0x208>
 8011d9e:	bf00      	nop
 8011da0:	08012778 	.word	0x08012778
 8011da4:	08012798 	.word	0x08012798
 8011da8:	08012758 	.word	0x08012758
 8011dac:	080127b8 	.word	0x080127b8
 8011db0:	080127c2 	.word	0x080127c2
 8011db4:	00000000 	.word	0x00000000
 8011db8:	08011b3b 	.word	0x08011b3b
 8011dbc:	080127be 	.word	0x080127be

08011dc0 <_printf_common>:
 8011dc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011dc4:	4616      	mov	r6, r2
 8011dc6:	4699      	mov	r9, r3
 8011dc8:	688a      	ldr	r2, [r1, #8]
 8011dca:	690b      	ldr	r3, [r1, #16]
 8011dcc:	4607      	mov	r7, r0
 8011dce:	4293      	cmp	r3, r2
 8011dd0:	bfb8      	it	lt
 8011dd2:	4613      	movlt	r3, r2
 8011dd4:	6033      	str	r3, [r6, #0]
 8011dd6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011dda:	460c      	mov	r4, r1
 8011ddc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011de0:	b10a      	cbz	r2, 8011de6 <_printf_common+0x26>
 8011de2:	3301      	adds	r3, #1
 8011de4:	6033      	str	r3, [r6, #0]
 8011de6:	6823      	ldr	r3, [r4, #0]
 8011de8:	0699      	lsls	r1, r3, #26
 8011dea:	bf42      	ittt	mi
 8011dec:	6833      	ldrmi	r3, [r6, #0]
 8011dee:	3302      	addmi	r3, #2
 8011df0:	6033      	strmi	r3, [r6, #0]
 8011df2:	6825      	ldr	r5, [r4, #0]
 8011df4:	f015 0506 	ands.w	r5, r5, #6
 8011df8:	d106      	bne.n	8011e08 <_printf_common+0x48>
 8011dfa:	f104 0a19 	add.w	sl, r4, #25
 8011dfe:	68e3      	ldr	r3, [r4, #12]
 8011e00:	6832      	ldr	r2, [r6, #0]
 8011e02:	1a9b      	subs	r3, r3, r2
 8011e04:	42ab      	cmp	r3, r5
 8011e06:	dc28      	bgt.n	8011e5a <_printf_common+0x9a>
 8011e08:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011e0c:	1e13      	subs	r3, r2, #0
 8011e0e:	6822      	ldr	r2, [r4, #0]
 8011e10:	bf18      	it	ne
 8011e12:	2301      	movne	r3, #1
 8011e14:	0692      	lsls	r2, r2, #26
 8011e16:	d42d      	bmi.n	8011e74 <_printf_common+0xb4>
 8011e18:	4649      	mov	r1, r9
 8011e1a:	4638      	mov	r0, r7
 8011e1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011e20:	47c0      	blx	r8
 8011e22:	3001      	adds	r0, #1
 8011e24:	d020      	beq.n	8011e68 <_printf_common+0xa8>
 8011e26:	6823      	ldr	r3, [r4, #0]
 8011e28:	68e5      	ldr	r5, [r4, #12]
 8011e2a:	f003 0306 	and.w	r3, r3, #6
 8011e2e:	2b04      	cmp	r3, #4
 8011e30:	bf18      	it	ne
 8011e32:	2500      	movne	r5, #0
 8011e34:	6832      	ldr	r2, [r6, #0]
 8011e36:	f04f 0600 	mov.w	r6, #0
 8011e3a:	68a3      	ldr	r3, [r4, #8]
 8011e3c:	bf08      	it	eq
 8011e3e:	1aad      	subeq	r5, r5, r2
 8011e40:	6922      	ldr	r2, [r4, #16]
 8011e42:	bf08      	it	eq
 8011e44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011e48:	4293      	cmp	r3, r2
 8011e4a:	bfc4      	itt	gt
 8011e4c:	1a9b      	subgt	r3, r3, r2
 8011e4e:	18ed      	addgt	r5, r5, r3
 8011e50:	341a      	adds	r4, #26
 8011e52:	42b5      	cmp	r5, r6
 8011e54:	d11a      	bne.n	8011e8c <_printf_common+0xcc>
 8011e56:	2000      	movs	r0, #0
 8011e58:	e008      	b.n	8011e6c <_printf_common+0xac>
 8011e5a:	2301      	movs	r3, #1
 8011e5c:	4652      	mov	r2, sl
 8011e5e:	4649      	mov	r1, r9
 8011e60:	4638      	mov	r0, r7
 8011e62:	47c0      	blx	r8
 8011e64:	3001      	adds	r0, #1
 8011e66:	d103      	bne.n	8011e70 <_printf_common+0xb0>
 8011e68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011e6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e70:	3501      	adds	r5, #1
 8011e72:	e7c4      	b.n	8011dfe <_printf_common+0x3e>
 8011e74:	2030      	movs	r0, #48	; 0x30
 8011e76:	18e1      	adds	r1, r4, r3
 8011e78:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011e7c:	1c5a      	adds	r2, r3, #1
 8011e7e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011e82:	4422      	add	r2, r4
 8011e84:	3302      	adds	r3, #2
 8011e86:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011e8a:	e7c5      	b.n	8011e18 <_printf_common+0x58>
 8011e8c:	2301      	movs	r3, #1
 8011e8e:	4622      	mov	r2, r4
 8011e90:	4649      	mov	r1, r9
 8011e92:	4638      	mov	r0, r7
 8011e94:	47c0      	blx	r8
 8011e96:	3001      	adds	r0, #1
 8011e98:	d0e6      	beq.n	8011e68 <_printf_common+0xa8>
 8011e9a:	3601      	adds	r6, #1
 8011e9c:	e7d9      	b.n	8011e52 <_printf_common+0x92>
	...

08011ea0 <_printf_i>:
 8011ea0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011ea4:	460c      	mov	r4, r1
 8011ea6:	7e27      	ldrb	r7, [r4, #24]
 8011ea8:	4691      	mov	r9, r2
 8011eaa:	2f78      	cmp	r7, #120	; 0x78
 8011eac:	4680      	mov	r8, r0
 8011eae:	469a      	mov	sl, r3
 8011eb0:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011eb2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011eb6:	d807      	bhi.n	8011ec8 <_printf_i+0x28>
 8011eb8:	2f62      	cmp	r7, #98	; 0x62
 8011eba:	d80a      	bhi.n	8011ed2 <_printf_i+0x32>
 8011ebc:	2f00      	cmp	r7, #0
 8011ebe:	f000 80d9 	beq.w	8012074 <_printf_i+0x1d4>
 8011ec2:	2f58      	cmp	r7, #88	; 0x58
 8011ec4:	f000 80a4 	beq.w	8012010 <_printf_i+0x170>
 8011ec8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8011ecc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011ed0:	e03a      	b.n	8011f48 <_printf_i+0xa8>
 8011ed2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011ed6:	2b15      	cmp	r3, #21
 8011ed8:	d8f6      	bhi.n	8011ec8 <_printf_i+0x28>
 8011eda:	a001      	add	r0, pc, #4	; (adr r0, 8011ee0 <_printf_i+0x40>)
 8011edc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8011ee0:	08011f39 	.word	0x08011f39
 8011ee4:	08011f4d 	.word	0x08011f4d
 8011ee8:	08011ec9 	.word	0x08011ec9
 8011eec:	08011ec9 	.word	0x08011ec9
 8011ef0:	08011ec9 	.word	0x08011ec9
 8011ef4:	08011ec9 	.word	0x08011ec9
 8011ef8:	08011f4d 	.word	0x08011f4d
 8011efc:	08011ec9 	.word	0x08011ec9
 8011f00:	08011ec9 	.word	0x08011ec9
 8011f04:	08011ec9 	.word	0x08011ec9
 8011f08:	08011ec9 	.word	0x08011ec9
 8011f0c:	0801205b 	.word	0x0801205b
 8011f10:	08011f7d 	.word	0x08011f7d
 8011f14:	0801203d 	.word	0x0801203d
 8011f18:	08011ec9 	.word	0x08011ec9
 8011f1c:	08011ec9 	.word	0x08011ec9
 8011f20:	0801207d 	.word	0x0801207d
 8011f24:	08011ec9 	.word	0x08011ec9
 8011f28:	08011f7d 	.word	0x08011f7d
 8011f2c:	08011ec9 	.word	0x08011ec9
 8011f30:	08011ec9 	.word	0x08011ec9
 8011f34:	08012045 	.word	0x08012045
 8011f38:	680b      	ldr	r3, [r1, #0]
 8011f3a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8011f3e:	1d1a      	adds	r2, r3, #4
 8011f40:	681b      	ldr	r3, [r3, #0]
 8011f42:	600a      	str	r2, [r1, #0]
 8011f44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011f48:	2301      	movs	r3, #1
 8011f4a:	e0a4      	b.n	8012096 <_printf_i+0x1f6>
 8011f4c:	6825      	ldr	r5, [r4, #0]
 8011f4e:	6808      	ldr	r0, [r1, #0]
 8011f50:	062e      	lsls	r6, r5, #24
 8011f52:	f100 0304 	add.w	r3, r0, #4
 8011f56:	d50a      	bpl.n	8011f6e <_printf_i+0xce>
 8011f58:	6805      	ldr	r5, [r0, #0]
 8011f5a:	600b      	str	r3, [r1, #0]
 8011f5c:	2d00      	cmp	r5, #0
 8011f5e:	da03      	bge.n	8011f68 <_printf_i+0xc8>
 8011f60:	232d      	movs	r3, #45	; 0x2d
 8011f62:	426d      	negs	r5, r5
 8011f64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011f68:	230a      	movs	r3, #10
 8011f6a:	485e      	ldr	r0, [pc, #376]	; (80120e4 <_printf_i+0x244>)
 8011f6c:	e019      	b.n	8011fa2 <_printf_i+0x102>
 8011f6e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8011f72:	6805      	ldr	r5, [r0, #0]
 8011f74:	600b      	str	r3, [r1, #0]
 8011f76:	bf18      	it	ne
 8011f78:	b22d      	sxthne	r5, r5
 8011f7a:	e7ef      	b.n	8011f5c <_printf_i+0xbc>
 8011f7c:	680b      	ldr	r3, [r1, #0]
 8011f7e:	6825      	ldr	r5, [r4, #0]
 8011f80:	1d18      	adds	r0, r3, #4
 8011f82:	6008      	str	r0, [r1, #0]
 8011f84:	0628      	lsls	r0, r5, #24
 8011f86:	d501      	bpl.n	8011f8c <_printf_i+0xec>
 8011f88:	681d      	ldr	r5, [r3, #0]
 8011f8a:	e002      	b.n	8011f92 <_printf_i+0xf2>
 8011f8c:	0669      	lsls	r1, r5, #25
 8011f8e:	d5fb      	bpl.n	8011f88 <_printf_i+0xe8>
 8011f90:	881d      	ldrh	r5, [r3, #0]
 8011f92:	2f6f      	cmp	r7, #111	; 0x6f
 8011f94:	bf0c      	ite	eq
 8011f96:	2308      	moveq	r3, #8
 8011f98:	230a      	movne	r3, #10
 8011f9a:	4852      	ldr	r0, [pc, #328]	; (80120e4 <_printf_i+0x244>)
 8011f9c:	2100      	movs	r1, #0
 8011f9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011fa2:	6866      	ldr	r6, [r4, #4]
 8011fa4:	2e00      	cmp	r6, #0
 8011fa6:	bfa8      	it	ge
 8011fa8:	6821      	ldrge	r1, [r4, #0]
 8011faa:	60a6      	str	r6, [r4, #8]
 8011fac:	bfa4      	itt	ge
 8011fae:	f021 0104 	bicge.w	r1, r1, #4
 8011fb2:	6021      	strge	r1, [r4, #0]
 8011fb4:	b90d      	cbnz	r5, 8011fba <_printf_i+0x11a>
 8011fb6:	2e00      	cmp	r6, #0
 8011fb8:	d04d      	beq.n	8012056 <_printf_i+0x1b6>
 8011fba:	4616      	mov	r6, r2
 8011fbc:	fbb5 f1f3 	udiv	r1, r5, r3
 8011fc0:	fb03 5711 	mls	r7, r3, r1, r5
 8011fc4:	5dc7      	ldrb	r7, [r0, r7]
 8011fc6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011fca:	462f      	mov	r7, r5
 8011fcc:	42bb      	cmp	r3, r7
 8011fce:	460d      	mov	r5, r1
 8011fd0:	d9f4      	bls.n	8011fbc <_printf_i+0x11c>
 8011fd2:	2b08      	cmp	r3, #8
 8011fd4:	d10b      	bne.n	8011fee <_printf_i+0x14e>
 8011fd6:	6823      	ldr	r3, [r4, #0]
 8011fd8:	07df      	lsls	r7, r3, #31
 8011fda:	d508      	bpl.n	8011fee <_printf_i+0x14e>
 8011fdc:	6923      	ldr	r3, [r4, #16]
 8011fde:	6861      	ldr	r1, [r4, #4]
 8011fe0:	4299      	cmp	r1, r3
 8011fe2:	bfde      	ittt	le
 8011fe4:	2330      	movle	r3, #48	; 0x30
 8011fe6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011fea:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8011fee:	1b92      	subs	r2, r2, r6
 8011ff0:	6122      	str	r2, [r4, #16]
 8011ff2:	464b      	mov	r3, r9
 8011ff4:	4621      	mov	r1, r4
 8011ff6:	4640      	mov	r0, r8
 8011ff8:	f8cd a000 	str.w	sl, [sp]
 8011ffc:	aa03      	add	r2, sp, #12
 8011ffe:	f7ff fedf 	bl	8011dc0 <_printf_common>
 8012002:	3001      	adds	r0, #1
 8012004:	d14c      	bne.n	80120a0 <_printf_i+0x200>
 8012006:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801200a:	b004      	add	sp, #16
 801200c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012010:	4834      	ldr	r0, [pc, #208]	; (80120e4 <_printf_i+0x244>)
 8012012:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8012016:	680e      	ldr	r6, [r1, #0]
 8012018:	6823      	ldr	r3, [r4, #0]
 801201a:	f856 5b04 	ldr.w	r5, [r6], #4
 801201e:	061f      	lsls	r7, r3, #24
 8012020:	600e      	str	r6, [r1, #0]
 8012022:	d514      	bpl.n	801204e <_printf_i+0x1ae>
 8012024:	07d9      	lsls	r1, r3, #31
 8012026:	bf44      	itt	mi
 8012028:	f043 0320 	orrmi.w	r3, r3, #32
 801202c:	6023      	strmi	r3, [r4, #0]
 801202e:	b91d      	cbnz	r5, 8012038 <_printf_i+0x198>
 8012030:	6823      	ldr	r3, [r4, #0]
 8012032:	f023 0320 	bic.w	r3, r3, #32
 8012036:	6023      	str	r3, [r4, #0]
 8012038:	2310      	movs	r3, #16
 801203a:	e7af      	b.n	8011f9c <_printf_i+0xfc>
 801203c:	6823      	ldr	r3, [r4, #0]
 801203e:	f043 0320 	orr.w	r3, r3, #32
 8012042:	6023      	str	r3, [r4, #0]
 8012044:	2378      	movs	r3, #120	; 0x78
 8012046:	4828      	ldr	r0, [pc, #160]	; (80120e8 <_printf_i+0x248>)
 8012048:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801204c:	e7e3      	b.n	8012016 <_printf_i+0x176>
 801204e:	065e      	lsls	r6, r3, #25
 8012050:	bf48      	it	mi
 8012052:	b2ad      	uxthmi	r5, r5
 8012054:	e7e6      	b.n	8012024 <_printf_i+0x184>
 8012056:	4616      	mov	r6, r2
 8012058:	e7bb      	b.n	8011fd2 <_printf_i+0x132>
 801205a:	680b      	ldr	r3, [r1, #0]
 801205c:	6826      	ldr	r6, [r4, #0]
 801205e:	1d1d      	adds	r5, r3, #4
 8012060:	6960      	ldr	r0, [r4, #20]
 8012062:	600d      	str	r5, [r1, #0]
 8012064:	0635      	lsls	r5, r6, #24
 8012066:	681b      	ldr	r3, [r3, #0]
 8012068:	d501      	bpl.n	801206e <_printf_i+0x1ce>
 801206a:	6018      	str	r0, [r3, #0]
 801206c:	e002      	b.n	8012074 <_printf_i+0x1d4>
 801206e:	0671      	lsls	r1, r6, #25
 8012070:	d5fb      	bpl.n	801206a <_printf_i+0x1ca>
 8012072:	8018      	strh	r0, [r3, #0]
 8012074:	2300      	movs	r3, #0
 8012076:	4616      	mov	r6, r2
 8012078:	6123      	str	r3, [r4, #16]
 801207a:	e7ba      	b.n	8011ff2 <_printf_i+0x152>
 801207c:	680b      	ldr	r3, [r1, #0]
 801207e:	1d1a      	adds	r2, r3, #4
 8012080:	600a      	str	r2, [r1, #0]
 8012082:	681e      	ldr	r6, [r3, #0]
 8012084:	2100      	movs	r1, #0
 8012086:	4630      	mov	r0, r6
 8012088:	6862      	ldr	r2, [r4, #4]
 801208a:	f000 fa9d 	bl	80125c8 <memchr>
 801208e:	b108      	cbz	r0, 8012094 <_printf_i+0x1f4>
 8012090:	1b80      	subs	r0, r0, r6
 8012092:	6060      	str	r0, [r4, #4]
 8012094:	6863      	ldr	r3, [r4, #4]
 8012096:	6123      	str	r3, [r4, #16]
 8012098:	2300      	movs	r3, #0
 801209a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801209e:	e7a8      	b.n	8011ff2 <_printf_i+0x152>
 80120a0:	4632      	mov	r2, r6
 80120a2:	4649      	mov	r1, r9
 80120a4:	4640      	mov	r0, r8
 80120a6:	6923      	ldr	r3, [r4, #16]
 80120a8:	47d0      	blx	sl
 80120aa:	3001      	adds	r0, #1
 80120ac:	d0ab      	beq.n	8012006 <_printf_i+0x166>
 80120ae:	6823      	ldr	r3, [r4, #0]
 80120b0:	079b      	lsls	r3, r3, #30
 80120b2:	d413      	bmi.n	80120dc <_printf_i+0x23c>
 80120b4:	68e0      	ldr	r0, [r4, #12]
 80120b6:	9b03      	ldr	r3, [sp, #12]
 80120b8:	4298      	cmp	r0, r3
 80120ba:	bfb8      	it	lt
 80120bc:	4618      	movlt	r0, r3
 80120be:	e7a4      	b.n	801200a <_printf_i+0x16a>
 80120c0:	2301      	movs	r3, #1
 80120c2:	4632      	mov	r2, r6
 80120c4:	4649      	mov	r1, r9
 80120c6:	4640      	mov	r0, r8
 80120c8:	47d0      	blx	sl
 80120ca:	3001      	adds	r0, #1
 80120cc:	d09b      	beq.n	8012006 <_printf_i+0x166>
 80120ce:	3501      	adds	r5, #1
 80120d0:	68e3      	ldr	r3, [r4, #12]
 80120d2:	9903      	ldr	r1, [sp, #12]
 80120d4:	1a5b      	subs	r3, r3, r1
 80120d6:	42ab      	cmp	r3, r5
 80120d8:	dcf2      	bgt.n	80120c0 <_printf_i+0x220>
 80120da:	e7eb      	b.n	80120b4 <_printf_i+0x214>
 80120dc:	2500      	movs	r5, #0
 80120de:	f104 0619 	add.w	r6, r4, #25
 80120e2:	e7f5      	b.n	80120d0 <_printf_i+0x230>
 80120e4:	080127c9 	.word	0x080127c9
 80120e8:	080127da 	.word	0x080127da

080120ec <_sbrk_r>:
 80120ec:	b538      	push	{r3, r4, r5, lr}
 80120ee:	2300      	movs	r3, #0
 80120f0:	4d05      	ldr	r5, [pc, #20]	; (8012108 <_sbrk_r+0x1c>)
 80120f2:	4604      	mov	r4, r0
 80120f4:	4608      	mov	r0, r1
 80120f6:	602b      	str	r3, [r5, #0]
 80120f8:	f7fe fa12 	bl	8010520 <_sbrk>
 80120fc:	1c43      	adds	r3, r0, #1
 80120fe:	d102      	bne.n	8012106 <_sbrk_r+0x1a>
 8012100:	682b      	ldr	r3, [r5, #0]
 8012102:	b103      	cbz	r3, 8012106 <_sbrk_r+0x1a>
 8012104:	6023      	str	r3, [r4, #0]
 8012106:	bd38      	pop	{r3, r4, r5, pc}
 8012108:	200000ec 	.word	0x200000ec

0801210c <__sread>:
 801210c:	b510      	push	{r4, lr}
 801210e:	460c      	mov	r4, r1
 8012110:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012114:	f000 fabe 	bl	8012694 <_read_r>
 8012118:	2800      	cmp	r0, #0
 801211a:	bfab      	itete	ge
 801211c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801211e:	89a3      	ldrhlt	r3, [r4, #12]
 8012120:	181b      	addge	r3, r3, r0
 8012122:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012126:	bfac      	ite	ge
 8012128:	6563      	strge	r3, [r4, #84]	; 0x54
 801212a:	81a3      	strhlt	r3, [r4, #12]
 801212c:	bd10      	pop	{r4, pc}

0801212e <__swrite>:
 801212e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012132:	461f      	mov	r7, r3
 8012134:	898b      	ldrh	r3, [r1, #12]
 8012136:	4605      	mov	r5, r0
 8012138:	05db      	lsls	r3, r3, #23
 801213a:	460c      	mov	r4, r1
 801213c:	4616      	mov	r6, r2
 801213e:	d505      	bpl.n	801214c <__swrite+0x1e>
 8012140:	2302      	movs	r3, #2
 8012142:	2200      	movs	r2, #0
 8012144:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012148:	f000 f9c8 	bl	80124dc <_lseek_r>
 801214c:	89a3      	ldrh	r3, [r4, #12]
 801214e:	4632      	mov	r2, r6
 8012150:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012154:	81a3      	strh	r3, [r4, #12]
 8012156:	4628      	mov	r0, r5
 8012158:	463b      	mov	r3, r7
 801215a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801215e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012162:	f000 b869 	b.w	8012238 <_write_r>

08012166 <__sseek>:
 8012166:	b510      	push	{r4, lr}
 8012168:	460c      	mov	r4, r1
 801216a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801216e:	f000 f9b5 	bl	80124dc <_lseek_r>
 8012172:	1c43      	adds	r3, r0, #1
 8012174:	89a3      	ldrh	r3, [r4, #12]
 8012176:	bf15      	itete	ne
 8012178:	6560      	strne	r0, [r4, #84]	; 0x54
 801217a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801217e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012182:	81a3      	strheq	r3, [r4, #12]
 8012184:	bf18      	it	ne
 8012186:	81a3      	strhne	r3, [r4, #12]
 8012188:	bd10      	pop	{r4, pc}

0801218a <__sclose>:
 801218a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801218e:	f000 b8d3 	b.w	8012338 <_close_r>
	...

08012194 <__swbuf_r>:
 8012194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012196:	460e      	mov	r6, r1
 8012198:	4614      	mov	r4, r2
 801219a:	4605      	mov	r5, r0
 801219c:	b118      	cbz	r0, 80121a6 <__swbuf_r+0x12>
 801219e:	6983      	ldr	r3, [r0, #24]
 80121a0:	b90b      	cbnz	r3, 80121a6 <__swbuf_r+0x12>
 80121a2:	f7ff fbbb 	bl	801191c <__sinit>
 80121a6:	4b21      	ldr	r3, [pc, #132]	; (801222c <__swbuf_r+0x98>)
 80121a8:	429c      	cmp	r4, r3
 80121aa:	d12b      	bne.n	8012204 <__swbuf_r+0x70>
 80121ac:	686c      	ldr	r4, [r5, #4]
 80121ae:	69a3      	ldr	r3, [r4, #24]
 80121b0:	60a3      	str	r3, [r4, #8]
 80121b2:	89a3      	ldrh	r3, [r4, #12]
 80121b4:	071a      	lsls	r2, r3, #28
 80121b6:	d52f      	bpl.n	8012218 <__swbuf_r+0x84>
 80121b8:	6923      	ldr	r3, [r4, #16]
 80121ba:	b36b      	cbz	r3, 8012218 <__swbuf_r+0x84>
 80121bc:	6923      	ldr	r3, [r4, #16]
 80121be:	6820      	ldr	r0, [r4, #0]
 80121c0:	b2f6      	uxtb	r6, r6
 80121c2:	1ac0      	subs	r0, r0, r3
 80121c4:	6963      	ldr	r3, [r4, #20]
 80121c6:	4637      	mov	r7, r6
 80121c8:	4283      	cmp	r3, r0
 80121ca:	dc04      	bgt.n	80121d6 <__swbuf_r+0x42>
 80121cc:	4621      	mov	r1, r4
 80121ce:	4628      	mov	r0, r5
 80121d0:	f000 f948 	bl	8012464 <_fflush_r>
 80121d4:	bb30      	cbnz	r0, 8012224 <__swbuf_r+0x90>
 80121d6:	68a3      	ldr	r3, [r4, #8]
 80121d8:	3001      	adds	r0, #1
 80121da:	3b01      	subs	r3, #1
 80121dc:	60a3      	str	r3, [r4, #8]
 80121de:	6823      	ldr	r3, [r4, #0]
 80121e0:	1c5a      	adds	r2, r3, #1
 80121e2:	6022      	str	r2, [r4, #0]
 80121e4:	701e      	strb	r6, [r3, #0]
 80121e6:	6963      	ldr	r3, [r4, #20]
 80121e8:	4283      	cmp	r3, r0
 80121ea:	d004      	beq.n	80121f6 <__swbuf_r+0x62>
 80121ec:	89a3      	ldrh	r3, [r4, #12]
 80121ee:	07db      	lsls	r3, r3, #31
 80121f0:	d506      	bpl.n	8012200 <__swbuf_r+0x6c>
 80121f2:	2e0a      	cmp	r6, #10
 80121f4:	d104      	bne.n	8012200 <__swbuf_r+0x6c>
 80121f6:	4621      	mov	r1, r4
 80121f8:	4628      	mov	r0, r5
 80121fa:	f000 f933 	bl	8012464 <_fflush_r>
 80121fe:	b988      	cbnz	r0, 8012224 <__swbuf_r+0x90>
 8012200:	4638      	mov	r0, r7
 8012202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012204:	4b0a      	ldr	r3, [pc, #40]	; (8012230 <__swbuf_r+0x9c>)
 8012206:	429c      	cmp	r4, r3
 8012208:	d101      	bne.n	801220e <__swbuf_r+0x7a>
 801220a:	68ac      	ldr	r4, [r5, #8]
 801220c:	e7cf      	b.n	80121ae <__swbuf_r+0x1a>
 801220e:	4b09      	ldr	r3, [pc, #36]	; (8012234 <__swbuf_r+0xa0>)
 8012210:	429c      	cmp	r4, r3
 8012212:	bf08      	it	eq
 8012214:	68ec      	ldreq	r4, [r5, #12]
 8012216:	e7ca      	b.n	80121ae <__swbuf_r+0x1a>
 8012218:	4621      	mov	r1, r4
 801221a:	4628      	mov	r0, r5
 801221c:	f000 f81e 	bl	801225c <__swsetup_r>
 8012220:	2800      	cmp	r0, #0
 8012222:	d0cb      	beq.n	80121bc <__swbuf_r+0x28>
 8012224:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8012228:	e7ea      	b.n	8012200 <__swbuf_r+0x6c>
 801222a:	bf00      	nop
 801222c:	08012778 	.word	0x08012778
 8012230:	08012798 	.word	0x08012798
 8012234:	08012758 	.word	0x08012758

08012238 <_write_r>:
 8012238:	b538      	push	{r3, r4, r5, lr}
 801223a:	4604      	mov	r4, r0
 801223c:	4608      	mov	r0, r1
 801223e:	4611      	mov	r1, r2
 8012240:	2200      	movs	r2, #0
 8012242:	4d05      	ldr	r5, [pc, #20]	; (8012258 <_write_r+0x20>)
 8012244:	602a      	str	r2, [r5, #0]
 8012246:	461a      	mov	r2, r3
 8012248:	f7fe f91e 	bl	8010488 <_write>
 801224c:	1c43      	adds	r3, r0, #1
 801224e:	d102      	bne.n	8012256 <_write_r+0x1e>
 8012250:	682b      	ldr	r3, [r5, #0]
 8012252:	b103      	cbz	r3, 8012256 <_write_r+0x1e>
 8012254:	6023      	str	r3, [r4, #0]
 8012256:	bd38      	pop	{r3, r4, r5, pc}
 8012258:	200000ec 	.word	0x200000ec

0801225c <__swsetup_r>:
 801225c:	4b32      	ldr	r3, [pc, #200]	; (8012328 <__swsetup_r+0xcc>)
 801225e:	b570      	push	{r4, r5, r6, lr}
 8012260:	681d      	ldr	r5, [r3, #0]
 8012262:	4606      	mov	r6, r0
 8012264:	460c      	mov	r4, r1
 8012266:	b125      	cbz	r5, 8012272 <__swsetup_r+0x16>
 8012268:	69ab      	ldr	r3, [r5, #24]
 801226a:	b913      	cbnz	r3, 8012272 <__swsetup_r+0x16>
 801226c:	4628      	mov	r0, r5
 801226e:	f7ff fb55 	bl	801191c <__sinit>
 8012272:	4b2e      	ldr	r3, [pc, #184]	; (801232c <__swsetup_r+0xd0>)
 8012274:	429c      	cmp	r4, r3
 8012276:	d10f      	bne.n	8012298 <__swsetup_r+0x3c>
 8012278:	686c      	ldr	r4, [r5, #4]
 801227a:	89a3      	ldrh	r3, [r4, #12]
 801227c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012280:	0719      	lsls	r1, r3, #28
 8012282:	d42c      	bmi.n	80122de <__swsetup_r+0x82>
 8012284:	06dd      	lsls	r5, r3, #27
 8012286:	d411      	bmi.n	80122ac <__swsetup_r+0x50>
 8012288:	2309      	movs	r3, #9
 801228a:	6033      	str	r3, [r6, #0]
 801228c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012290:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012294:	81a3      	strh	r3, [r4, #12]
 8012296:	e03e      	b.n	8012316 <__swsetup_r+0xba>
 8012298:	4b25      	ldr	r3, [pc, #148]	; (8012330 <__swsetup_r+0xd4>)
 801229a:	429c      	cmp	r4, r3
 801229c:	d101      	bne.n	80122a2 <__swsetup_r+0x46>
 801229e:	68ac      	ldr	r4, [r5, #8]
 80122a0:	e7eb      	b.n	801227a <__swsetup_r+0x1e>
 80122a2:	4b24      	ldr	r3, [pc, #144]	; (8012334 <__swsetup_r+0xd8>)
 80122a4:	429c      	cmp	r4, r3
 80122a6:	bf08      	it	eq
 80122a8:	68ec      	ldreq	r4, [r5, #12]
 80122aa:	e7e6      	b.n	801227a <__swsetup_r+0x1e>
 80122ac:	0758      	lsls	r0, r3, #29
 80122ae:	d512      	bpl.n	80122d6 <__swsetup_r+0x7a>
 80122b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80122b2:	b141      	cbz	r1, 80122c6 <__swsetup_r+0x6a>
 80122b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80122b8:	4299      	cmp	r1, r3
 80122ba:	d002      	beq.n	80122c2 <__swsetup_r+0x66>
 80122bc:	4630      	mov	r0, r6
 80122be:	f000 f99d 	bl	80125fc <_free_r>
 80122c2:	2300      	movs	r3, #0
 80122c4:	6363      	str	r3, [r4, #52]	; 0x34
 80122c6:	89a3      	ldrh	r3, [r4, #12]
 80122c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80122cc:	81a3      	strh	r3, [r4, #12]
 80122ce:	2300      	movs	r3, #0
 80122d0:	6063      	str	r3, [r4, #4]
 80122d2:	6923      	ldr	r3, [r4, #16]
 80122d4:	6023      	str	r3, [r4, #0]
 80122d6:	89a3      	ldrh	r3, [r4, #12]
 80122d8:	f043 0308 	orr.w	r3, r3, #8
 80122dc:	81a3      	strh	r3, [r4, #12]
 80122de:	6923      	ldr	r3, [r4, #16]
 80122e0:	b94b      	cbnz	r3, 80122f6 <__swsetup_r+0x9a>
 80122e2:	89a3      	ldrh	r3, [r4, #12]
 80122e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80122e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80122ec:	d003      	beq.n	80122f6 <__swsetup_r+0x9a>
 80122ee:	4621      	mov	r1, r4
 80122f0:	4630      	mov	r0, r6
 80122f2:	f000 f929 	bl	8012548 <__smakebuf_r>
 80122f6:	89a0      	ldrh	r0, [r4, #12]
 80122f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80122fc:	f010 0301 	ands.w	r3, r0, #1
 8012300:	d00a      	beq.n	8012318 <__swsetup_r+0xbc>
 8012302:	2300      	movs	r3, #0
 8012304:	60a3      	str	r3, [r4, #8]
 8012306:	6963      	ldr	r3, [r4, #20]
 8012308:	425b      	negs	r3, r3
 801230a:	61a3      	str	r3, [r4, #24]
 801230c:	6923      	ldr	r3, [r4, #16]
 801230e:	b943      	cbnz	r3, 8012322 <__swsetup_r+0xc6>
 8012310:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012314:	d1ba      	bne.n	801228c <__swsetup_r+0x30>
 8012316:	bd70      	pop	{r4, r5, r6, pc}
 8012318:	0781      	lsls	r1, r0, #30
 801231a:	bf58      	it	pl
 801231c:	6963      	ldrpl	r3, [r4, #20]
 801231e:	60a3      	str	r3, [r4, #8]
 8012320:	e7f4      	b.n	801230c <__swsetup_r+0xb0>
 8012322:	2000      	movs	r0, #0
 8012324:	e7f7      	b.n	8012316 <__swsetup_r+0xba>
 8012326:	bf00      	nop
 8012328:	2000000c 	.word	0x2000000c
 801232c:	08012778 	.word	0x08012778
 8012330:	08012798 	.word	0x08012798
 8012334:	08012758 	.word	0x08012758

08012338 <_close_r>:
 8012338:	b538      	push	{r3, r4, r5, lr}
 801233a:	2300      	movs	r3, #0
 801233c:	4d05      	ldr	r5, [pc, #20]	; (8012354 <_close_r+0x1c>)
 801233e:	4604      	mov	r4, r0
 8012340:	4608      	mov	r0, r1
 8012342:	602b      	str	r3, [r5, #0]
 8012344:	f7fe f8bc 	bl	80104c0 <_close>
 8012348:	1c43      	adds	r3, r0, #1
 801234a:	d102      	bne.n	8012352 <_close_r+0x1a>
 801234c:	682b      	ldr	r3, [r5, #0]
 801234e:	b103      	cbz	r3, 8012352 <_close_r+0x1a>
 8012350:	6023      	str	r3, [r4, #0]
 8012352:	bd38      	pop	{r3, r4, r5, pc}
 8012354:	200000ec 	.word	0x200000ec

08012358 <__sflush_r>:
 8012358:	898a      	ldrh	r2, [r1, #12]
 801235a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801235e:	4605      	mov	r5, r0
 8012360:	0710      	lsls	r0, r2, #28
 8012362:	460c      	mov	r4, r1
 8012364:	d458      	bmi.n	8012418 <__sflush_r+0xc0>
 8012366:	684b      	ldr	r3, [r1, #4]
 8012368:	2b00      	cmp	r3, #0
 801236a:	dc05      	bgt.n	8012378 <__sflush_r+0x20>
 801236c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801236e:	2b00      	cmp	r3, #0
 8012370:	dc02      	bgt.n	8012378 <__sflush_r+0x20>
 8012372:	2000      	movs	r0, #0
 8012374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012378:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801237a:	2e00      	cmp	r6, #0
 801237c:	d0f9      	beq.n	8012372 <__sflush_r+0x1a>
 801237e:	2300      	movs	r3, #0
 8012380:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012384:	682f      	ldr	r7, [r5, #0]
 8012386:	602b      	str	r3, [r5, #0]
 8012388:	d032      	beq.n	80123f0 <__sflush_r+0x98>
 801238a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801238c:	89a3      	ldrh	r3, [r4, #12]
 801238e:	075a      	lsls	r2, r3, #29
 8012390:	d505      	bpl.n	801239e <__sflush_r+0x46>
 8012392:	6863      	ldr	r3, [r4, #4]
 8012394:	1ac0      	subs	r0, r0, r3
 8012396:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012398:	b10b      	cbz	r3, 801239e <__sflush_r+0x46>
 801239a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801239c:	1ac0      	subs	r0, r0, r3
 801239e:	2300      	movs	r3, #0
 80123a0:	4602      	mov	r2, r0
 80123a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80123a4:	4628      	mov	r0, r5
 80123a6:	6a21      	ldr	r1, [r4, #32]
 80123a8:	47b0      	blx	r6
 80123aa:	1c43      	adds	r3, r0, #1
 80123ac:	89a3      	ldrh	r3, [r4, #12]
 80123ae:	d106      	bne.n	80123be <__sflush_r+0x66>
 80123b0:	6829      	ldr	r1, [r5, #0]
 80123b2:	291d      	cmp	r1, #29
 80123b4:	d82c      	bhi.n	8012410 <__sflush_r+0xb8>
 80123b6:	4a2a      	ldr	r2, [pc, #168]	; (8012460 <__sflush_r+0x108>)
 80123b8:	40ca      	lsrs	r2, r1
 80123ba:	07d6      	lsls	r6, r2, #31
 80123bc:	d528      	bpl.n	8012410 <__sflush_r+0xb8>
 80123be:	2200      	movs	r2, #0
 80123c0:	6062      	str	r2, [r4, #4]
 80123c2:	6922      	ldr	r2, [r4, #16]
 80123c4:	04d9      	lsls	r1, r3, #19
 80123c6:	6022      	str	r2, [r4, #0]
 80123c8:	d504      	bpl.n	80123d4 <__sflush_r+0x7c>
 80123ca:	1c42      	adds	r2, r0, #1
 80123cc:	d101      	bne.n	80123d2 <__sflush_r+0x7a>
 80123ce:	682b      	ldr	r3, [r5, #0]
 80123d0:	b903      	cbnz	r3, 80123d4 <__sflush_r+0x7c>
 80123d2:	6560      	str	r0, [r4, #84]	; 0x54
 80123d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80123d6:	602f      	str	r7, [r5, #0]
 80123d8:	2900      	cmp	r1, #0
 80123da:	d0ca      	beq.n	8012372 <__sflush_r+0x1a>
 80123dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80123e0:	4299      	cmp	r1, r3
 80123e2:	d002      	beq.n	80123ea <__sflush_r+0x92>
 80123e4:	4628      	mov	r0, r5
 80123e6:	f000 f909 	bl	80125fc <_free_r>
 80123ea:	2000      	movs	r0, #0
 80123ec:	6360      	str	r0, [r4, #52]	; 0x34
 80123ee:	e7c1      	b.n	8012374 <__sflush_r+0x1c>
 80123f0:	6a21      	ldr	r1, [r4, #32]
 80123f2:	2301      	movs	r3, #1
 80123f4:	4628      	mov	r0, r5
 80123f6:	47b0      	blx	r6
 80123f8:	1c41      	adds	r1, r0, #1
 80123fa:	d1c7      	bne.n	801238c <__sflush_r+0x34>
 80123fc:	682b      	ldr	r3, [r5, #0]
 80123fe:	2b00      	cmp	r3, #0
 8012400:	d0c4      	beq.n	801238c <__sflush_r+0x34>
 8012402:	2b1d      	cmp	r3, #29
 8012404:	d001      	beq.n	801240a <__sflush_r+0xb2>
 8012406:	2b16      	cmp	r3, #22
 8012408:	d101      	bne.n	801240e <__sflush_r+0xb6>
 801240a:	602f      	str	r7, [r5, #0]
 801240c:	e7b1      	b.n	8012372 <__sflush_r+0x1a>
 801240e:	89a3      	ldrh	r3, [r4, #12]
 8012410:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012414:	81a3      	strh	r3, [r4, #12]
 8012416:	e7ad      	b.n	8012374 <__sflush_r+0x1c>
 8012418:	690f      	ldr	r7, [r1, #16]
 801241a:	2f00      	cmp	r7, #0
 801241c:	d0a9      	beq.n	8012372 <__sflush_r+0x1a>
 801241e:	0793      	lsls	r3, r2, #30
 8012420:	bf18      	it	ne
 8012422:	2300      	movne	r3, #0
 8012424:	680e      	ldr	r6, [r1, #0]
 8012426:	bf08      	it	eq
 8012428:	694b      	ldreq	r3, [r1, #20]
 801242a:	eba6 0807 	sub.w	r8, r6, r7
 801242e:	600f      	str	r7, [r1, #0]
 8012430:	608b      	str	r3, [r1, #8]
 8012432:	f1b8 0f00 	cmp.w	r8, #0
 8012436:	dd9c      	ble.n	8012372 <__sflush_r+0x1a>
 8012438:	4643      	mov	r3, r8
 801243a:	463a      	mov	r2, r7
 801243c:	4628      	mov	r0, r5
 801243e:	6a21      	ldr	r1, [r4, #32]
 8012440:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012442:	47b0      	blx	r6
 8012444:	2800      	cmp	r0, #0
 8012446:	dc06      	bgt.n	8012456 <__sflush_r+0xfe>
 8012448:	89a3      	ldrh	r3, [r4, #12]
 801244a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801244e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012452:	81a3      	strh	r3, [r4, #12]
 8012454:	e78e      	b.n	8012374 <__sflush_r+0x1c>
 8012456:	4407      	add	r7, r0
 8012458:	eba8 0800 	sub.w	r8, r8, r0
 801245c:	e7e9      	b.n	8012432 <__sflush_r+0xda>
 801245e:	bf00      	nop
 8012460:	20400001 	.word	0x20400001

08012464 <_fflush_r>:
 8012464:	b538      	push	{r3, r4, r5, lr}
 8012466:	690b      	ldr	r3, [r1, #16]
 8012468:	4605      	mov	r5, r0
 801246a:	460c      	mov	r4, r1
 801246c:	b913      	cbnz	r3, 8012474 <_fflush_r+0x10>
 801246e:	2500      	movs	r5, #0
 8012470:	4628      	mov	r0, r5
 8012472:	bd38      	pop	{r3, r4, r5, pc}
 8012474:	b118      	cbz	r0, 801247e <_fflush_r+0x1a>
 8012476:	6983      	ldr	r3, [r0, #24]
 8012478:	b90b      	cbnz	r3, 801247e <_fflush_r+0x1a>
 801247a:	f7ff fa4f 	bl	801191c <__sinit>
 801247e:	4b14      	ldr	r3, [pc, #80]	; (80124d0 <_fflush_r+0x6c>)
 8012480:	429c      	cmp	r4, r3
 8012482:	d11b      	bne.n	80124bc <_fflush_r+0x58>
 8012484:	686c      	ldr	r4, [r5, #4]
 8012486:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801248a:	2b00      	cmp	r3, #0
 801248c:	d0ef      	beq.n	801246e <_fflush_r+0xa>
 801248e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012490:	07d0      	lsls	r0, r2, #31
 8012492:	d404      	bmi.n	801249e <_fflush_r+0x3a>
 8012494:	0599      	lsls	r1, r3, #22
 8012496:	d402      	bmi.n	801249e <_fflush_r+0x3a>
 8012498:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801249a:	f7ff fadd 	bl	8011a58 <__retarget_lock_acquire_recursive>
 801249e:	4628      	mov	r0, r5
 80124a0:	4621      	mov	r1, r4
 80124a2:	f7ff ff59 	bl	8012358 <__sflush_r>
 80124a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80124a8:	4605      	mov	r5, r0
 80124aa:	07da      	lsls	r2, r3, #31
 80124ac:	d4e0      	bmi.n	8012470 <_fflush_r+0xc>
 80124ae:	89a3      	ldrh	r3, [r4, #12]
 80124b0:	059b      	lsls	r3, r3, #22
 80124b2:	d4dd      	bmi.n	8012470 <_fflush_r+0xc>
 80124b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80124b6:	f7ff fad0 	bl	8011a5a <__retarget_lock_release_recursive>
 80124ba:	e7d9      	b.n	8012470 <_fflush_r+0xc>
 80124bc:	4b05      	ldr	r3, [pc, #20]	; (80124d4 <_fflush_r+0x70>)
 80124be:	429c      	cmp	r4, r3
 80124c0:	d101      	bne.n	80124c6 <_fflush_r+0x62>
 80124c2:	68ac      	ldr	r4, [r5, #8]
 80124c4:	e7df      	b.n	8012486 <_fflush_r+0x22>
 80124c6:	4b04      	ldr	r3, [pc, #16]	; (80124d8 <_fflush_r+0x74>)
 80124c8:	429c      	cmp	r4, r3
 80124ca:	bf08      	it	eq
 80124cc:	68ec      	ldreq	r4, [r5, #12]
 80124ce:	e7da      	b.n	8012486 <_fflush_r+0x22>
 80124d0:	08012778 	.word	0x08012778
 80124d4:	08012798 	.word	0x08012798
 80124d8:	08012758 	.word	0x08012758

080124dc <_lseek_r>:
 80124dc:	b538      	push	{r3, r4, r5, lr}
 80124de:	4604      	mov	r4, r0
 80124e0:	4608      	mov	r0, r1
 80124e2:	4611      	mov	r1, r2
 80124e4:	2200      	movs	r2, #0
 80124e6:	4d05      	ldr	r5, [pc, #20]	; (80124fc <_lseek_r+0x20>)
 80124e8:	602a      	str	r2, [r5, #0]
 80124ea:	461a      	mov	r2, r3
 80124ec:	f7fe f80c 	bl	8010508 <_lseek>
 80124f0:	1c43      	adds	r3, r0, #1
 80124f2:	d102      	bne.n	80124fa <_lseek_r+0x1e>
 80124f4:	682b      	ldr	r3, [r5, #0]
 80124f6:	b103      	cbz	r3, 80124fa <_lseek_r+0x1e>
 80124f8:	6023      	str	r3, [r4, #0]
 80124fa:	bd38      	pop	{r3, r4, r5, pc}
 80124fc:	200000ec 	.word	0x200000ec

08012500 <__swhatbuf_r>:
 8012500:	b570      	push	{r4, r5, r6, lr}
 8012502:	460e      	mov	r6, r1
 8012504:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012508:	4614      	mov	r4, r2
 801250a:	2900      	cmp	r1, #0
 801250c:	461d      	mov	r5, r3
 801250e:	b096      	sub	sp, #88	; 0x58
 8012510:	da07      	bge.n	8012522 <__swhatbuf_r+0x22>
 8012512:	2300      	movs	r3, #0
 8012514:	602b      	str	r3, [r5, #0]
 8012516:	89b3      	ldrh	r3, [r6, #12]
 8012518:	061a      	lsls	r2, r3, #24
 801251a:	d410      	bmi.n	801253e <__swhatbuf_r+0x3e>
 801251c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012520:	e00e      	b.n	8012540 <__swhatbuf_r+0x40>
 8012522:	466a      	mov	r2, sp
 8012524:	f000 f8c8 	bl	80126b8 <_fstat_r>
 8012528:	2800      	cmp	r0, #0
 801252a:	dbf2      	blt.n	8012512 <__swhatbuf_r+0x12>
 801252c:	9a01      	ldr	r2, [sp, #4]
 801252e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012532:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012536:	425a      	negs	r2, r3
 8012538:	415a      	adcs	r2, r3
 801253a:	602a      	str	r2, [r5, #0]
 801253c:	e7ee      	b.n	801251c <__swhatbuf_r+0x1c>
 801253e:	2340      	movs	r3, #64	; 0x40
 8012540:	2000      	movs	r0, #0
 8012542:	6023      	str	r3, [r4, #0]
 8012544:	b016      	add	sp, #88	; 0x58
 8012546:	bd70      	pop	{r4, r5, r6, pc}

08012548 <__smakebuf_r>:
 8012548:	898b      	ldrh	r3, [r1, #12]
 801254a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801254c:	079d      	lsls	r5, r3, #30
 801254e:	4606      	mov	r6, r0
 8012550:	460c      	mov	r4, r1
 8012552:	d507      	bpl.n	8012564 <__smakebuf_r+0x1c>
 8012554:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012558:	6023      	str	r3, [r4, #0]
 801255a:	6123      	str	r3, [r4, #16]
 801255c:	2301      	movs	r3, #1
 801255e:	6163      	str	r3, [r4, #20]
 8012560:	b002      	add	sp, #8
 8012562:	bd70      	pop	{r4, r5, r6, pc}
 8012564:	466a      	mov	r2, sp
 8012566:	ab01      	add	r3, sp, #4
 8012568:	f7ff ffca 	bl	8012500 <__swhatbuf_r>
 801256c:	9900      	ldr	r1, [sp, #0]
 801256e:	4605      	mov	r5, r0
 8012570:	4630      	mov	r0, r6
 8012572:	f7ff fa73 	bl	8011a5c <_malloc_r>
 8012576:	b948      	cbnz	r0, 801258c <__smakebuf_r+0x44>
 8012578:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801257c:	059a      	lsls	r2, r3, #22
 801257e:	d4ef      	bmi.n	8012560 <__smakebuf_r+0x18>
 8012580:	f023 0303 	bic.w	r3, r3, #3
 8012584:	f043 0302 	orr.w	r3, r3, #2
 8012588:	81a3      	strh	r3, [r4, #12]
 801258a:	e7e3      	b.n	8012554 <__smakebuf_r+0xc>
 801258c:	4b0d      	ldr	r3, [pc, #52]	; (80125c4 <__smakebuf_r+0x7c>)
 801258e:	62b3      	str	r3, [r6, #40]	; 0x28
 8012590:	89a3      	ldrh	r3, [r4, #12]
 8012592:	6020      	str	r0, [r4, #0]
 8012594:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012598:	81a3      	strh	r3, [r4, #12]
 801259a:	9b00      	ldr	r3, [sp, #0]
 801259c:	6120      	str	r0, [r4, #16]
 801259e:	6163      	str	r3, [r4, #20]
 80125a0:	9b01      	ldr	r3, [sp, #4]
 80125a2:	b15b      	cbz	r3, 80125bc <__smakebuf_r+0x74>
 80125a4:	4630      	mov	r0, r6
 80125a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80125aa:	f000 f897 	bl	80126dc <_isatty_r>
 80125ae:	b128      	cbz	r0, 80125bc <__smakebuf_r+0x74>
 80125b0:	89a3      	ldrh	r3, [r4, #12]
 80125b2:	f023 0303 	bic.w	r3, r3, #3
 80125b6:	f043 0301 	orr.w	r3, r3, #1
 80125ba:	81a3      	strh	r3, [r4, #12]
 80125bc:	89a0      	ldrh	r0, [r4, #12]
 80125be:	4305      	orrs	r5, r0
 80125c0:	81a5      	strh	r5, [r4, #12]
 80125c2:	e7cd      	b.n	8012560 <__smakebuf_r+0x18>
 80125c4:	080118b5 	.word	0x080118b5

080125c8 <memchr>:
 80125c8:	4603      	mov	r3, r0
 80125ca:	b510      	push	{r4, lr}
 80125cc:	b2c9      	uxtb	r1, r1
 80125ce:	4402      	add	r2, r0
 80125d0:	4293      	cmp	r3, r2
 80125d2:	4618      	mov	r0, r3
 80125d4:	d101      	bne.n	80125da <memchr+0x12>
 80125d6:	2000      	movs	r0, #0
 80125d8:	e003      	b.n	80125e2 <memchr+0x1a>
 80125da:	7804      	ldrb	r4, [r0, #0]
 80125dc:	3301      	adds	r3, #1
 80125de:	428c      	cmp	r4, r1
 80125e0:	d1f6      	bne.n	80125d0 <memchr+0x8>
 80125e2:	bd10      	pop	{r4, pc}

080125e4 <__malloc_lock>:
 80125e4:	4801      	ldr	r0, [pc, #4]	; (80125ec <__malloc_lock+0x8>)
 80125e6:	f7ff ba37 	b.w	8011a58 <__retarget_lock_acquire_recursive>
 80125ea:	bf00      	nop
 80125ec:	200000e4 	.word	0x200000e4

080125f0 <__malloc_unlock>:
 80125f0:	4801      	ldr	r0, [pc, #4]	; (80125f8 <__malloc_unlock+0x8>)
 80125f2:	f7ff ba32 	b.w	8011a5a <__retarget_lock_release_recursive>
 80125f6:	bf00      	nop
 80125f8:	200000e4 	.word	0x200000e4

080125fc <_free_r>:
 80125fc:	b538      	push	{r3, r4, r5, lr}
 80125fe:	4605      	mov	r5, r0
 8012600:	2900      	cmp	r1, #0
 8012602:	d043      	beq.n	801268c <_free_r+0x90>
 8012604:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012608:	1f0c      	subs	r4, r1, #4
 801260a:	2b00      	cmp	r3, #0
 801260c:	bfb8      	it	lt
 801260e:	18e4      	addlt	r4, r4, r3
 8012610:	f7ff ffe8 	bl	80125e4 <__malloc_lock>
 8012614:	4a1e      	ldr	r2, [pc, #120]	; (8012690 <_free_r+0x94>)
 8012616:	6813      	ldr	r3, [r2, #0]
 8012618:	4610      	mov	r0, r2
 801261a:	b933      	cbnz	r3, 801262a <_free_r+0x2e>
 801261c:	6063      	str	r3, [r4, #4]
 801261e:	6014      	str	r4, [r2, #0]
 8012620:	4628      	mov	r0, r5
 8012622:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012626:	f7ff bfe3 	b.w	80125f0 <__malloc_unlock>
 801262a:	42a3      	cmp	r3, r4
 801262c:	d90a      	bls.n	8012644 <_free_r+0x48>
 801262e:	6821      	ldr	r1, [r4, #0]
 8012630:	1862      	adds	r2, r4, r1
 8012632:	4293      	cmp	r3, r2
 8012634:	bf01      	itttt	eq
 8012636:	681a      	ldreq	r2, [r3, #0]
 8012638:	685b      	ldreq	r3, [r3, #4]
 801263a:	1852      	addeq	r2, r2, r1
 801263c:	6022      	streq	r2, [r4, #0]
 801263e:	6063      	str	r3, [r4, #4]
 8012640:	6004      	str	r4, [r0, #0]
 8012642:	e7ed      	b.n	8012620 <_free_r+0x24>
 8012644:	461a      	mov	r2, r3
 8012646:	685b      	ldr	r3, [r3, #4]
 8012648:	b10b      	cbz	r3, 801264e <_free_r+0x52>
 801264a:	42a3      	cmp	r3, r4
 801264c:	d9fa      	bls.n	8012644 <_free_r+0x48>
 801264e:	6811      	ldr	r1, [r2, #0]
 8012650:	1850      	adds	r0, r2, r1
 8012652:	42a0      	cmp	r0, r4
 8012654:	d10b      	bne.n	801266e <_free_r+0x72>
 8012656:	6820      	ldr	r0, [r4, #0]
 8012658:	4401      	add	r1, r0
 801265a:	1850      	adds	r0, r2, r1
 801265c:	4283      	cmp	r3, r0
 801265e:	6011      	str	r1, [r2, #0]
 8012660:	d1de      	bne.n	8012620 <_free_r+0x24>
 8012662:	6818      	ldr	r0, [r3, #0]
 8012664:	685b      	ldr	r3, [r3, #4]
 8012666:	4401      	add	r1, r0
 8012668:	6011      	str	r1, [r2, #0]
 801266a:	6053      	str	r3, [r2, #4]
 801266c:	e7d8      	b.n	8012620 <_free_r+0x24>
 801266e:	d902      	bls.n	8012676 <_free_r+0x7a>
 8012670:	230c      	movs	r3, #12
 8012672:	602b      	str	r3, [r5, #0]
 8012674:	e7d4      	b.n	8012620 <_free_r+0x24>
 8012676:	6820      	ldr	r0, [r4, #0]
 8012678:	1821      	adds	r1, r4, r0
 801267a:	428b      	cmp	r3, r1
 801267c:	bf01      	itttt	eq
 801267e:	6819      	ldreq	r1, [r3, #0]
 8012680:	685b      	ldreq	r3, [r3, #4]
 8012682:	1809      	addeq	r1, r1, r0
 8012684:	6021      	streq	r1, [r4, #0]
 8012686:	6063      	str	r3, [r4, #4]
 8012688:	6054      	str	r4, [r2, #4]
 801268a:	e7c9      	b.n	8012620 <_free_r+0x24>
 801268c:	bd38      	pop	{r3, r4, r5, pc}
 801268e:	bf00      	nop
 8012690:	20000090 	.word	0x20000090

08012694 <_read_r>:
 8012694:	b538      	push	{r3, r4, r5, lr}
 8012696:	4604      	mov	r4, r0
 8012698:	4608      	mov	r0, r1
 801269a:	4611      	mov	r1, r2
 801269c:	2200      	movs	r2, #0
 801269e:	4d05      	ldr	r5, [pc, #20]	; (80126b4 <_read_r+0x20>)
 80126a0:	602a      	str	r2, [r5, #0]
 80126a2:	461a      	mov	r2, r3
 80126a4:	f7fd fed3 	bl	801044e <_read>
 80126a8:	1c43      	adds	r3, r0, #1
 80126aa:	d102      	bne.n	80126b2 <_read_r+0x1e>
 80126ac:	682b      	ldr	r3, [r5, #0]
 80126ae:	b103      	cbz	r3, 80126b2 <_read_r+0x1e>
 80126b0:	6023      	str	r3, [r4, #0]
 80126b2:	bd38      	pop	{r3, r4, r5, pc}
 80126b4:	200000ec 	.word	0x200000ec

080126b8 <_fstat_r>:
 80126b8:	b538      	push	{r3, r4, r5, lr}
 80126ba:	2300      	movs	r3, #0
 80126bc:	4d06      	ldr	r5, [pc, #24]	; (80126d8 <_fstat_r+0x20>)
 80126be:	4604      	mov	r4, r0
 80126c0:	4608      	mov	r0, r1
 80126c2:	4611      	mov	r1, r2
 80126c4:	602b      	str	r3, [r5, #0]
 80126c6:	f7fd ff06 	bl	80104d6 <_fstat>
 80126ca:	1c43      	adds	r3, r0, #1
 80126cc:	d102      	bne.n	80126d4 <_fstat_r+0x1c>
 80126ce:	682b      	ldr	r3, [r5, #0]
 80126d0:	b103      	cbz	r3, 80126d4 <_fstat_r+0x1c>
 80126d2:	6023      	str	r3, [r4, #0]
 80126d4:	bd38      	pop	{r3, r4, r5, pc}
 80126d6:	bf00      	nop
 80126d8:	200000ec 	.word	0x200000ec

080126dc <_isatty_r>:
 80126dc:	b538      	push	{r3, r4, r5, lr}
 80126de:	2300      	movs	r3, #0
 80126e0:	4d05      	ldr	r5, [pc, #20]	; (80126f8 <_isatty_r+0x1c>)
 80126e2:	4604      	mov	r4, r0
 80126e4:	4608      	mov	r0, r1
 80126e6:	602b      	str	r3, [r5, #0]
 80126e8:	f7fd ff04 	bl	80104f4 <_isatty>
 80126ec:	1c43      	adds	r3, r0, #1
 80126ee:	d102      	bne.n	80126f6 <_isatty_r+0x1a>
 80126f0:	682b      	ldr	r3, [r5, #0]
 80126f2:	b103      	cbz	r3, 80126f6 <_isatty_r+0x1a>
 80126f4:	6023      	str	r3, [r4, #0]
 80126f6:	bd38      	pop	{r3, r4, r5, pc}
 80126f8:	200000ec 	.word	0x200000ec

080126fc <_init>:
 80126fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80126fe:	bf00      	nop
 8012700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012702:	bc08      	pop	{r3}
 8012704:	469e      	mov	lr, r3
 8012706:	4770      	bx	lr

08012708 <_fini>:
 8012708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801270a:	bf00      	nop
 801270c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801270e:	bc08      	pop	{r3}
 8012710:	469e      	mov	lr, r3
 8012712:	4770      	bx	lr
